/*! For license information please see compiled-app.bundle.js.LICENSE.txt */
(()=>{"use strict";var e={247:(e,t,n)=>{var r=n(982),l=n(540),a=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=Symbol.for("react.element"),u=Symbol.for("react.transitional.element"),s=Symbol.for("react.portal"),c=Symbol.for("react.fragment"),f=Symbol.for("react.strict_mode"),d=Symbol.for("react.profiler"),p=Symbol.for("react.provider"),m=Symbol.for("react.consumer"),h=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),g=Symbol.for("react.suspense"),y=Symbol.for("react.suspense_list"),b=Symbol.for("react.memo"),k=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var w=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var S=Symbol.for("react.memo_cache_sentinel"),E=Symbol.iterator;function x(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=E&&e[E]||e["@@iterator"])?e:null}var C=Symbol.for("react.client.reference");function _(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===C?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case c:return"Fragment";case s:return"Portal";case d:return"Profiler";case f:return"StrictMode";case g:return"Suspense";case y:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case h:return(e.displayName||"Context")+".Provider";case m:return(e._context.displayName||"Context")+".Consumer";case v:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case b:return null!==(t=e.displayName||null)?t:_(e.type)||"Memo";case k:t=e._payload,e=e._init;try{return _(e(t))}catch(e){}}return null}var P,z,N=l.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,T=Object.assign;function L(e){if(void 0===P)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);P=t&&t[1]||"",z=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+P+e+z}var O=!1;function R(e,t){if(!e||O)return"";O=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var l=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");l&&l.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),o=a[0],i=a[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(l=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;l<s.length&&!s[l].includes("DetermineComponentFrameRoot");)l++;if(r===u.length||l===s.length)for(r=u.length-1,l=s.length-1;1<=r&&0<=l&&u[r]!==s[l];)l--;for(;1<=r&&0<=l;r--,l--)if(u[r]!==s[l]){if(1!==r||1!==l)do{if(r--,0>--l||u[r]!==s[l]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=l);break}}}finally{O=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?L(n):""}function A(e){switch(e.tag){case 26:case 27:case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 15:return R(e.type,!1);case 11:return R(e.type.render,!1);case 1:return R(e.type,!0);default:return""}}function M(e){try{var t="";do{t+=A(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function F(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function I(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function D(e){if(F(e)!==e)throw Error(o(188))}function j(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=j(e)))return t;e=e.sibling}return null}var U=Array.isArray,H=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,$={pending:!1,data:null,method:null,action:null},V=[],B=-1;function W(e){return{current:e}}function Q(e){0>B||(e.current=V[B],V[B]=null,B--)}function q(e,t){B++,V[B]=e.current,e.current=t}var K=W(null),Y=W(null),G=W(null),X=W(null);function Z(e,t){switch(q(G,t),q(Y,e),q(K,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Yc(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Gc(e=Yc(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}Q(K),q(K,t)}function J(){Q(K),Q(Y),Q(G)}function ee(e){null!==e.memoizedState&&q(X,e);var t=K.current,n=Gc(t,e.type);t!==n&&(q(Y,e),q(K,n))}function te(e){Y.current===e&&(Q(K),Q(Y)),X.current===e&&(Q(X),Ff._currentValue=$)}var ne=Object.prototype.hasOwnProperty,re=r.unstable_scheduleCallback,le=r.unstable_cancelCallback,ae=r.unstable_shouldYield,oe=r.unstable_requestPaint,ie=r.unstable_now,ue=r.unstable_getCurrentPriorityLevel,se=r.unstable_ImmediatePriority,ce=r.unstable_UserBlockingPriority,fe=r.unstable_NormalPriority,de=r.unstable_LowPriority,pe=r.unstable_IdlePriority,me=r.log,he=r.unstable_setDisableYieldValue,ve=null,ge=null;function ye(e){if("function"==typeof me&&he(e),ge&&"function"==typeof ge.setStrictMode)try{ge.setStrictMode(ve,e)}catch(e){}}var be=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ke(e)/we|0)|0},ke=Math.log,we=Math.LN2,Se=128,Ee=4194304;function xe(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function Ce(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,l=e.suspendedLanes,a=e.pingedLanes,o=e.warmLanes;e=0!==e.finishedLanes;var i=134217727&n;return 0!==i?0!=(n=i&~l)?r=xe(n):0!=(a&=i)?r=xe(a):e||0!=(o=i&~o)&&(r=xe(o)):0!=(i=n&~l)?r=xe(i):0!==a?r=xe(a):e||0!=(o=n&~o)&&(r=xe(o)),0===r?0:0===t||t===r||t&l||!((l=r&-r)>=(o=t&-t)||32===l&&4194176&o)?r:t}function _e(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Pe(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ze(){var e=Se;return!(4194176&(Se<<=1))&&(Se=128),e}function Ne(){var e=Ee;return!(62914560&(Ee<<=1))&&(Ee=4194304),e}function Te(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Le(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Oe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-be(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Re(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-be(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}function Ae(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Me(){var e=H.p;return 0!==e?e:void 0===(e=window.event)?32:Yf(e.type)}var Fe=Math.random().toString(36).slice(2),Ie="__reactFiber$"+Fe,De="__reactProps$"+Fe,je="__reactContainer$"+Fe,Ue="__reactEvents$"+Fe,He="__reactListeners$"+Fe,$e="__reactHandles$"+Fe,Ve="__reactResources$"+Fe,Be="__reactMarker$"+Fe;function We(e){delete e[Ie],delete e[De],delete e[Ue],delete e[He],delete e[$e]}function Qe(e){var t=e[Ie];if(t)return t;for(var n=e.parentNode;n;){if(t=n[je]||n[Ie]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=uf(e);null!==e;){if(n=e[Ie])return n;e=uf(e)}return t}n=(e=n).parentNode}return null}function qe(e){if(e=e[Ie]||e[je]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ke(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Ye(e){var t=e[Ve];return t||(t=e[Ve]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ge(e){e[Be]=!0}var Xe=new Set,Ze={};function Je(e,t){et(e,t),et(e+"Capture",t)}function et(e,t){for(Ze[e]=t,e=0;e<t.length;e++)Xe.add(t[e])}var tt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),nt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),rt={},lt={};function at(e,t,n){if(l=t,ne.call(lt,l)||!ne.call(rt,l)&&(nt.test(l)?lt[l]=!0:(rt[l]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var l}function ot(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function it(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function st(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ct(e){e._valueTracker||(e._valueTracker=function(e){var t=st(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var l=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=st(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function dt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function mt(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function ht(e,t,n,r,l,a,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?gt(e,o,ut(t)):null!=n?gt(e,o,ut(n)):null!=r&&e.removeAttribute("value"),null==l&&null!=a&&(e.defaultChecked=!!a),null!=l&&(e.checked=l&&"function"!=typeof l&&"symbol"!=typeof l),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+ut(i):e.removeAttribute("name")}function vt(e,t,n,r,l,a,o,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:l)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function gt(e,t,n){"number"===t&&dt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function yt(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,l=0;l<e.length;l++){if(e[l].value===n)return e[l].selected=!0,void(r&&(e[l].defaultSelected=!0));null!==t||e[l].disabled||(t=e[l])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function kt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(U(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var St=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Et(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||St.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function xt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var l in t)r=t[l],t.hasOwnProperty(l)&&n[l]!==r&&Et(e,l,r)}else for(var a in t)t.hasOwnProperty(a)&&Et(e,a,t[a])}function Ct(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _t=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Pt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function zt(e){return Pt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Nt=null;function Tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Lt=null,Ot=null;function Rt(e){var t=qe(e);if(t&&(e=t.stateNode)){var n=e[De]||null;e:switch(e=t.stateNode,t.type){case"input":if(ht(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=r[De]||null;if(!l)throw Error(o(90));ht(r,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&yt(e,!!n.multiple,t,!1)}}}var At=!1;function Mt(e,t,n){if(At)return e(t,n);At=!0;try{return e(t)}finally{if(At=!1,(null!==Lt||null!==Ot)&&(Is(),Lt&&(t=Lt,e=Ot,Ot=Lt=null,Rt(t),e)))for(t=0;t<e.length;t++)Rt(e[t])}}function Ft(e,t){var n=e.stateNode;if(null===n)return null;var r=n[De]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var It=!1;if(tt)try{var Dt={};Object.defineProperty(Dt,"passive",{get:function(){It=!0}}),window.addEventListener("test",Dt,Dt),window.removeEventListener("test",Dt,Dt)}catch(e){It=!1}var jt=null,Ut=null,Ht=null;function $t(){if(Ht)return Ht;var e,t,n=Ut,r=n.length,l="value"in jt?jt.value:jt.textContent,a=l.length;for(e=0;e<r&&n[e]===l[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===l[a-t];t++);return Ht=l.slice(e,1<t?1-t:void 0)}function Vt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Bt(){return!0}function Wt(){return!1}function Qt(e){function t(t,n,r,l,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?Bt:Wt,this.isPropagationStopped=Wt,this}return T(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Bt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Bt)},persist:function(){},isPersistent:Bt}),t}var qt,Kt,Yt,Gt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Xt=Qt(Gt),Zt=T({},Gt,{view:0,detail:0}),Jt=Qt(Zt),en=T({},Zt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:dn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Yt&&(Yt&&"mousemove"===e.type?(qt=e.screenX-Yt.screenX,Kt=e.screenY-Yt.screenY):Kt=qt=0,Yt=e),qt)},movementY:function(e){return"movementY"in e?e.movementY:Kt}}),tn=Qt(en),nn=Qt(T({},en,{dataTransfer:0})),rn=Qt(T({},Zt,{relatedTarget:0})),ln=Qt(T({},Gt,{animationName:0,elapsedTime:0,pseudoElement:0})),an=Qt(T({},Gt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),on=Qt(T({},Gt,{data:0})),un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function fn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=cn[e])&&!!t[e]}function dn(){return fn}var pn=Qt(T({},Zt,{key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Vt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:dn,charCode:function(e){return"keypress"===e.type?Vt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Vt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mn=Qt(T({},en,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),hn=Qt(T({},Zt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:dn})),vn=Qt(T({},Gt,{propertyName:0,elapsedTime:0,pseudoElement:0})),gn=Qt(T({},en,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),yn=Qt(T({},Gt,{newState:0,oldState:0})),bn=[9,13,27,32],kn=tt&&"CompositionEvent"in window,wn=null;tt&&"documentMode"in document&&(wn=document.documentMode);var Sn=tt&&"TextEvent"in window&&!wn,En=tt&&(!kn||wn&&8<wn&&11>=wn),xn=String.fromCharCode(32),Cn=!1;function _n(e,t){switch(e){case"keyup":return-1!==bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Nn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Tn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nn[e.type]:"textarea"===t}function Ln(e,t,n,r){Lt?Ot?Ot.push(r):Ot=[r]:Lt=r,0<(t=Mc(t,"onChange")).length&&(n=new Xt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var On=null,Rn=null;function An(e){Pc(e,0)}function Mn(e){if(ft(Ke(e)))return e}function Fn(e,t){if("change"===e)return t}var In=!1;if(tt){var Dn;if(tt){var jn="oninput"in document;if(!jn){var Un=document.createElement("div");Un.setAttribute("oninput","return;"),jn="function"==typeof Un.oninput}Dn=jn}else Dn=!1;In=Dn&&(!document.documentMode||9<document.documentMode)}function Hn(){On&&(On.detachEvent("onpropertychange",$n),Rn=On=null)}function $n(e){if("value"===e.propertyName&&Mn(Rn)){var t=[];Ln(t,Rn,e,Tt(e)),Mt(An,t)}}function Vn(e,t,n){"focusin"===e?(Hn(),Rn=n,(On=t).attachEvent("onpropertychange",$n)):"focusout"===e&&Hn()}function Bn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Mn(Rn)}function Wn(e,t){if("click"===e)return Mn(t)}function Qn(e,t){if("input"===e||"change"===e)return Mn(t)}var qn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Kn(e,t){if(qn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!ne.call(t,l)||!qn(e[l],t[l]))return!1}return!0}function Yn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gn(e,t){var n,r=Yn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Yn(r)}}function Xn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Xn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Zn(e){for(var t=dt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dt((e=t.contentWindow).document)}return t}function Jn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function er(e,t){var n=Zn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Xn(t.ownerDocument.documentElement,t)){if(null!==r&&Jn(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var l=t.textContent.length,a=Math.min(r.start,l);r=void 0===r.end?a:Math.min(r.end,l),!n.extend&&a>r&&(l=r,r=a,a=l),l=Gn(t,a);var o=Gn(t,r);l&&o&&(1!==n.rangeCount||n.anchorNode!==l.node||n.anchorOffset!==l.offset||n.focusNode!==o.node||n.focusOffset!==o.offset)&&((e=e.createRange()).setStart(l.node,l.offset),n.removeAllRanges(),a>r?(n.addRange(e),n.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var tr=tt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,lr=null,ar=!1;function or(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ar||null==nr||nr!==dt(r)||(r="selectionStart"in(r=nr)&&Jn(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},lr&&Kn(lr,r)||(lr=r,0<(r=Mc(rr,"onSelect")).length&&(t=new Xt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function ir(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:ir("Animation","AnimationEnd"),animationiteration:ir("Animation","AnimationIteration"),animationstart:ir("Animation","AnimationStart"),transitionrun:ir("Transition","TransitionRun"),transitionstart:ir("Transition","TransitionStart"),transitioncancel:ir("Transition","TransitionCancel"),transitionend:ir("Transition","TransitionEnd")},sr={},cr={};function fr(e){if(sr[e])return sr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in cr)return sr[e]=n[t];return e}tt&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var dr=fr("animationend"),pr=fr("animationiteration"),mr=fr("animationstart"),hr=fr("transitionrun"),vr=fr("transitionstart"),gr=fr("transitioncancel"),yr=fr("transitionend"),br=new Map,kr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function wr(e,t){br.set(e,t),Je(t,[e])}var Sr=[],Er=0,xr=0;function Cr(){for(var e=Er,t=xr=Er=0;t<e;){var n=Sr[t];Sr[t++]=null;var r=Sr[t];Sr[t++]=null;var l=Sr[t];Sr[t++]=null;var a=Sr[t];if(Sr[t++]=null,null!==r&&null!==l){var o=r.pending;null===o?l.next=l:(l.next=o.next,o.next=l),r.pending=l}0!==a&&Nr(n,l,a)}}function _r(e,t,n,r){Sr[Er++]=e,Sr[Er++]=t,Sr[Er++]=n,Sr[Er++]=r,xr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Pr(e,t,n,r){return _r(e,t,n,r),Tr(e)}function zr(e,t){return _r(e,null,null,t),Tr(e)}function Nr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var l=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(l=!0)),e=a,a=a.return;l&&null!==t&&3===e.tag&&(a=e.stateNode,l=31-be(n),null===(e=(a=a.hiddenUpdates)[l])?a[l]=[t]:e.push(t),t.lane=536870912|n)}function Tr(e){if(50<Ps)throw Ps=0,zs=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Lr={},Or=new WeakMap;function Rr(e,t){if("object"==typeof e&&null!==e){var n=Or.get(e);return void 0!==n?n:(t={value:e,source:t,stack:M(t)},Or.set(e,t),t)}return{value:e,source:t,stack:M(t)}}var Ar=[],Mr=0,Fr=null,Ir=0,Dr=[],jr=0,Ur=null,Hr=1,$r="";function Vr(e,t){Ar[Mr++]=Ir,Ar[Mr++]=Fr,Fr=e,Ir=t}function Br(e,t,n){Dr[jr++]=Hr,Dr[jr++]=$r,Dr[jr++]=Ur,Ur=e;var r=Hr;e=$r;var l=32-be(r)-1;r&=~(1<<l),n+=1;var a=32-be(t)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,Hr=1<<32-be(t)+l|n<<l|r,$r=a+e}else Hr=1<<a|n<<l|r,$r=e}function Wr(e){null!==e.return&&(Vr(e,1),Br(e,1,0))}function Qr(e){for(;e===Fr;)Fr=Ar[--Mr],Ar[Mr]=null,Ir=Ar[--Mr],Ar[Mr]=null;for(;e===Ur;)Ur=Dr[--jr],Dr[jr]=null,$r=Dr[--jr],Dr[jr]=null,Hr=Dr[--jr],Dr[jr]=null}var qr=null,Kr=null,Yr=!1,Gr=null,Xr=!1,Zr=Error(o(519));function Jr(e){throw ll(Rr(Error(o(418,"")),e)),Zr}function el(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Ie]=e,t[De]=r,n){case"dialog":zc("cancel",t),zc("close",t);break;case"iframe":case"object":case"embed":zc("load",t);break;case"video":case"audio":for(n=0;n<Cc.length;n++)zc(Cc[n],t);break;case"source":zc("error",t);break;case"img":case"image":case"link":zc("error",t),zc("load",t);break;case"details":zc("toggle",t);break;case"input":zc("invalid",t),vt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ct(t);break;case"select":zc("invalid",t);break;case"textarea":zc("invalid",t),kt(t,r.value,r.defaultValue,r.children),ct(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Hc(t.textContent,n)?(null!=r.popover&&(zc("beforetoggle",t),zc("toggle",t)),null!=r.onScroll&&zc("scroll",t),null!=r.onScrollEnd&&zc("scrollend",t),null!=r.onClick&&(t.onclick=$c),t=!0):t=!1,t||Jr(e)}function tl(e){for(qr=e.return;qr;)switch(qr.tag){case 3:case 27:return void(Xr=!0);case 5:case 13:return void(Xr=!1);default:qr=qr.return}}function nl(e){if(e!==qr)return!1;if(!Yr)return tl(e),Yr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Xc(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Kr&&Jr(e),tl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Kr=of(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Kr=null}}else Kr=qr?of(e.stateNode.nextSibling):null;return!0}function rl(){Kr=qr=null,Yr=!1}function ll(e){null===Gr?Gr=[e]:Gr.push(e)}var al=Error(o(460)),ol=Error(o(474)),il={then:function(){}};function ul(e){return"fulfilled"===(e=e.status)||"rejected"===e}function sl(){}function cl(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(sl,sl),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===al)throw Error(o(483));throw e;default:if("string"==typeof t.status)t.then(sl,sl);else{if(null!==(e=es)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===al)throw Error(o(483));throw e}throw fl=t,al}}var fl=null;function dl(){if(null===fl)throw Error(o(459));var e=fl;return fl=null,e}var pl=null,ml=0;function hl(e){var t=ml;return ml+=1,null===pl&&(pl=[]),cl(pl,e,t)}function vl(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function gl(e,t){if(t.$$typeof===i)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function yl(e){return(0,e._init)(e._payload)}function bl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function l(e,t){return(e=Fu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function f(e,t,n,r){return null===t||6!==t.tag?((t=Hu(n,e.mode,r)).return=e,t):((t=l(t,n)).return=e,t)}function d(e,t,n,r){var a=n.type;return a===c?m(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===k&&yl(a)===t.type)?(vl(t=l(t,n.props),n),t.return=e,t):(vl(t=Du(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$u(n,e.mode,r)).return=e,t):((t=l(t,n.children||[])).return=e,t)}function m(e,t,n,r,a){return null===t||7!==t.tag?((t=ju(n,e.mode,r,a)).return=e,t):((t=l(t,n)).return=e,t)}function v(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Hu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case u:return vl(n=Du(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case s:return(t=$u(t,e.mode,n)).return=e,t;case k:return v(e,t=(0,t._init)(t._payload),n)}if(U(t)||x(t))return(t=ju(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return v(e,hl(t),n);if(t.$$typeof===h)return v(e,Ci(e,t),n);gl(e,t)}return null}function g(e,t,n,r){var l=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==l?null:f(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case u:return n.key===l?d(e,t,n,r):null;case s:return n.key===l?p(e,t,n,r):null;case k:return g(e,t,n=(l=n._init)(n._payload),r)}if(U(n)||x(n))return null!==l?null:m(e,t,n,r,null);if("function"==typeof n.then)return g(e,t,hl(n),r);if(n.$$typeof===h)return g(e,t,Ci(e,n),r);gl(e,n)}return null}function y(e,t,n,r,l){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return f(t,e=e.get(n)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case u:return d(t,e=e.get(null===r.key?n:r.key)||null,r,l);case s:return p(t,e=e.get(null===r.key?n:r.key)||null,r,l);case k:return y(e,t,n,r=(0,r._init)(r._payload),l)}if(U(r)||x(r))return m(t,e=e.get(n)||null,r,l,null);if("function"==typeof r.then)return y(e,t,n,hl(r),l);if(r.$$typeof===h)return y(e,t,n,Ci(t,r),l);gl(t,r)}return null}function b(f,d,p,m){if("object"==typeof p&&null!==p&&p.type===c&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case u:e:{for(var w=p.key;null!==d;){if(d.key===w){if((w=p.type)===c){if(7===d.tag){n(f,d.sibling),(m=l(d,p.props.children)).return=f,f=m;break e}}else if(d.elementType===w||"object"==typeof w&&null!==w&&w.$$typeof===k&&yl(w)===d.type){n(f,d.sibling),vl(m=l(d,p.props),p),m.return=f,f=m;break e}n(f,d);break}t(f,d),d=d.sibling}p.type===c?((m=ju(p.props.children,f.mode,m,p.key)).return=f,f=m):(vl(m=Du(p.type,p.key,p.props,null,f.mode,m),p),m.return=f,f=m)}return i(f);case s:e:{for(w=p.key;null!==d;){if(d.key===w){if(4===d.tag&&d.stateNode.containerInfo===p.containerInfo&&d.stateNode.implementation===p.implementation){n(f,d.sibling),(m=l(d,p.children||[])).return=f,f=m;break e}n(f,d);break}t(f,d),d=d.sibling}(m=$u(p,f.mode,m)).return=f,f=m}return i(f);case k:return b(f,d,p=(w=p._init)(p._payload),m)}if(U(p))return function(l,o,i,u){for(var s=null,c=null,f=o,d=o=0,p=null;null!==f&&d<i.length;d++){f.index>d?(p=f,f=null):p=f.sibling;var m=g(l,f,i[d],u);if(null===m){null===f&&(f=p);break}e&&f&&null===m.alternate&&t(l,f),o=a(m,o,d),null===c?s=m:c.sibling=m,c=m,f=p}if(d===i.length)return n(l,f),Yr&&Vr(l,d),s;if(null===f){for(;d<i.length;d++)null!==(f=v(l,i[d],u))&&(o=a(f,o,d),null===c?s=f:c.sibling=f,c=f);return Yr&&Vr(l,d),s}for(f=r(f);d<i.length;d++)null!==(p=y(f,l,d,i[d],u))&&(e&&null!==p.alternate&&f.delete(null===p.key?d:p.key),o=a(p,o,d),null===c?s=p:c.sibling=p,c=p);return e&&f.forEach((function(e){return t(l,e)})),Yr&&Vr(l,d),s}(f,d,p,m);if(x(p)){if("function"!=typeof(w=x(p)))throw Error(o(150));return function(l,i,u,s){if(null==u)throw Error(o(151));for(var c=null,f=null,d=i,p=i=0,m=null,h=u.next();null!==d&&!h.done;p++,h=u.next()){d.index>p?(m=d,d=null):m=d.sibling;var b=g(l,d,h.value,s);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(l,d),i=a(b,i,p),null===f?c=b:f.sibling=b,f=b,d=m}if(h.done)return n(l,d),Yr&&Vr(l,p),c;if(null===d){for(;!h.done;p++,h=u.next())null!==(h=v(l,h.value,s))&&(i=a(h,i,p),null===f?c=h:f.sibling=h,f=h);return Yr&&Vr(l,p),c}for(d=r(d);!h.done;p++,h=u.next())null!==(h=y(d,l,p,h.value,s))&&(e&&null!==h.alternate&&d.delete(null===h.key?p:h.key),i=a(h,i,p),null===f?c=h:f.sibling=h,f=h);return e&&d.forEach((function(e){return t(l,e)})),Yr&&Vr(l,p),c}(f,d,p=w.call(p),m)}if("function"==typeof p.then)return b(f,d,hl(p),m);if(p.$$typeof===h)return b(f,d,Ci(f,p),m);gl(f,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==d&&6===d.tag?(n(f,d.sibling),(m=l(d,p)).return=f,f=m):(n(f,d),(m=Hu(p,f.mode,m)).return=f,f=m),i(f)):n(f,d)}return function(e,t,n,r){try{ml=0;var l=b(e,t,n,r);return pl=null,l}catch(t){if(t===al)throw t;var a=Au(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var kl=bl(!0),wl=bl(!1),Sl=W(null),El=W(0);function xl(e,t){q(El,e=us),q(Sl,t),us=e|t.baseLanes}function Cl(){q(El,us),q(Sl,Sl.current)}function _l(){us=El.current,Q(Sl),Q(El)}var Pl=W(null),zl=null;function Nl(e){var t=e.alternate;q(Rl,1&Rl.current),q(Pl,e),null===zl&&(null===t||null!==Sl.current||null!==t.memoizedState)&&(zl=e)}function Tl(e){if(22===e.tag){if(q(Rl,Rl.current),q(Pl,e),null===zl){var t=e.alternate;null!==t&&null!==t.memoizedState&&(zl=e)}}else Ll()}function Ll(){q(Rl,Rl.current),q(Pl,Pl.current)}function Ol(e){Q(Pl),zl===e&&(zl=null),Q(Rl)}var Rl=W(0);function Al(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ml="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Fl=r.unstable_scheduleCallback,Il=r.unstable_NormalPriority,Dl={$$typeof:h,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function jl(){return{controller:new Ml,data:new Map,refCount:0}}function Ul(e){e.refCount--,0===e.refCount&&Fl(Il,(function(){e.controller.abort()}))}var Hl=null,$l=0,Vl=0,Bl=null;function Wl(){if(0==--$l&&null!==Hl){null!==Bl&&(Bl.status="fulfilled");var e=Hl;Hl=null,Vl=0,Bl=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Ql=N.S;N.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Hl){var n=Hl=[];$l=0,Vl=kc(),Bl={status:"pending",value:void 0,then:function(e){n.push(e)}}}$l++,t.then(Wl,Wl)}(0,t),null!==Ql&&Ql(e,t)};var ql=W(null);function Kl(){var e=ql.current;return null!==e?e:es.pooledCache}function Yl(e,t){q(ql,null===t?ql.current:t.pool)}function Gl(){var e=Kl();return null===e?null:{parent:Dl._currentValue,pool:e}}var Xl=0,Zl=null,Jl=null,ea=null,ta=!1,na=!1,ra=!1,la=0,aa=0,oa=null,ia=0;function ua(){throw Error(o(321))}function sa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!qn(e[n],t[n]))return!1;return!0}function ca(e,t,n,r,l,a){return Xl=a,Zl=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,N.H=null===e||null===e.memoizedState?Co:_o,ra=!1,a=n(r,l),ra=!1,na&&(a=da(t,n,r,l)),fa(e),a}function fa(e){N.H=xo;var t=null!==Jl&&null!==Jl.next;if(Xl=0,ea=Jl=Zl=null,ta=!1,aa=0,oa=null,t)throw Error(o(300));null===e||Vo||null!==(e=e.dependencies)&&Si(e)&&(Vo=!0)}function da(e,t,n,r){Zl=e;var l=0;do{if(na&&(oa=null),aa=0,na=!1,25<=l)throw Error(o(301));if(l+=1,ea=Jl=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}N.H=Po,a=t(n,r)}while(na);return a}function pa(){var e=N.H,t=e.useState()[0];return t="function"==typeof t.then?ba(t):t,e=e.useState()[0],(null!==Jl?Jl.memoizedState:null)!==e&&(Zl.flags|=1024),t}function ma(){var e=0!==la;return la=0,e}function ha(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function va(e){if(ta){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}ta=!1}Xl=0,ea=Jl=Zl=null,na=!1,aa=la=0,oa=null}function ga(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ea?Zl.memoizedState=ea=e:ea=ea.next=e,ea}function ya(){if(null===Jl){var e=Zl.alternate;e=null!==e?e.memoizedState:null}else e=Jl.next;var t=null===ea?Zl.memoizedState:ea.next;if(null!==t)ea=t,Jl=e;else{if(null===e){if(null===Zl.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(Jl=e).memoizedState,baseState:Jl.baseState,baseQueue:Jl.baseQueue,queue:Jl.queue,next:null},null===ea?Zl.memoizedState=ea=e:ea=ea.next=e}return ea}function ba(e){var t=aa;return aa+=1,null===oa&&(oa=[]),e=cl(oa,e,t),t=Zl,null===(null===ea?t.memoizedState:ea.next)&&(t=t.alternate,N.H=null===t||null===t.memoizedState?Co:_o),e}function ka(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return ba(e);if(e.$$typeof===h)return xi(e)}throw Error(o(438,String(e)))}function wa(e){var t=null,n=Zl.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Zl.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Zl.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=S;return t.index++,n}function Sa(e,t){return"function"==typeof t?t(e):t}function Ea(e){return xa(ya(),Jl,e)}function xa(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var l=e.baseQueue,a=r.pending;if(null!==a){if(null!==l){var i=l.next;l.next=a.next,a.next=i}t.baseQueue=l=a,r.pending=null}if(a=e.baseState,null===l)e.memoizedState=a;else{var u=i=null,s=null,c=t=l.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(ns&d)===d:(Xl&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Vl&&(f=!0);else{if((Xl&p)===p){c=c.next,p===Vl&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=a):s=s.next=d,Zl.lanes|=p,cs|=p}d=c.action,ra&&n(a,d),a=c.hasEagerState?c.eagerState:n(a,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=a):s=s.next=p,Zl.lanes|=d,cs|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=a:s.next=u,!qn(a,e.memoizedState)&&(Vo=!0,f&&null!==(n=Bl)))throw n;e.memoizedState=a,e.baseState=i,e.baseQueue=s,r.lastRenderedState=a}return null===l&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ca(e){var t=ya(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,a=t.memoizedState;if(null!==l){n.pending=null;var i=l=l.next;do{a=e(a,i.action),i=i.next}while(i!==l);qn(a,t.memoizedState)||(Vo=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function _a(e,t,n){var r=Zl,l=ya(),a=Yr;if(a){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!qn((Jl||l).memoizedState,n);if(i&&(l.memoizedState=n,Vo=!0),l=l.queue,Xa(Na.bind(null,r,l,e),[e]),l.getSnapshot!==t||i||null!==ea&&1&ea.memoizedState.tag){if(r.flags|=2048,Qa(9,za.bind(null,r,l,n,t),{destroy:void 0},null),null===es)throw Error(o(349));a||60&Xl||Pa(r,t,n)}return n}function Pa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Zl.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Zl.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function za(e,t,n,r){t.value=n,t.getSnapshot=r,Ta(t)&&La(e)}function Na(e,t,n){return n((function(){Ta(t)&&La(e)}))}function Ta(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!qn(e,n)}catch(e){return!0}}function La(e){var t=zr(e,2);null!==t&&Ls(t,0,2)}function Oa(e){var t=ga();if("function"==typeof e){var n=e;if(e=n(),ra){ye(!0);try{n()}finally{ye(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Sa,lastRenderedState:e},t}function Ra(e,t,n,r){return e.baseState=n,xa(e,Jl,"function"==typeof r?r:Sa)}function Aa(e,t,n,r,l){if(wo(e))throw Error(o(485));if(null!==(e=t.action)){var a={payload:l,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==N.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,Ma(t,a)):(a.next=n.next,t.pending=n.next=a)}}function Ma(e,t){var n=t.action,r=t.payload,l=e.state;if(t.isTransition){var a=N.T,o={};N.T=o;try{var i=n(l,r),u=N.S;null!==u&&u(o,i),Fa(e,t,i)}catch(n){Da(e,t,n)}finally{N.T=a}}else try{Fa(e,t,a=n(l,r))}catch(n){Da(e,t,n)}}function Fa(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Ia(e,t,n)}),(function(n){return Da(e,t,n)})):Ia(e,t,n)}function Ia(e,t,n){t.status="fulfilled",t.value=n,ja(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Ma(e,n)))}function Da(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,ja(t),t=t.next}while(t!==r)}e.action=null}function ja(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Ua(e,t){return t}function Ha(e,t){if(Yr){var n=es.formState;if(null!==n){e:{var r=Zl;if(Yr){if(Kr){t:{for(var l=Kr,a=Xr;8!==l.nodeType;){if(!a){l=null;break t}if(null===(l=of(l.nextSibling))){l=null;break t}}l="F!"===(a=l.data)||"F"===a?l:null}if(l){Kr=of(l.nextSibling),r="F!"===l.data;break e}}Jr(r)}r=!1}r&&(t=n[0])}}return(n=ga()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ua,lastRenderedState:t},n.queue=r,n=yo.bind(null,Zl,r),r.dispatch=n,r=Oa(!1),a=ko.bind(null,Zl,!1,r.queue),l={state:t,dispatch:null,action:e,pending:null},(r=ga()).queue=l,n=Aa.bind(null,Zl,l,a,n),l.dispatch=n,r.memoizedState=e,[t,n,!1]}function $a(e){return Va(ya(),Jl,e)}function Va(e,t,n){t=xa(e,t,Ua)[0],e=Ea(Sa)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?ba(t):t;var r=ya(),l=r.queue,a=l.dispatch;return n!==r.memoizedState&&(Zl.flags|=2048,Qa(9,Ba.bind(null,l,n),{destroy:void 0},null)),[t,a,e]}function Ba(e,t){e.action=t}function Wa(e){var t=ya(),n=Jl;if(null!==n)return Va(t,n,e);ya(),t=t.memoizedState;var r=(n=ya()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Qa(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Zl.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Zl.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function qa(){return ya().memoizedState}function Ka(e,t,n,r){var l=ga();Zl.flags|=e,l.memoizedState=Qa(1|t,n,{destroy:void 0},void 0===r?null:r)}function Ya(e,t,n,r){var l=ya();r=void 0===r?null:r;var a=l.memoizedState.inst;null!==Jl&&null!==r&&sa(r,Jl.memoizedState.deps)?l.memoizedState=Qa(t,n,a,r):(Zl.flags|=e,l.memoizedState=Qa(1|t,n,a,r))}function Ga(e,t){Ka(8390656,8,e,t)}function Xa(e,t){Ya(2048,8,e,t)}function Za(e,t){return Ya(4,2,e,t)}function Ja(e,t){return Ya(4,4,e,t)}function eo(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function to(e,t,n){n=null!=n?n.concat([e]):null,Ya(4,4,eo.bind(null,t,e),n)}function no(){}function ro(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&sa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function lo(e,t){var n=ya();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&sa(t,r[1]))return r[0];if(r=e(),ra){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r}function ao(e,t,n){return void 0===n||1073741824&Xl?e.memoizedState=t:(e.memoizedState=n,e=Ts(),Zl.lanes|=e,cs|=e,n)}function oo(e,t,n,r){return qn(n,t)?n:null!==Sl.current?(e=ao(e,n,r),qn(e,t)||(Vo=!0),e):42&Xl?(e=Ts(),Zl.lanes|=e,cs|=e,t):(Vo=!0,e.memoizedState=n)}function io(e,t,n,r,l){var a=H.p;H.p=0!==a&&8>a?a:8;var o,i,u,s=N.T,c={};N.T=c,ko(e,!1,t,n);try{var f=l(),d=N.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?bo(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Ns()):bo(e,t,r,Ns())}catch(n){bo(e,t,{then:function(){},status:"rejected",reason:n},Ns())}finally{H.p=a,N.T=s}}function uo(){}function so(e,t,n,r){if(5!==e.tag)throw Error(o(476));var l=co(e).queue;io(e,l,t,$,null===n?uo:function(){return fo(e),n(r)})}function co(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:$,baseState:$,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Sa,lastRenderedState:$},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Sa,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function fo(e){bo(e,co(e).next.queue,{},Ns())}function po(){return xi(Ff)}function mo(){return ya().memoizedState}function ho(){return ya().memoizedState}function vo(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Ns(),r=Li(t,e=Ti(n),n);return null!==r&&(Ls(r,0,n),Oi(r,t,n)),t={cache:jl()},void(e.payload=t)}t=t.return}}function go(e,t,n){var r=Ns();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},wo(e)?So(t,n):null!==(n=Pr(e,t,n,r))&&(Ls(n,0,r),Eo(n,t,r))}function yo(e,t,n){bo(e,t,n,Ns())}function bo(e,t,n,r){var l={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(wo(e))So(t,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=a(o,n);if(l.hasEagerState=!0,l.eagerState=i,qn(i,o))return _r(e,t,l,0),null===es&&Cr(),!1}catch(e){}if(null!==(n=Pr(e,t,l,r)))return Ls(n,0,r),Eo(n,t,r),!0}return!1}function ko(e,t,n,r){if(r={lane:2,revertLane:kc(),action:r,hasEagerState:!1,eagerState:null,next:null},wo(e)){if(t)throw Error(o(479))}else null!==(t=Pr(e,n,r,2))&&Ls(t,0,2)}function wo(e){var t=e.alternate;return e===Zl||null!==t&&t===Zl}function So(e,t){na=ta=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Eo(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Re(e,n)}}var xo={readContext:xi,use:ka,useCallback:ua,useContext:ua,useEffect:ua,useImperativeHandle:ua,useLayoutEffect:ua,useInsertionEffect:ua,useMemo:ua,useReducer:ua,useRef:ua,useState:ua,useDebugValue:ua,useDeferredValue:ua,useTransition:ua,useSyncExternalStore:ua,useId:ua};xo.useCacheRefresh=ua,xo.useMemoCache=ua,xo.useHostTransitionStatus=ua,xo.useFormState=ua,xo.useActionState=ua,xo.useOptimistic=ua;var Co={readContext:xi,use:ka,useCallback:function(e,t){return ga().memoizedState=[e,void 0===t?null:t],e},useContext:xi,useEffect:Ga,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Ka(4194308,4,eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ka(4194308,4,e,t)},useInsertionEffect:function(e,t){Ka(4,2,e,t)},useMemo:function(e,t){var n=ga();t=void 0===t?null:t;var r=e();if(ra){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=ga();if(void 0!==n){var l=n(t);if(ra){ye(!0);try{n(t)}finally{ye(!1)}}}else l=t;return r.memoizedState=r.baseState=l,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:l},r.queue=e,e=e.dispatch=go.bind(null,Zl,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ga().memoizedState=e},useState:function(e){var t=(e=Oa(e)).queue,n=yo.bind(null,Zl,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:no,useDeferredValue:function(e,t){return ao(ga(),e,t)},useTransition:function(){var e=Oa(!1);return e=io.bind(null,Zl,e.queue,!0,!1),ga().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Zl,l=ga();if(Yr){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===es)throw Error(o(349));60&ns||Pa(r,t,n)}l.memoizedState=n;var a={value:n,getSnapshot:t};return l.queue=a,Ga(Na.bind(null,r,a,e),[e]),r.flags|=2048,Qa(9,za.bind(null,r,a,n,t),{destroy:void 0},null),n},useId:function(){var e=ga(),t=es.identifierPrefix;if(Yr){var n=$r;t=":"+t+"R"+(n=(Hr&~(1<<32-be(Hr)-1)).toString(32)+n),0<(n=la++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ia++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return ga().memoizedState=vo.bind(null,Zl)}};Co.useMemoCache=wa,Co.useHostTransitionStatus=po,Co.useFormState=Ha,Co.useActionState=Ha,Co.useOptimistic=function(e){var t=ga();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=ko.bind(null,Zl,!0,n),n.dispatch=t,[e,t]};var _o={readContext:xi,use:ka,useCallback:ro,useContext:xi,useEffect:Xa,useImperativeHandle:to,useInsertionEffect:Za,useLayoutEffect:Ja,useMemo:lo,useReducer:Ea,useRef:qa,useState:function(){return Ea(Sa)},useDebugValue:no,useDeferredValue:function(e,t){return oo(ya(),Jl.memoizedState,e,t)},useTransition:function(){var e=Ea(Sa)[0],t=ya().memoizedState;return["boolean"==typeof e?e:ba(e),t]},useSyncExternalStore:_a,useId:mo};_o.useCacheRefresh=ho,_o.useMemoCache=wa,_o.useHostTransitionStatus=po,_o.useFormState=$a,_o.useActionState=$a,_o.useOptimistic=function(e,t){return Ra(ya(),0,e,t)};var Po={readContext:xi,use:ka,useCallback:ro,useContext:xi,useEffect:Xa,useImperativeHandle:to,useInsertionEffect:Za,useLayoutEffect:Ja,useMemo:lo,useReducer:Ca,useRef:qa,useState:function(){return Ca(Sa)},useDebugValue:no,useDeferredValue:function(e,t){var n=ya();return null===Jl?ao(n,e,t):oo(n,Jl.memoizedState,e,t)},useTransition:function(){var e=Ca(Sa)[0],t=ya().memoizedState;return["boolean"==typeof e?e:ba(e),t]},useSyncExternalStore:_a,useId:mo};function zo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:T({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Po.useCacheRefresh=ho,Po.useMemoCache=wa,Po.useHostTransitionStatus=po,Po.useFormState=Wa,Po.useActionState=Wa,Po.useOptimistic=function(e,t){var n=ya();return null!==Jl?Ra(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var No={isMounted:function(e){return!!(e=e._reactInternals)&&F(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ns(),l=Ti(r);l.payload=t,null!=n&&(l.callback=n),null!==(t=Li(e,l,r))&&(Ls(t,0,r),Oi(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ns(),l=Ti(r);l.tag=1,l.payload=t,null!=n&&(l.callback=n),null!==(t=Li(e,l,r))&&(Ls(t,0,r),Oi(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ns(),r=Ti(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Li(e,r,n))&&(Ls(t,0,n),Oi(t,e,n))}};function To(e,t,n,r,l,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&Kn(n,r)&&Kn(l,a))}function Lo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&No.enqueueReplaceState(t,t.state,null)}function Oo(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var l in n===t&&(n=T({},n)),e)void 0===n[l]&&(n[l]=e[l]);return n}var Ro="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ao(e){Ro(e)}function Mo(e){console.error(e)}function Fo(e){Ro(e)}function Io(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Do(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function jo(e,t,n){return(n=Ti(n)).tag=3,n.payload={element:null},n.callback=function(){Io(e,t)},n}function Uo(e){return(e=Ti(e)).tag=3,e}function Ho(e,t,n,r){var l=n.type.getDerivedStateFromError;if("function"==typeof l){var a=r.value;e.payload=function(){return l(a)},e.callback=function(){Do(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){Do(t,n,r),"function"!=typeof l&&(null===ws?ws=new Set([this]):ws.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var $o=Error(o(461)),Vo=!1;function Bo(e,t,n,r){t.child=null===e?wl(t,null,n,r):kl(t,e.child,n,r)}function Wo(e,t,n,r,l){n=n.render;var a=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return Ei(t),r=ca(e,t,n,o,a,l),i=ma(),null===e||Vo?(Yr&&i&&Wr(t),t.flags|=1,Bo(e,t,r,l),t.child):(ha(e,t,l),fi(e,t,l))}function Qo(e,t,n,r,l){if(null===e){var a=n.type;return"function"!=typeof a||Mu(a)||void 0!==a.defaultProps||null!==n.compare?((e=Du(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,qo(e,t,a,r,l))}if(a=e.child,!di(e,l)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:Kn)(o,r)&&e.ref===t.ref)return fi(e,t,l)}return t.flags|=1,(e=Fu(a,r)).ref=t.ref,e.return=t,t.child=e}function qo(e,t,n,r,l){if(null!==e){var a=e.memoizedProps;if(Kn(a,r)&&e.ref===t.ref){if(Vo=!1,t.pendingProps=r=a,!di(e,l))return t.lanes=e.lanes,fi(e,t,l);131072&e.flags&&(Vo=!0)}}return Xo(e,t,n,r,l)}function Ko(e,t,n){var r=t.pendingProps,l=r.children,a=!!(2&t.stateNode._pendingVisibility),o=null!==e?e.memoizedState:null;if(Go(e,t),"hidden"===r.mode||a){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(l=t.child=e.child,a=0;null!==l;)a=a|l.lanes|l.childLanes,l=l.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Yo(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Yo(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Yl(0,null!==o?o.cachePool:null),null!==o?xl(t,o):Cl(),Tl(t)}else null!==o?(Yl(0,o.cachePool),xl(t,o),Ll(),t.memoizedState=null):(null!==e&&Yl(0,null),Cl(),Ll());return Bo(e,t,l,n),t.child}function Yo(e,t,n,r){var l=Kl();return l=null===l?null:{parent:Dl._currentValue,pool:l},t.memoizedState={baseLanes:n,cachePool:l},null!==e&&Yl(0,null),Cl(),Tl(t),null!==e&&wi(e,t,r,!0),null}function Go(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Xo(e,t,n,r,l){return Ei(t),n=ca(e,t,n,r,void 0,l),r=ma(),null===e||Vo?(Yr&&r&&Wr(t),t.flags|=1,Bo(e,t,n,l),t.child):(ha(e,t,l),fi(e,t,l))}function Zo(e,t,n,r,l,a){return Ei(t),t.updateQueue=null,n=da(t,r,n,l),fa(e),r=ma(),null===e||Vo?(Yr&&r&&Wr(t),t.flags|=1,Bo(e,t,n,a),t.child):(ha(e,t,a),fi(e,t,a))}function Jo(e,t,n,r,l){if(Ei(t),null===t.stateNode){var a=Lr,o=n.contextType;"object"==typeof o&&null!==o&&(a=xi(o)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=No,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},zi(t),o=n.contextType,a.context="object"==typeof o&&null!==o?xi(o):Lr,a.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(zo(t,n,o,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(o=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),o!==a.state&&No.enqueueReplaceState(a,a.state,null),Fi(t,r,a,l),Mi(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var i=t.memoizedProps,u=Oo(n,i);a.props=u;var s=a.context,c=n.contextType;o=Lr,"object"==typeof c&&null!==c&&(o=xi(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i||s!==o)&&Lo(t,a,r,o),Pi=!1;var d=t.memoizedState;a.state=d,Fi(t,r,a,l),Mi(),s=t.memoizedState,i||d!==s||Pi?("function"==typeof f&&(zo(t,n,f,r),s=t.memoizedState),(u=Pi||To(t,n,u,r,d,s,o))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=o,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ni(e,t),c=Oo(n,o=t.memoizedProps),a.props=c,f=t.pendingProps,d=a.context,s=n.contextType,u=Lr,"object"==typeof s&&null!==s&&(u=xi(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(o!==f||d!==u)&&Lo(t,a,r,u),Pi=!1,d=t.memoizedState,a.state=d,Fi(t,r,a,l),Mi();var p=t.memoizedState;o!==f||d!==p||Pi||null!==e&&null!==e.dependencies&&Si(e.dependencies)?("function"==typeof i&&(zo(t,n,i,r),p=t.memoizedState),(c=Pi||To(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&Si(e.dependencies))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Go(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=kl(t,e.child,null,l),t.child=kl(t,null,n,l)):Bo(e,t,n,l),t.memoizedState=a.state,e=t.child):e=fi(e,t,l),e}function ei(e,t,n,r){return rl(),t.flags|=256,Bo(e,t,n,r),t.child}var ti={dehydrated:null,treeContext:null,retryLane:0};function ni(e){return{baseLanes:e,cachePool:Gl()}}function ri(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=ps),e}function li(e,t,n){var r,l=t.pendingProps,a=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&Rl.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Yr){if(a?Nl(t):Ll(),Yr){var u,s=Kr;if(u=s){e:{for(u=s,s=Xr;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=of(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Ur?{id:Hr,overflow:$r}:null,retryLane:536870912},(u=Au(18,null,null,0)).stateNode=s,u.return=t,t.child=u,qr=t,Kr=null,u=!0):u=!1}u||Jr(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return"$!"===s.data?t.lanes=16:t.lanes=536870912,null;Ol(t)}return s=l.children,l=l.fallback,a?(Ll(),s=oi({mode:"hidden",children:s},a=t.mode),l=ju(l,a,n,null),s.return=t,l.return=t,s.sibling=l,t.child=s,(a=t.child).memoizedState=ni(n),a.childLanes=ri(e,r,n),t.memoizedState=ti,l):(Nl(t),ai(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(Nl(t),t.flags&=-257,t=ii(e,t,n)):null!==t.memoizedState?(Ll(),t.child=e.child,t.flags|=128,t=null):(Ll(),a=l.fallback,s=t.mode,l=oi({mode:"visible",children:l.children},s),(a=ju(a,s,n,null)).flags|=2,l.return=t,a.return=t,l.sibling=a,t.child=l,kl(t,e.child,null,n),(l=t.child).memoizedState=ni(n),l.childLanes=ri(e,r,n),t.memoizedState=ti,t=a);else if(Nl(t),"$!"===s.data){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(l=Error(o(419))).stack="",l.digest=r,ll({value:l,source:null,stack:null}),t=ii(e,t,n)}else if(Vo||wi(e,t,n,!1),r=!!(n&e.childLanes),Vo||r){if(null!==(r=es)){if(42&(l=n&-n))l=1;else switch(l){case 2:l=1;break;case 8:l=4;break;case 32:l=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:l=64;break;case 268435456:l=134217728;break;default:l=0}if(0!==(l=l&(r.suspendedLanes|n)?0:l)&&l!==u.retryLane)throw u.retryLane=l,zr(e,l),Ls(r,0,l),$o}"$?"===s.data||Vs(),t=ii(e,t,n)}else"$?"===s.data?(t.flags|=128,t.child=e.child,t=oc.bind(null,e),s._reactRetry=t,t=null):(e=u.treeContext,Kr=of(s.nextSibling),qr=t,Yr=!0,Gr=null,Xr=!1,null!==e&&(Dr[jr++]=Hr,Dr[jr++]=$r,Dr[jr++]=Ur,Hr=e.id,$r=e.overflow,Ur=t),(t=ai(t,l.children)).flags|=4096);return t}return a?(Ll(),a=l.fallback,s=t.mode,c=(u=e.child).sibling,(l=Fu(u,{mode:"hidden",children:l.children})).subtreeFlags=31457280&u.subtreeFlags,null!==c?a=Fu(c,a):(a=ju(a,s,n,null)).flags|=2,a.return=t,l.return=t,l.sibling=a,t.child=l,l=a,a=t.child,null===(s=e.child.memoizedState)?s=ni(n):(null!==(u=s.cachePool)?(c=Dl._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Gl(),s={baseLanes:s.baseLanes|n,cachePool:u}),a.memoizedState=s,a.childLanes=ri(e,r,n),t.memoizedState=ti,l):(Nl(t),e=(n=e.child).sibling,(n=Fu(n,{mode:"visible",children:l.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function ai(e,t){return(t=oi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function oi(e,t){return Uu(e,t,0,null)}function ii(e,t,n){return kl(t,e.child,null,n),(e=ai(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ui(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),bi(e.return,t,n)}function si(e,t,n,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=l)}function ci(e,t,n){var r=t.pendingProps,l=r.revealOrder,a=r.tail;if(Bo(e,t,r.children,n),2&(r=Rl.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ui(e,n,t);else if(19===e.tag)ui(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(q(Rl,r),l){case"forwards":for(n=t.child,l=null;null!==n;)null!==(e=n.alternate)&&null===Al(e)&&(l=n),n=n.sibling;null===(n=l)?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),si(t,!1,l,n,a);break;case"backwards":for(n=null,l=t.child,t.child=null;null!==l;){if(null!==(e=l.alternate)&&null===Al(e)){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}si(t,!0,n,null,a);break;case"together":si(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function fi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),cs|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(wi(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Fu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function di(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Si(e))}function pi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Vo=!0;else{if(!(di(e,n)||128&t.flags))return Vo=!1,function(e,t,n){switch(t.tag){case 3:Z(t,t.stateNode.containerInfo),gi(0,Dl,e.memoizedState.cache),rl();break;case 27:case 5:ee(t);break;case 4:Z(t,t.stateNode.containerInfo);break;case 10:gi(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(Nl(t),t.flags|=128,null):n&t.child.childLanes?li(e,t,n):(Nl(t),null!==(e=fi(e,t,n))?e.sibling:null);Nl(t);break;case 19:var l=!!(128&e.flags);if((r=!!(n&t.childLanes))||(wi(e,t,n,!1),r=!!(n&t.childLanes)),l){if(r)return ci(e,t,n);t.flags|=128}if(null!==(l=t.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),q(Rl,Rl.current),r)break;return null;case 22:case 23:return t.lanes=0,Ko(e,t,n);case 24:gi(0,Dl,e.memoizedState.cache)}return fi(e,t,n)}(e,t,n);Vo=!!(131072&e.flags)}else Vo=!1,Yr&&1048576&t.flags&&Br(t,Ir,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,l=r._init;if(r=l(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((l=r.$$typeof)===v){t.tag=11,t=Wo(null,t,r,e,n);break e}if(l===b){t.tag=14,t=Qo(null,t,r,e,n);break e}}throw t=_(r)||r,Error(o(306,t,""))}Mu(r)?(e=Oo(r,e),t.tag=1,t=Jo(null,t,r,e,n)):(t.tag=0,t=Xo(null,t,r,e,n))}return t;case 0:return Xo(e,t,t.type,t.pendingProps,n);case 1:return Jo(e,t,r=t.type,l=Oo(r,t.pendingProps),n);case 3:e:{if(Z(t,t.stateNode.containerInfo),null===e)throw Error(o(387));var a=t.pendingProps;r=(l=t.memoizedState).element,Ni(e,t),Fi(t,a,null,n);var i=t.memoizedState;if(a=i.cache,gi(0,Dl,a),a!==l.cache&&ki(t,[Dl],n,!0),Mi(),a=i.element,l.isDehydrated){if(l={element:a,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=ei(e,t,a,n);break e}if(a!==r){ll(r=Rr(Error(o(424)),t)),t=ei(e,t,a,n);break e}for(Kr=of(t.stateNode.containerInfo.firstChild),qr=t,Yr=!0,Gr=null,Xr=!0,n=wl(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(rl(),a===r){t=fi(e,t,n);break e}Bo(e,t,a,n)}t=t.child}return t;case 26:return Go(e,t),null===e?(n=vf(t.type,null,t.pendingProps,null))?t.memoizedState=n:Yr||(n=t.type,e=t.pendingProps,(r=Kc(G.current).createElement(n))[Ie]=t,r[De]=e,Wc(r,n,e),Ge(r),t.stateNode=r):t.memoizedState=vf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return ee(t),null===e&&Yr&&(r=t.stateNode=sf(t.type,t.pendingProps,G.current),qr=t,Xr=!0,Kr=of(r.firstChild)),r=t.pendingProps.children,null!==e||Yr?Bo(e,t,r,n):t.child=kl(t,null,r,n),Go(e,t),t.child;case 5:return null===e&&Yr&&((l=r=Kr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var l=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Be])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==l.rel||e.getAttribute("href")!==(null==l.href?null:l.href)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin)||e.getAttribute("title")!==(null==l.title?null:l.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==l.src?null:l.src)||e.getAttribute("type")!==(null==l.type?null:l.type)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==l.name?null:""+l.name;if("hidden"===l.type&&e.getAttribute("name")===a)return e}if(null===(e=of(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Xr))?(t.stateNode=r,qr=t,Kr=of(r.firstChild),Xr=!1,l=!0):l=!1),l||Jr(t)),ee(t),l=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,Xc(l,a)?r=null:null!==i&&Xc(l,i)&&(t.flags|=32),null!==t.memoizedState&&(l=ca(e,t,pa,null,null,n),Ff._currentValue=l),Go(e,t),Bo(e,t,r,n),t.child;case 6:return null===e&&Yr&&((e=n=Kr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=of(e.nextSibling)))return null}return e}(n,t.pendingProps,Xr))?(t.stateNode=n,qr=t,Kr=null,e=!0):e=!1),e||Jr(t)),null;case 13:return li(e,t,n);case 4:return Z(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=kl(t,null,r,n):Bo(e,t,r,n),t.child;case 11:return Wo(e,t,t.type,t.pendingProps,n);case 7:return Bo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Bo(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,gi(0,t.type,r.value),Bo(e,t,r.children,n),t.child;case 9:return l=t.type._context,r=t.pendingProps.children,Ei(t),r=r(l=xi(l)),t.flags|=1,Bo(e,t,r,n),t.child;case 14:return Qo(e,t,t.type,t.pendingProps,n);case 15:return qo(e,t,t.type,t.pendingProps,n);case 19:return ci(e,t,n);case 22:return Ko(e,t,n);case 24:return Ei(t),r=xi(Dl),null===e?(null===(l=Kl())&&(l=es,a=jl(),l.pooledCache=a,a.refCount++,null!==a&&(l.pooledCacheLanes|=n),l=a),t.memoizedState={parent:r,cache:l},zi(t),gi(0,Dl,l)):(!!(e.lanes&n)&&(Ni(e,t),Fi(t,null,null,n),Mi()),l=e.memoizedState,a=t.memoizedState,l.parent!==r?(l={parent:r,cache:r},t.memoizedState=l,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=l),gi(0,Dl,r)):(r=a.cache,gi(0,Dl,r),r!==l.cache&&ki(t,[Dl],n,!0))),Bo(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}var mi=W(null),hi=null,vi=null;function gi(e,t,n){q(mi,t._currentValue),t._currentValue=n}function yi(e){e._currentValue=mi.current,Q(mi)}function bi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ki(e,t,n,r){var l=e.child;for(null!==l&&(l.return=e);null!==l;){var a=l.dependencies;if(null!==a){var i=l.child;a=a.firstContext;e:for(;null!==a;){var u=a;a=l;for(var s=0;s<t.length;s++)if(u.context===t[s]){a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),bi(a.return,n,e),r||(i=null);break e}a=u.next}}else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(a=i.alternate)&&(a.lanes|=n),bi(i,n,e),i=null}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===e){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}}function wi(e,t,n,r){e=null;for(var l=t,a=!1;null!==l;){if(!a)if(524288&l.flags)a=!0;else if(262144&l.flags)break;if(10===l.tag){var i=l.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=l.type;qn(l.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(l===X.current){if(null===(i=l.alternate))throw Error(o(387));i.memoizedState.memoizedState!==l.memoizedState.memoizedState&&(null!==e?e.push(Ff):e=[Ff])}l=l.return}null!==e&&ki(t,e,n,r),t.flags|=262144}function Si(e){for(e=e.firstContext;null!==e;){if(!qn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ei(e){hi=e,vi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function xi(e){return _i(hi,e)}function Ci(e,t){return null===hi&&Ei(e),_i(e,t)}function _i(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===vi){if(null===e)throw Error(o(308));vi=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else vi=vi.next=t;return n}var Pi=!1;function zi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Ni(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Ti(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Li(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Ju){var l=r.pending;return null===l?t.next=t:(t.next=l.next,l.next=t),r.pending=t,t=Tr(e),Nr(e,null,n),t}return _r(e,r,t,n),Tr(e)}function Oi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Re(e,n)}}function Ri(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var l=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?l=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?l=a=t:a=a.next=t}else l=a=t;return n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Ai=!1;function Mi(){if(Ai&&null!==Bl)throw Bl}function Fi(e,t,n,r){Ai=!1;var l=e.updateQueue;Pi=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,i=l.shared.pending;if(null!==i){l.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?a=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=l.baseState;for(o=0,c=s=u=null,i=a;;){var d=-536870913&i.lane,p=d!==i.lane;if(p?(ns&d)===d:(r&d)===d){0!==d&&d===Vl&&(Ai=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var m=e,h=i;d=t;var v=n;switch(h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(v,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d="function"==typeof(m=h.payload)?m.call(v,f,d):m))break e;f=T({},f,d);break e;case 2:Pi=!0}}null!==(d=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=l.callbacks)?l.callbacks=[d]:p.push(d))}else p={lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,o|=d;if(null===(i=i.next)){if(null===(i=l.shared.pending))break;i=(p=i).next,p.next=null,l.lastBaseUpdate=p,l.shared.pending=null}}null===c&&(u=f),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null===a&&(l.shared.lanes=0),cs|=o,e.lanes=o,e.memoizedState=f}}function Ii(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function Di(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Ii(n[e],t)}function ji(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var l=r.next;n=l;do{if((n.tag&e)===e){r=void 0;var a=n.create,o=n.inst;r=a(),o.destroy=r}n=n.next}while(n!==l)}}catch(e){nc(t,t.return,e)}}function Ui(e,t,n){try{var r=t.updateQueue,l=null!==r?r.lastEffect:null;if(null!==l){var a=l.next;r=a;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,l=t;var u=n;try{i()}catch(e){nc(l,u,e)}}}r=r.next}while(r!==a)}}catch(e){nc(t,t.return,e)}}function Hi(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Di(t,n)}catch(t){nc(e,e.return,t)}}}function $i(e,t,n){n.props=Oo(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){nc(e,t,n)}}function Vi(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var l=r;break;default:l=r}"function"==typeof n?e.refCleanup=n(l):n.current=l}}catch(n){nc(e,t,n)}}function Bi(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){nc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){nc(e,t,n)}else n.current=null}function Wi(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){nc(e,e.return,t)}}function Qi(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var l=null,a=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||Vc(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":a=m;break;case"name":l=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(o(137,t));break;default:m!==d&&Vc(e,t,p,m,r,d)}}return void ht(e,i,u,s,c,f,a,l);case"select":for(a in m=i=u=p=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(a)||Vc(e,t,a,null,r,s)}for(l in r)if(a=r[l],s=n[l],r.hasOwnProperty(l)&&(null!=a||null!=s))switch(l){case"value":p=a;break;case"defaultValue":u=a;break;case"multiple":i=a;default:a!==s&&Vc(e,t,l,a,r,s)}return t=u,n=i,r=m,void(null!=p?yt(e,!!n,p,!1):!!r!=!!n&&(null!=t?yt(e,!!n,t,!0):yt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(l=n[u],n.hasOwnProperty(u)&&null!=l&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Vc(e,t,u,null,r,l)}for(i in r)if(l=r[i],a=n[i],r.hasOwnProperty(i)&&(null!=l||null!=a))switch(i){case"value":p=l;break;case"defaultValue":m=l;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=l)throw Error(o(91));break;default:l!==a&&Vc(e,t,i,l,r,a)}return void bt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Vc(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Vc(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Vc(e,t,v,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:Vc(e,t,c,p,r,m)}return;default:if(Ct(t)){for(var g in n)p=n[g],n.hasOwnProperty(g)&&void 0!==p&&!r.hasOwnProperty(g)&&Bc(e,t,g,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Bc(e,t,f,p,r,m);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Vc(e,t,y,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||Vc(e,t,d,p,r,m)}(r,e.type,n,t),r[De]=t}catch(t){nc(e,e.return,t)}}function qi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Ki(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||qi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Yi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=$c));else if(4!==r&&27!==r&&null!==(e=e.child))for(Yi(e,t,n),e=e.sibling;null!==e;)Yi(e,t,n),e=e.sibling}function Gi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Gi(e,t,n),e=e.sibling;null!==e;)Gi(e,t,n),e=e.sibling}var Xi=!1,Zi=!1,Ji=!1,eu="function"==typeof WeakSet?WeakSet:Set,tu=null,nu=!1;function ru(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:vu(e,n),4&r&&ji(5,n);break;case 1:if(vu(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){nc(n,n.return,e)}else{var l=Oo(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(l,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){nc(n,n.return,e)}}64&r&&Hi(n),512&r&&Vi(n,n.return);break;case 3:if(vu(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Di(r,e)}catch(e){nc(n,n.return,e)}}break;case 26:vu(e,n),512&r&&Vi(n,n.return);break;case 27:case 5:vu(e,n),null===t&&4&r&&Wi(n),512&r&&Vi(n,n.return);break;case 12:default:vu(e,n);break;case 13:vu(e,n),4&r&&su(e,n);break;case 22:if(!(l=null!==n.memoizedState||Xi)){t=null!==t&&null!==t.memoizedState||Zi;var a=Xi,o=Zi;Xi=l,(Zi=t)&&!o?yu(e,n,!!(8772&n.subtreeFlags)):vu(e,n),Xi=a,Zi=o}512&r&&("manual"===n.memoizedProps.mode?Vi(n,n.return):Bi(n,n.return))}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&We(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var au=null,ou=!1;function iu(e,t,n){for(n=n.child;null!==n;)uu(e,t,n),n=n.sibling}function uu(e,t,n){if(ge&&"function"==typeof ge.onCommitFiberUnmount)try{ge.onCommitFiberUnmount(ve,n)}catch(e){}switch(n.tag){case 26:Zi||Bi(n,t),iu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Zi||Bi(n,t);var r=au,l=ou;for(au=n.stateNode,iu(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);We(n),au=r,ou=l;break;case 5:Zi||Bi(n,t);case 6:l=au;var a=ou;if(au=null,iu(e,t,n),ou=a,null!==(au=l))if(ou)try{e=au,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){nc(n,t,e)}else try{au.removeChild(n.stateNode)}catch(e){nc(n,t,e)}break;case 18:null!==au&&(ou?(t=au,n=n.stateNode,8===t.nodeType?lf(t.parentNode,n):1===t.nodeType&&lf(t,n),pd(t)):lf(au,n.stateNode));break;case 4:r=au,l=ou,au=n.stateNode.containerInfo,ou=!0,iu(e,t,n),au=r,ou=l;break;case 0:case 11:case 14:case 15:Zi||Ui(2,n,t),Zi||Ui(4,n,t),iu(e,t,n);break;case 1:Zi||(Bi(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&$i(n,t,r)),iu(e,t,n);break;case 21:iu(e,t,n);break;case 22:Zi||Bi(n,t),Zi=(r=Zi)||null!==n.memoizedState,iu(e,t,n),Zi=r;break;default:iu(e,t,n)}}function su(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{pd(e)}catch(e){nc(t,t.return,e)}}function cu(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new eu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new eu),t;default:throw Error(o(435,e.tag))}}(e);t.forEach((function(t){var r=ic.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function fu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var l=n[r],a=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:case 5:au=u.stateNode,ou=!1;break e;case 3:case 4:au=u.stateNode.containerInfo,ou=!0;break e}u=u.return}if(null===au)throw Error(o(160));uu(a,i,l),au=null,ou=!1,null!==(a=l.alternate)&&(a.return=null),l.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)pu(t,e),t=t.sibling}var du=null;function pu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:fu(t,e),mu(e),4&r&&(Ui(3,e,e.return),ji(3,e),Ui(5,e,e.return));break;case 1:fu(t,e),mu(e),512&r&&(Zi||null===n||Bi(n,n.return)),64&r&&Xi&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var l=du;if(fu(t,e),mu(e),512&r&&(Zi||null===n||Bi(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,l=l.ownerDocument||l;t:switch(r){case"title":(!(a=l.getElementsByTagName("title")[0])||a[Be]||a[Ie]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=l.createElement(r),l.head.insertBefore(a,l.querySelector("head > title"))),Wc(a,r,n),a[Ie]=e,Ge(a),r=a;break e;case"link":var i=Pf("link","href",l).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((a=i[u]).getAttribute("href")===(null==n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}Wc(a=l.createElement(r),r,n),l.head.appendChild(a);break;case"meta":if(i=Pf("meta","content",l).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((a=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}Wc(a=l.createElement(r),r,n),l.head.appendChild(a);break;default:throw Error(o(468,r))}a[Ie]=e,Ge(a),r=a}e.stateNode=r}else zf(l,e.type,e.stateNode);else e.stateNode=Sf(l,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?zf(l,e.type,e.stateNode):Sf(l,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Qi(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){l=e.stateNode,a=e.memoizedProps;try{for(var s=l.firstChild;s;){var c=s.nextSibling,f=s.nodeName;s[Be]||"HEAD"===f||"BODY"===f||"SCRIPT"===f||"STYLE"===f||"LINK"===f&&"stylesheet"===s.rel.toLowerCase()||l.removeChild(s),s=c}for(var d=e.type,p=l.attributes;p.length;)l.removeAttributeNode(p[0]);Wc(l,d,a),l[Ie]=e,l[De]=a}catch(t){nc(e,e.return,t)}}case 5:if(fu(t,e),mu(e),512&r&&(Zi||null===n||Bi(n,n.return)),32&e.flags){l=e.stateNode;try{wt(l,"")}catch(t){nc(e,e.return,t)}}4&r&&null!=e.stateNode&&Qi(e,l=e.memoizedProps,null!==n?n.memoizedProps:l),1024&r&&(Ji=!0);break;case 6:if(fu(t,e),mu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){nc(e,e.return,t)}}break;case 3:if(_f=null,l=du,du=df(t.containerInfo),fu(t,e),du=l,mu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{pd(t.containerInfo)}catch(t){nc(e,e.return,t)}Ji&&(Ji=!1,hu(e));break;case 4:r=du,du=df(e.stateNode.containerInfo),fu(t,e),mu(e),du=r;break;case 12:fu(t,e),mu(e);break;case 13:fu(t,e),mu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(ys=ie()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,cu(e,r));break;case 22:if(512&r&&(Zi||null===n||Bi(n,n.return)),s=null!==e.memoizedState,c=null!==n&&null!==n.memoizedState,Xi=(f=Xi)||s,Zi=(d=Zi)||c,fu(t,e),Zi=d,Xi=f,mu(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=s?-2&t._visibility:1|t._visibility,s&&(t=Xi||Zi,null===n||c||t||gu(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){c=n=t;try{if(l=c.stateNode,s)"function"==typeof(a=l.style).setProperty?a.setProperty("display","none","important"):a.display="none";else{i=c.stateNode;var m=null!=(u=c.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null;i.style.display=null==m||"boolean"==typeof m?"":(""+m).trim()}}catch(e){nc(c,c.return,e)}}}else if(6===t.tag){if(null===n){c=t;try{c.stateNode.nodeValue=s?"":c.memoizedProps}catch(e){nc(c,c.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,cu(e,n));break;case 19:fu(t,e),mu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,cu(e,r));break;case 21:break;default:fu(t,e),mu(e)}}function mu(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(qi(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 27:var l=r.stateNode;Gi(e,Ki(e),l);break;case 5:var a=r.stateNode;32&r.flags&&(wt(a,""),r.flags&=-33),Gi(e,Ki(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;Yi(e,Ki(e),i);break;default:throw Error(o(161))}}}catch(t){nc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function hu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;hu(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function vu(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)ru(e,t.alternate,t),t=t.sibling}function gu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Ui(4,t,t.return),gu(t);break;case 1:Bi(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&$i(t,t.return,n),gu(t);break;case 26:case 27:case 5:Bi(t,t.return),gu(t);break;case 22:Bi(t,t.return),null===t.memoizedState&&gu(t);break;default:gu(t)}e=e.sibling}}function yu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,l=e,a=t,o=a.flags;switch(a.tag){case 0:case 11:case 15:yu(l,a,n),ji(4,a);break;case 1:if(yu(l,a,n),"function"==typeof(l=(r=a).stateNode).componentDidMount)try{l.componentDidMount()}catch(e){nc(r,r.return,e)}if(null!==(l=(r=a).updateQueue)){var i=r.stateNode;try{var u=l.shared.hiddenCallbacks;if(null!==u)for(l.shared.hiddenCallbacks=null,l=0;l<u.length;l++)Ii(u[l],i)}catch(e){nc(r,r.return,e)}}n&&64&o&&Hi(a),Vi(a,a.return);break;case 26:case 27:case 5:yu(l,a,n),n&&null===r&&4&o&&Wi(a),Vi(a,a.return);break;case 12:default:yu(l,a,n);break;case 13:yu(l,a,n),n&&4&o&&su(l,a);break;case 22:null===a.memoizedState&&yu(l,a,n),Vi(a,a.return)}t=t.sibling}}function bu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Ul(n))}function ku(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ul(e))}function wu(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Su(e,t,n,r),t=t.sibling}function Su(e,t,n,r){var l=t.flags;switch(t.tag){case 0:case 11:case 15:wu(e,t,n,r),2048&l&&ji(9,t);break;case 3:wu(e,t,n,r),2048&l&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ul(e)));break;case 12:if(2048&l){wu(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,o=a.id,i=a.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){nc(t,t.return,e)}}else wu(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,null!==t.memoizedState?4&a._visibility?wu(e,t,n,r):xu(e,t):4&a._visibility?wu(e,t,n,r):(a._visibility|=4,Eu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&l&&bu(t.alternate,t);break;case 24:wu(e,t,n,r),2048&l&&ku(t.alternate,t);break;default:wu(e,t,n,r)}}function Eu(e,t,n,r,l){for(l=l&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,o=t,i=n,u=r,s=o.flags;switch(o.tag){case 0:case 11:case 15:Eu(a,o,i,u,l),ji(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?4&c._visibility?Eu(a,o,i,u,l):xu(a,o):(c._visibility|=4,Eu(a,o,i,u,l)),l&&2048&s&&bu(o.alternate,o);break;case 24:Eu(a,o,i,u,l),l&&2048&s&&ku(o.alternate,o);break;default:Eu(a,o,i,u,l)}t=t.sibling}}function xu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,l=r.flags;switch(r.tag){case 22:xu(n,r),2048&l&&bu(r.alternate,r);break;case 24:xu(n,r),2048&l&&ku(r.alternate,r);break;default:xu(n,r)}t=t.sibling}}var Cu=8192;function _u(e){if(e.subtreeFlags&Cu)for(e=e.child;null!==e;)Pu(e),e=e.sibling}function Pu(e){switch(e.tag){case 26:_u(e),e.flags&Cu&&null!==e.memoizedState&&function(e,t,n){if(null===Tf)throw Error(o(475));var r=Tf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var l=gf(n.href),a=e.querySelector(yf(l));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Of.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Ge(a);a=e.ownerDocument||e,n=bf(n),(l=cf.get(l))&&xf(n,l),Ge(a=a.createElement("link"));var i=a;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Wc(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Of.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(du,e.memoizedState,e.memoizedProps);break;case 5:default:_u(e);break;case 3:case 4:var t=du;du=df(e.stateNode.containerInfo),_u(e),du=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Cu,Cu=16777216,_u(e),Cu=t):_u(e))}}function zu(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Nu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];tu=r,Ou(r,e)}zu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Tu(e),e=e.sibling}function Tu(e){switch(e.tag){case 0:case 11:case 15:Nu(e),2048&e.flags&&Ui(9,e,e.return);break;case 3:case 12:default:Nu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Lu(e)):Nu(e)}}function Lu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];tu=r,Ou(r,e)}zu(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Ui(8,t,t.return),Lu(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Lu(t));break;default:Lu(t)}e=e.sibling}}function Ou(e,t){for(;null!==tu;){var n=tu;switch(n.tag){case 0:case 11:case 15:Ui(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Ul(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,tu=r;else e:for(n=e;null!==tu;){var l=(r=tu).sibling,a=r.return;if(lu(r),r===n){tu=null;break e}if(null!==l){l.return=a,tu=l;break e}tu=a}}}function Ru(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Au(e,t,n,r){return new Ru(e,t,n,r)}function Mu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fu(e,t){var n=e.alternate;return null===n?((n=Au(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Iu(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Du(e,t,n,r,l,a){var i=0;if(r=e,"function"==typeof e)Mu(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,K.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case c:return ju(n.children,l,a,t);case f:i=8,l|=24;break;case d:return(e=Au(12,n,t,2|l)).elementType=d,e.lanes=a,e;case g:return(e=Au(13,n,t,l)).elementType=g,e.lanes=a,e;case y:return(e=Au(19,n,t,l)).elementType=y,e.lanes=a,e;case w:return Uu(n,l,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case p:case h:i=10;break e;case m:i=9;break e;case v:i=11;break e;case b:i=14;break e;case k:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Au(i,n,t,l)).elementType=e,t.type=r,t.lanes=a,t}function ju(e,t,n,r){return(e=Au(7,e,r,t)).lanes=n,e}function Uu(e,t,n,r){(e=Au(22,e,r,t)).elementType=w,e.lanes=n;var l={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=l._current;if(null===e)throw Error(o(456));if(!(2&l._pendingVisibility)){var t=zr(e,2);null!==t&&(l._pendingVisibility|=2,Ls(t,0,2))}},attach:function(){var e=l._current;if(null===e)throw Error(o(456));if(2&l._pendingVisibility){var t=zr(e,2);null!==t&&(l._pendingVisibility&=-3,Ls(t,0,2))}}};return e.stateNode=l,e}function Hu(e,t,n){return(e=Au(6,e,null,t)).lanes=n,e}function $u(e,t,n){return(t=Au(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e){e.flags|=4}function Bu(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Nf(t)){if(null!==(t=Pl.current)&&((4194176&ns)===ns?null!==zl:(62914560&ns)!==ns&&!(536870912&ns)||t!==zl))throw fl=il,ol;e.flags|=8192}}function Wu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Ne():536870912,e.lanes|=t,ms|=t)}function Qu(e,t){if(!Yr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=31457280&l.subtreeFlags,r|=31457280&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ku(e,t,n){var r=t.pendingProps;switch(Qr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return qu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),yi(Dl),J(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(nl(t)?Vu(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Gr&&(Rs(Gr),Gr=null))),qu(t),null;case 26:return n=t.memoizedState,null===e?(Vu(t),null!==n?(qu(t),Bu(t,n)):(qu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Vu(t),qu(t),Bu(t,n)):(qu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Vu(t),qu(t),t.flags&=-16777217),null;case 27:te(t),n=G.current;var l=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return qu(t),null}e=K.current,nl(t)?el(t):(e=sf(l,r,n),t.stateNode=e,Vu(t))}return qu(t),null;case 5:if(te(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return qu(t),null}if(e=K.current,nl(t))el(t);else{switch(l=Kc(G.current),e){case 1:e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?l.createElement("select",{is:r.is}):l.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?l.createElement(n,{is:r.is}):l.createElement(n)}}e[Ie]=t,e[De]=r;e:for(l=t.child;null!==l;){if(5===l.tag||6===l.tag)e.appendChild(l.stateNode);else if(4!==l.tag&&27!==l.tag&&null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)break e;for(;null===l.sibling;){if(null===l.return||l.return===t)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}t.stateNode=e;e:switch(Wc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Vu(t)}}return qu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=G.current,nl(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(l=qr))switch(l.tag){case 27:case 5:r=l.memoizedProps}e[Ie]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Hc(e.nodeValue,n)))||Jr(t)}else(e=Kc(e).createTextNode(r))[Ie]=t,t.stateNode=e}return qu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(l=nl(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[Ie]=t}else rl(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qu(t),l=!1}else null!==Gr&&(Rs(Gr),Gr=null),l=!0;if(!l)return 256&t.flags?(Ol(t),t):(Ol(t),null)}if(Ol(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){l=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(l=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==l&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Wu(t,t.updateQueue),qu(t),null;case 4:return J(),null===e&&Lc(t.stateNode.containerInfo),qu(t),null;case 10:return yi(t.type),qu(t),null;case 19:if(Q(Rl),null===(l=t.memoizedState))return qu(t),null;if(r=!!(128&t.flags),null===(a=l.rendering))if(r)Qu(l,!1);else{if(0!==ss||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=Al(e))){for(t.flags|=128,Qu(l,!1),e=a.updateQueue,t.updateQueue=e,Wu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Iu(n,e),n=n.sibling;return q(Rl,1&Rl.current|2),t.child}e=e.sibling}null!==l.tail&&ie()>bs&&(t.flags|=128,r=!0,Qu(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Al(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Wu(t,e),Qu(l,!0),null===l.tail&&"hidden"===l.tailMode&&!a.alternate&&!Yr)return qu(t),null}else 2*ie()-l.renderingStartTime>bs&&536870912!==n&&(t.flags|=128,r=!0,Qu(l,!1),t.lanes=4194304);l.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=l.last)?e.sibling=a:t.child=a,l.last=a)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=ie(),t.sibling=null,e=Rl.current,q(Rl,r?1&e|2:1&e),t):(qu(t),null);case 22:case 23:return Ol(t),_l(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(qu(t),6&t.subtreeFlags&&(t.flags|=8192)):qu(t),null!==(n=t.updateQueue)&&Wu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&Q(ql),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),yi(Dl),qu(t),null;case 25:return null}throw Error(o(156,t.tag))}function Yu(e,t){switch(Qr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return yi(Dl),J(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return te(t),null;case 13:if(Ol(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));rl()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Q(Rl),null;case 4:return J(),null;case 10:return yi(t.type),null;case 22:case 23:return Ol(t),_l(),null!==e&&Q(ql),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return yi(Dl),null;default:return null}}function Gu(e,t){switch(Qr(t),t.tag){case 3:yi(Dl),J();break;case 26:case 27:case 5:te(t);break;case 4:J();break;case 13:Ol(t);break;case 19:Q(Rl);break;case 10:yi(t.type);break;case 22:case 23:Ol(t),_l(),null!==e&&Q(ql);break;case 24:yi(Dl)}}var Xu={getCacheForType:function(e){var t=xi(Dl),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Zu="function"==typeof WeakMap?WeakMap:Map,Ju=0,es=null,ts=null,ns=0,rs=0,ls=null,as=!1,os=!1,is=!1,us=0,ss=0,cs=0,fs=0,ds=0,ps=0,ms=0,hs=null,vs=null,gs=!1,ys=0,bs=1/0,ks=null,ws=null,Ss=!1,Es=null,xs=0,Cs=0,_s=null,Ps=0,zs=null;function Ns(){return 2&Ju&&0!==ns?ns&-ns:null!==N.T?0!==Vl?Vl:kc():Me()}function Ts(){0===ps&&(ps=536870912&ns&&!Yr?536870912:ze());var e=Pl.current;return null!==e&&(e.flags|=32),ps}function Ls(e,t,n){(e===es&&2===rs||null!==e.cancelPendingCommit)&&(js(e,0),Fs(e,ns,ps,!1)),Le(e,n),2&Ju&&e===es||(e===es&&(!(2&Ju)&&(fs|=n),4===ss&&Fs(e,ns,ps,!1)),mc(e))}function Os(e,t,n){if(6&Ju)throw Error(o(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||_e(e,t),l=r?function(e,t){var n=Ju;Ju|=2;var r=Hs(),l=$s();es!==e||ns!==t?(ks=null,bs=ie()+500,js(e,t)):os=_e(e,t);e:for(;;)try{if(0!==rs&&null!==ts){t=ts;var a=ls;t:switch(rs){case 1:rs=0,ls=null,Ys(e,t,a,1);break;case 2:if(ul(a)){rs=0,ls=null,Ks(t);break}t=function(){2===rs&&es===e&&(rs=7),mc(e)},a.then(t,t);break e;case 3:rs=7;break e;case 4:rs=5;break e;case 7:ul(a)?(rs=0,ls=null,Ks(t)):(rs=0,ls=null,Ys(e,t,a,7));break;case 5:var i=null;switch(ts.tag){case 26:i=ts.memoizedState;case 5:case 27:var u=ts;if(!i||Nf(i)){rs=0,ls=null;var s=u.sibling;if(null!==s)ts=s;else{var c=u.return;null!==c?(ts=c,Gs(c)):ts=null}break t}}rs=0,ls=null,Ys(e,t,a,5);break;case 6:rs=0,ls=null,Ys(e,t,a,6);break;case 8:Ds(),ss=6;break e;default:throw Error(o(462))}}Qs();break}catch(t){Us(e,t)}return vi=hi=null,N.H=r,N.A=l,Ju=n,null!==ts?0:(es=null,ns=0,Cr(),ss)}(e,t):Bs(e,t,!0),a=r;;){if(0===l){os&&!r&&Fs(e,t,0,!1);break}if(6===l)Fs(e,t,0,!as);else{if(n=e.current.alternate,a&&!Ms(n)){l=Bs(e,t,!1),a=!1;continue}if(2===l){if(a=t,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;l=hs;var s=u.current.memoizedState.isDehydrated;if(s&&(js(u,i).flags|=256),2!==(i=Bs(u,i,!1))){if(is&&!s){u.errorRecoveryDisabledLanes|=a,fs|=a,l=4;break e}a=vs,vs=l,null!==a&&Rs(a)}l=i}if(a=!1,2!==l)continue}}if(1===l){js(e,0),Fs(e,t,0,!0);break}e:{switch(r=e,l){case 0:case 1:throw Error(o(345));case 4:if((4194176&t)===t){Fs(r,t,ps,!as);break e}break;case 2:vs=null;break;case 3:case 5:break;default:throw Error(o(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(a=ys+300-ie())){if(Fs(r,t,ps,!as),0!==Ce(r,0))break e;r.timeoutHandle=Jc(As.bind(null,r,n,vs,ks,gs,t,ps,fs,ms,as,2,-0,0),a)}else As(r,n,vs,ks,gs,t,ps,fs,ms,as,0,-0,0)}}break}mc(e)}function Rs(e){null===vs?vs=e:vs.push.apply(vs,e)}function As(e,t,n,r,l,a,i,u,s,c,f,d,p){var m=t.subtreeFlags;if((8192&m||!(16785408&~m))&&(Tf={stylesheets:null,count:0,unsuspend:Lf},Pu(t),null!==(t=function(){if(null===Tf)throw Error(o(475));var e=Tf;return e.stylesheets&&0===e.count&&Af(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Af(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Zs.bind(null,e,n,r,l,i,u,s,1,d,p)),void Fs(e,a,i,!c);Zs(e,n,r,l,i,u,s)}function Ms(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var l=n[r],a=l.getSnapshot;l=l.value;try{if(!qn(a(),l))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Fs(e,t,n,r){t&=~ds,t&=~fs,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var l=t;0<l;){var a=31-be(l),o=1<<a;r[a]=-1,l&=~o}0!==n&&Oe(e,n,t)}function Is(){return!!(6&Ju)||(hc(0,!1),!1)}function Ds(){if(null!==ts){if(0===rs)var e=ts.return;else vi=hi=null,va(e=ts),pl=null,ml=0,e=ts;for(;null!==e;)Gu(e.alternate,e),e=e.return;ts=null}}function js(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ef(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Ds(),es=e,ts=n=Fu(e.current,null),ns=t,rs=0,ls=null,as=!1,os=_e(e,t),is=!1,ms=ps=ds=fs=cs=ss=0,vs=hs=null,gs=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var l=31-be(r),a=1<<l;t|=e[l],r&=~a}return us=t,Cr(),n}function Us(e,t){Zl=null,N.H=xo,t===al?(t=dl(),rs=3):t===ol?(t=dl(),rs=4):rs=t===$o?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,ls=t,null===ts&&(ss=1,Io(e,Rr(t,e.current)))}function Hs(){var e=N.H;return N.H=xo,null===e?xo:e}function $s(){var e=N.A;return N.A=Xu,e}function Vs(){ss=4,as||(4194176&ns)!==ns&&null!==Pl.current||(os=!0),!(134217727&cs)&&!(134217727&fs)||null===es||Fs(es,ns,ps,!1)}function Bs(e,t,n){var r=Ju;Ju|=2;var l=Hs(),a=$s();es===e&&ns===t||(ks=null,js(e,t)),t=!1;var o=ss;e:for(;;)try{if(0!==rs&&null!==ts){var i=ts,u=ls;switch(rs){case 8:Ds(),o=6;break e;case 3:case 2:case 6:null===Pl.current&&(t=!0);var s=rs;if(rs=0,ls=null,Ys(e,i,u,s),n&&os){o=0;break e}break;default:s=rs,rs=0,ls=null,Ys(e,i,u,s)}}Ws(),o=ss;break}catch(t){Us(e,t)}return t&&e.shellSuspendCounter++,vi=hi=null,Ju=r,N.H=l,N.A=a,null===ts&&(es=null,ns=0,Cr()),o}function Ws(){for(;null!==ts;)qs(ts)}function Qs(){for(;null!==ts&&!ae();)qs(ts)}function qs(e){var t=pi(e.alternate,e,us);e.memoizedProps=e.pendingProps,null===t?Gs(e):ts=t}function Ks(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Zo(n,t,t.pendingProps,t.type,void 0,ns);break;case 11:t=Zo(n,t,t.pendingProps,t.type.render,t.ref,ns);break;case 5:va(t);default:Gu(n,t),t=pi(n,t=ts=Iu(t,us),us)}e.memoizedProps=e.pendingProps,null===t?Gs(e):ts=t}function Ys(e,t,n,r){vi=hi=null,va(t),pl=null,ml=0;var l=t.return;try{if(function(e,t,n,r,l){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&wi(t,n,l,!0),null!==(n=Pl.current)){switch(n.tag){case 13:return null===zl?Vs():null===n.alternate&&0===ss&&(ss=3),n.flags&=-257,n.flags|=65536,n.lanes=l,r===il?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),rc(e,r,l)),!1;case 22:return n.flags|=65536,r===il?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),rc(e,r,l)),!1}throw Error(o(435,n.tag))}return rc(e,r,l),Vs(),!1}if(Yr)return null!==(t=Pl.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=l,r!==Zr&&ll(Rr(e=Error(o(422),{cause:r}),n))):(r!==Zr&&ll(Rr(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,l&=-l,e.lanes|=l,r=Rr(r,n),Ri(e,l=jo(e.stateNode,r,l)),4!==ss&&(ss=2)),!1;var a=Error(o(520),{cause:r});if(a=Rr(a,n),null===hs?hs=[a]:hs.push(a),4!==ss&&(ss=2),null===t)return!0;r=Rr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=l&-l,n.lanes|=e,Ri(n,e=jo(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==ws&&ws.has(a))))return n.flags|=65536,l&=-l,n.lanes|=l,Ho(l=Uo(l),e,n,r),Ri(n,l),!1}n=n.return}while(null!==n);return!1}(e,l,t,n,ns))return ss=1,Io(e,Rr(n,e.current)),void(ts=null)}catch(t){if(null!==l)throw ts=l,t;return ss=1,Io(e,Rr(n,e.current)),void(ts=null)}32768&t.flags?(Yr||1===r?e=!0:os||536870912&ns?e=!1:(as=e=!0,(2===r||3===r||6===r)&&null!==(r=Pl.current)&&13===r.tag&&(r.flags|=16384)),Xs(t,e)):Gs(t)}function Gs(e){var t=e;do{if(32768&t.flags)return void Xs(t,as);e=t.return;var n=Ku(t.alternate,t,us);if(null!==n)return void(ts=n);if(null!==(t=t.sibling))return void(ts=t);ts=t=e}while(null!==t);0===ss&&(ss=5)}function Xs(e,t){do{var n=Yu(e.alternate,e);if(null!==n)return n.flags&=32767,void(ts=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ts=e);ts=e=n}while(null!==e);ss=6,ts=null}function Zs(e,t,n,r,l,a,i,u,s,c){var f=N.T,d=H.p;try{H.p=2,N.T=null,function(e,t,n,r,l,a,i,u){do{ec()}while(null!==Es);if(6&Ju)throw Error(o(327));var s=e.finishedWork;if(r=e.finishedLanes,null===s)return null;if(e.finishedWork=null,e.finishedLanes=0,s===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=s.lanes|s.childLanes;if(function(e,t,n,r,l,a){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-be(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Oe(e,r,0),0!==a&&0===l&&0!==e.tag&&(e.suspendedLanes|=a&~(o&~t))}(e,r,c|=xr,a,i,u),e===es&&(ts=es=null,ns=0),!(10256&s.subtreeFlags)&&!(10256&s.flags)||Ss||(Ss=!0,Cs=c,_s=n,re(fe,(function(){return ec(),null}))),n=!!(15990&s.flags),15990&s.subtreeFlags||n?(n=N.T,N.T=null,a=H.p,H.p=2,i=Ju,Ju|=4,function(e,t){if(e=e.containerInfo,Qc=$f,Jn(e=Zn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var l=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==l&&3!==d.nodeType||(u=i+l),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===l&&(u=i),p===a&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(qc={focusedElem:e,selectionRange:n},$f=!1,tu=t;null!==tu;)if(e=(t=tu).child,1028&t.subtreeFlags&&null!==e)e.return=t,tu=e;else for(;null!==tu;){switch(a=(t=tu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,l=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var h=Oo(n.type,l,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){nc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))af(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":af(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,tu=e;break}tu=t.return}h=nu,nu=!1}(e,s),pu(s,e),er(qc,e.containerInfo),$f=!!Qc,qc=Qc=null,e.current=s,ru(e,s.alternate,s),oe(),Ju=i,H.p=a,N.T=n):e.current=s,Ss?(Ss=!1,Es=e,xs=r):Js(e,c),0===(c=e.pendingLanes)&&(ws=null),function(e){if(ge&&"function"==typeof ge.onCommitFiberRoot)try{ge.onCommitFiberRoot(ve,e,void 0,!(128&~e.current.flags))}catch(e){}}(s.stateNode),mc(e),null!==t)for(l=e.onRecoverableError,s=0;s<t.length;s++)l((c=t[s]).value,{componentStack:c.stack});!!(3&xs)&&ec(),c=e.pendingLanes,4194218&r&&42&c?e===zs?Ps++:(Ps=0,zs=e):Ps=0,hc(0,!1)}(e,t,n,r,d,l,a,i)}finally{N.T=f,H.p=d}}function Js(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Ul(t))}function ec(){if(null!==Es){var e=Es,t=Cs;Cs=0;var n=Ae(xs),r=N.T,l=H.p;try{if(H.p=32>n?32:n,N.T=null,null===Es)var a=!1;else{n=_s,_s=null;var i=Es,u=xs;if(Es=null,xs=0,6&Ju)throw Error(o(331));var s=Ju;if(Ju|=4,Tu(i.current),Su(i,i.current,u,n),Ju=s,hc(0,!1),ge&&"function"==typeof ge.onPostCommitFiberRoot)try{ge.onPostCommitFiberRoot(ve,i)}catch(e){}a=!0}return a}finally{H.p=l,N.T=r,Js(e,t)}}return!1}function tc(e,t,n){t=Rr(n,t),null!==(e=Li(e,t=jo(e.stateNode,t,2),2))&&(Le(e,2),mc(e))}function nc(e,t,n){if(3===e.tag)tc(e,e,n);else for(;null!==t;){if(3===t.tag){tc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ws||!ws.has(r))){e=Rr(n,e),null!==(r=Li(t,n=Uo(2),2))&&(Ho(n,r,t,e),Le(r,2),mc(r));break}}t=t.return}}function rc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Zu;var l=new Set;r.set(t,l)}else void 0===(l=r.get(t))&&(l=new Set,r.set(t,l));l.has(n)||(is=!0,l.add(n),e=lc.bind(null,e,t,n),t.then(e,e))}function lc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,es===e&&(ns&n)===n&&(4===ss||3===ss&&(62914560&ns)===ns&&300>ie()-ys?!(2&Ju)&&js(e,0):ds|=n,ms===ns&&(ms=0)),mc(e)}function ac(e,t){0===t&&(t=Ne()),null!==(e=zr(e,t))&&(Le(e,t),mc(e))}function oc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ac(e,n)}function ic(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(n=l.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),ac(e,n)}var uc=null,sc=null,cc=!1,fc=!1,dc=!1,pc=0;function mc(e){var t;e!==sc&&null===e.next&&(null===sc?uc=sc=e:sc=sc.next=e),fc=!0,cc||(cc=!0,t=vc,nf((function(){6&Ju?re(se,t):t()})))}function hc(e,t){if(!dc&&fc){dc=!0;do{for(var n=!1,r=uc;null!==r;){if(!t)if(0!==e){var l=r.pendingLanes;if(0===l)var a=0;else{var o=r.suspendedLanes,i=r.pingedLanes;a=(1<<31-be(42|e)+1)-1,a=201326677&(a&=l&~(o&~i))?201326677&a|1:a?2|a:0}0!==a&&(n=!0,bc(r,a))}else a=ns,!(3&(a=Ce(r,r===es?a:0)))||_e(r,a)||(n=!0,bc(r,a));r=r.next}}while(n);dc=!1}}function vc(){fc=cc=!1;var e,t=0;0!==pc&&(((e=window.event)&&"popstate"===e.type?e!==Zc&&(Zc=e,!0):(Zc=null,!1))&&(t=pc),pc=0);for(var n=ie(),r=null,l=uc;null!==l;){var a=l.next,o=gc(l,n);0===o?(l.next=null,null===r?uc=a:r.next=a,null===a&&(sc=r)):(r=l,(0!==t||3&o)&&(fc=!0)),l=a}hc(t,!1)}function gc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var o=31-be(a),i=1<<o,u=l[o];-1===u?i&n&&!(i&r)||(l[o]=Pe(i,t)):u<=t&&(e.expiredLanes|=i),a&=~i}if(n=ns,n=Ce(e,e===(t=es)?n:0),r=e.callbackNode,0===n||e===t&&2===rs||null!==e.cancelPendingCommit)return null!==r&&null!==r&&le(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||_e(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&le(r),Ae(n)){case 2:case 8:n=ce;break;case 32:default:n=fe;break;case 268435456:n=pe}return r=yc.bind(null,e),n=re(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&le(r),e.callbackPriority=2,e.callbackNode=null,2}function yc(e,t){var n=e.callbackNode;if(ec()&&e.callbackNode!==n)return null;var r=ns;return 0===(r=Ce(e,e===es?r:0))?null:(Os(e,r,t),gc(e,ie()),null!=e.callbackNode&&e.callbackNode===n?yc.bind(null,e):null)}function bc(e,t){if(ec())return null;Os(e,t,!0)}function kc(){return 0===pc&&(pc=ze()),pc}function wc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:zt(""+e)}function Sc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ec=0;Ec<kr.length;Ec++){var xc=kr[Ec];wr(xc.toLowerCase(),"on"+(xc[0].toUpperCase()+xc.slice(1)))}wr(dr,"onAnimationEnd"),wr(pr,"onAnimationIteration"),wr(mr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(hr,"onTransitionRun"),wr(vr,"onTransitionStart"),wr(gr,"onTransitionCancel"),wr(yr,"onTransitionEnd"),et("onMouseEnter",["mouseout","mouseover"]),et("onMouseLeave",["mouseout","mouseover"]),et("onPointerEnter",["pointerout","pointerover"]),et("onPointerLeave",["pointerout","pointerover"]),Je("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Je("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Je("onBeforeInput",["compositionend","keypress","textInput","paste"]),Je("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Je("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Je("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Cc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_c=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Cc));function Pc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){Ro(e)}l.currentTarget=null,a=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){Ro(e)}l.currentTarget=null,a=u}}}}function zc(e,t){var n=t[Ue];void 0===n&&(n=t[Ue]=new Set);var r=e+"__bubble";n.has(r)||(Oc(t,e,2,!1),n.add(r))}function Nc(e,t,n){var r=0;t&&(r|=4),Oc(n,e,r,t)}var Tc="_reactListening"+Math.random().toString(36).slice(2);function Lc(e){if(!e[Tc]){e[Tc]=!0,Xe.forEach((function(t){"selectionchange"!==t&&(_c.has(t)||Nc(t,!1,e),Nc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Tc]||(t[Tc]=!0,Nc("selectionchange",!1,t))}}function Oc(e,t,n,r){switch(Yf(t)){case 2:var l=Vf;break;case 8:l=Bf;break;default:l=Wf}n=l.bind(null,t,n,e),l=void 0,!It||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(l=!0),r?void 0!==l?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):void 0!==l?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function Rc(e,t,n,r,l){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===l||8===i.nodeType&&i.parentNode===l)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===l||8===u.nodeType&&u.parentNode===l))return;o=o.return}for(;null!==i;){if(null===(o=Qe(i)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=a=o;continue e}i=i.parentNode}}r=r.return}Mt((function(){var r=a,l=Tt(n),o=[];e:{var i=br.get(e);if(void 0!==i){var u=Xt,s=e;switch(e){case"keypress":if(0===Vt(n))break e;case"keydown":case"keyup":u=pn;break;case"focusin":s="focus",u=rn;break;case"focusout":s="blur",u=rn;break;case"beforeblur":case"afterblur":u=rn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=hn;break;case dr:case pr:case mr:u=ln;break;case yr:u=vn;break;case"scroll":case"scrollend":u=Jt;break;case"wheel":u=gn;break;case"copy":case"cut":case"paste":u=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=mn;break;case"toggle":case"beforetoggle":u=yn}var c=!!(4&t),f=!c&&("scroll"===e||"scrollend"===e),d=c?null!==i?i+"Capture":null:i;c=[];for(var p,m=r;null!==m;){var h=m;if(p=h.stateNode,5!==(h=h.tag)&&26!==h&&27!==h||null===p||null===d||null!=(h=Ft(m,d))&&c.push(Ac(m,h,p)),f)break;m=m.return}0<c.length&&(i=new u(i,s,null,n,l),o.push({event:i,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Nt||!(s=n.relatedTarget||n.fromElement)||!Qe(s)&&!s[je])&&(u||i)&&(i=l.window===l?l:(i=l.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Qe(s):null)&&(f=F(s),c=s.tag,s!==f||5!==c&&27!==c&&6!==c)&&(s=null)):(u=null,s=r),u!==s)){if(c=tn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=mn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?i:Ke(u),p=null==s?i:Ke(s),(i=new c(h,m+"leave",u,n,l)).target=f,i.relatedTarget=p,h=null,Qe(l)===r&&((c=new c(d,m+"enter",s,n,l)).target=p,c.relatedTarget=f,h=c),f=h,u&&s)e:{for(d=s,m=0,p=c=u;p;p=Fc(p))m++;for(p=0,h=d;h;h=Fc(h))p++;for(;0<m-p;)c=Fc(c),m--;for(;0<p-m;)d=Fc(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break e;c=Fc(c),d=Fc(d)}c=null}else c=null;null!==u&&Ic(o,i,u,c,!1),null!==s&&null!==f&&Ic(o,f,s,c,!0)}if("select"===(u=(i=r?Ke(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var v=Fn;else if(Tn(i))if(In)v=Qn;else{v=Bn;var g=Vn}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Ct(r.elementType)&&(v=Fn):v=Wn;switch(v&&(v=v(e,r))?Ln(o,v,n,l):(g&&g(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&gt(i,"number",i.value)),g=r?Ke(r):window,e){case"focusin":(Tn(g)||"true"===g.contentEditable)&&(nr=g,rr=r,lr=null);break;case"focusout":lr=rr=nr=null;break;case"mousedown":ar=!0;break;case"contextmenu":case"mouseup":case"dragend":ar=!1,or(o,n,l);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":or(o,n,l)}var y;if(kn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zn?_n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(En&&"ko"!==n.locale&&(zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&zn&&(y=$t()):(Ut="value"in(jt=l)?jt.value:jt.textContent,zn=!0)),0<(g=Mc(r,b)).length&&(b=new on(b,e,null,n,l),o.push({event:b,listeners:g}),(y||null!==(y=Pn(n)))&&(b.data=y))),(y=Sn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(Cn=!0,xn);case"textInput":return(e=t.data)===xn&&Cn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!kn&&_n(e,t)?(e=$t(),Ht=Ut=jt=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Mc(r,"onBeforeInput")).length&&(g=new on("onBeforeInput","beforeinput",null,n,l),o.push({event:g,listeners:b}),g.data=y),function(e,t,n,r,l){if("submit"===t&&n&&n.stateNode===l){var a=wc((l[De]||null).action),o=r.submitter;o&&null!==(t=(t=o[De]||null)?wc(t.formAction):o.getAttribute("formAction"))&&(a=t,o=null);var i=new Xt("action","action",null,r,l);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==pc){var e=o?Sc(l,o):new FormData(l);so(n,{pending:!0,data:e,method:l.method,action:a},null,e)}}else"function"==typeof a&&(i.preventDefault(),e=o?Sc(l,o):new FormData(l),so(n,{pending:!0,data:e,method:l.method,action:a},a,e))},currentTarget:l}]})}}(o,e,r,n,l)}Pc(o,t)}))}function Ac(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mc(e,t){for(var n=t+"Capture",r=[];null!==e;){var l=e,a=l.stateNode;5!==(l=l.tag)&&26!==l&&27!==l||null===a||(null!=(l=Ft(e,n))&&r.unshift(Ac(e,l,a)),null!=(l=Ft(e,t))&&r.push(Ac(e,l,a))),e=e.return}return r}function Fc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Ic(e,t,n,r,l){for(var a=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,l?null!=(s=Ft(n,a))&&o.unshift(Ac(n,s,u)):l||null!=(s=Ft(n,a))&&o.push(Ac(n,s,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Dc=/\r\n?/g,jc=/\u0000|\uFFFD/g;function Uc(e){return("string"==typeof e?e:""+e).replace(Dc,"\n").replace(jc,"")}function Hc(e,t){return t=Uc(t),Uc(e)===t}function $c(){}function Vc(e,t,n,r,l,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":ot(e,"class",r);break;case"tabIndex":ot(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":ot(e,n,r);break;case"style":xt(e,r,a);break;case"data":if("object"!==t){ot(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=zt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Vc(e,t,"name",l.name,l,null),Vc(e,t,"formEncType",l.formEncType,l,null),Vc(e,t,"formMethod",l.formMethod,l,null),Vc(e,t,"formTarget",l.formTarget,l,null)):(Vc(e,t,"encType",l.encType,l,null),Vc(e,t,"method",l.method,l,null),Vc(e,t,"target",l.target,l,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=zt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=$c);break;case"onScroll":null!=r&&zc("scroll",e);break;case"onScrollEnd":null!=r&&zc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=zt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":zc("beforetoggle",e),zc("toggle",e),at(e,"popover",r);break;case"xlinkActuate":it(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":it(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":it(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":it(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":it(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":it(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":it(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":it(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":it(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":at(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&at(e,n=_t.get(n)||n,r)}}function Bc(e,t,n,r,l,a){switch(n){case"style":xt(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&zc("scroll",e);break;case"onScrollEnd":null!=r&&zc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=$c);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ze.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(l=n.endsWith("Capture"),t=n.slice(2,l?n.length-7:void 0),"function"==typeof(a=null!=(a=e[De]||null)?a[n]:null)&&e.removeEventListener(t,a,l),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):at(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,l)))}}function Wc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":zc("error",e),zc("load",e);var r,l=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":l=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Vc(e,t,r,i,n,null)}}return a&&Vc(e,t,"srcSet",n.srcSet,n,null),void(l&&Vc(e,t,"src",n.src,n,null));case"input":zc("invalid",e);var u=r=i=a=null,s=null,c=null;for(l in n)if(n.hasOwnProperty(l)){var f=n[l];if(null!=f)switch(l){case"name":a=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:Vc(e,t,l,f,n,null)}}return vt(e,r,u,s,c,i,a,!1),void ct(e);case"select":for(a in zc("invalid",e),l=i=r=null,n)if(n.hasOwnProperty(a)&&null!=(u=n[a]))switch(a){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":l=u;default:Vc(e,t,a,u,n,null)}return t=r,n=i,e.multiple=!!l,void(null!=t?yt(e,!!l,t,!1):null!=n&&yt(e,!!l,n,!0));case"textarea":for(i in zc("invalid",e),r=a=l=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":l=u;break;case"defaultValue":a=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:Vc(e,t,i,u,n,null)}return kt(e,l,a,r),void ct(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(l=n[s])&&("selected"===s?e.selected=l&&"function"!=typeof l&&"symbol"!=typeof l:Vc(e,t,s,l,n,null));return;case"dialog":zc("cancel",e),zc("close",e);break;case"iframe":case"object":zc("load",e);break;case"video":case"audio":for(l=0;l<Cc.length;l++)zc(Cc[l],e);break;case"image":zc("error",e),zc("load",e);break;case"details":zc("toggle",e);break;case"embed":case"source":case"link":zc("error",e),zc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(l=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Vc(e,t,c,l,n,null)}return;default:if(Ct(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(l=n[f])&&Bc(e,t,f,l,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(l=n[u])&&Vc(e,t,u,l,n,null)}var Qc=null,qc=null;function Kc(e){return 9===e.nodeType?e:e.ownerDocument}function Yc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Gc(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Xc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Zc=null,Jc="function"==typeof setTimeout?setTimeout:void 0,ef="function"==typeof clearTimeout?clearTimeout:void 0,tf="function"==typeof Promise?Promise:void 0,nf="function"==typeof queueMicrotask?queueMicrotask:void 0!==tf?function(e){return tf.resolve(null).then(e).catch(rf)}:Jc;function rf(e){setTimeout((function(){throw e}))}function lf(e,t){var n=t,r=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&8===l.nodeType)if("/$"===(n=l.data)){if(0===r)return e.removeChild(l),void pd(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=l}while(n);pd(t)}function af(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":af(n),We(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function of(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function uf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function sf(e,t,n){switch(t=Kc(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}var cf=new Map,ff=new Set;function df(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var pf=H.d;H.d={f:function(){var e=pf.f(),t=Is();return e||t},r:function(e){var t=qe(e);null!==t&&5===t.tag&&"form"===t.type?fo(t):pf.r(e)},D:function(e){pf.D(e),hf("dns-prefetch",e,null)},C:function(e,t){pf.C(e,t),hf("preconnect",e,t)},L:function(e,t,n){pf.L(e,t,n);var r=mf;if(r&&e&&t){var l='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(l+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(l+='[imagesizes="'+mt(n.imageSizes)+'"]')):l+='[href="'+mt(e)+'"]';var a=l;switch(t){case"style":a=gf(e);break;case"script":a=kf(e)}cf.has(a)||(e=T({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),cf.set(a,e),null!==r.querySelector(l)||"style"===t&&r.querySelector(yf(a))||"script"===t&&r.querySelector(wf(a))||(Wc(t=r.createElement("link"),"link",e),Ge(t),r.head.appendChild(t)))}},m:function(e,t){pf.m(e,t);var n=mf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",l='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',a=l;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=kf(e)}if(!cf.has(a)&&(e=T({rel:"modulepreload",href:e},t),cf.set(a,e),null===n.querySelector(l))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(wf(a)))return}Wc(r=n.createElement("link"),"link",e),Ge(r),n.head.appendChild(r)}}},X:function(e,t){pf.X(e,t);var n=mf;if(n&&e){var r=Ye(n).hoistableScripts,l=kf(e),a=r.get(l);a||((a=n.querySelector(wf(l)))||(e=T({src:e,async:!0},t),(t=cf.get(l))&&Cf(e,t),Ge(a=n.createElement("script")),Wc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}},S:function(e,t,n){pf.S(e,t,n);var r=mf;if(r&&e){var l=Ye(r).hoistableStyles,a=gf(e);t=t||"default";var o=l.get(a);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(yf(a)))i.loading=5;else{e=T({rel:"stylesheet",href:e,"data-precedence":t},n),(n=cf.get(a))&&xf(e,n);var u=o=r.createElement("link");Ge(u),Wc(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Ef(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},l.set(a,o)}}},M:function(e,t){pf.M(e,t);var n=mf;if(n&&e){var r=Ye(n).hoistableScripts,l=kf(e),a=r.get(l);a||((a=n.querySelector(wf(l)))||(e=T({src:e,async:!0,type:"module"},t),(t=cf.get(l))&&Cf(e,t),Ge(a=n.createElement("script")),Wc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}}};var mf="undefined"==typeof document?null:document;function hf(e,t,n){var r=mf;if(r&&"string"==typeof t&&t){var l=mt(t);l='link[rel="'+e+'"][href="'+l+'"]',"string"==typeof n&&(l+='[crossorigin="'+n+'"]'),ff.has(l)||(ff.add(l),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(l)&&(Wc(t=r.createElement("link"),"link",e),Ge(t),r.head.appendChild(t)))}}function vf(e,t,n,r){var l,a,i,u,s=(s=G.current)?df(s):null;if(!s)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=gf(n.href),(r=(n=Ye(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=gf(n.href);var c=Ye(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(yf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),cf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},cf.set(e,n),c||(l=s,a=e,i=n,u=f.state,l.querySelector('link[rel="preload"][as="style"]['+a+"]")?u.loading=1:(a=l.createElement("link"),u.preload=a,a.addEventListener("load",(function(){return u.loading|=1})),a.addEventListener("error",(function(){return u.loading|=2})),Wc(a,"link",i),Ge(a),l.head.appendChild(a))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=kf(n),(r=(n=Ye(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function gf(e){return'href="'+mt(e)+'"'}function yf(e){return'link[rel="stylesheet"]['+e+"]"}function bf(e){return T({},e,{"data-precedence":e.precedence,precedence:null})}function kf(e){return'[src="'+mt(e)+'"]'}function wf(e){return"script[async]"+e}function Sf(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,Ge(r),r;var l=T({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ge(r=(e.ownerDocument||e).createElement("style")),Wc(r,"style",l),Ef(r,n.precedence,e),t.instance=r;case"stylesheet":l=gf(n.href);var a=e.querySelector(yf(l));if(a)return t.state.loading|=4,t.instance=a,Ge(a),a;r=bf(n),(l=cf.get(l))&&xf(r,l),Ge(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Wc(a,"link",r),t.state.loading|=4,Ef(a,n.precedence,e),t.instance=a;case"script":return a=kf(n.src),(l=e.querySelector(wf(a)))?(t.instance=l,Ge(l),l):(r=n,(l=cf.get(a))&&Cf(r=T({},n),l),Ge(l=(e=e.ownerDocument||e).createElement("script")),Wc(l,"link",r),e.head.appendChild(l),t.instance=l);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Ef(r,n.precedence,e));return t.instance}function Ef(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),l=r.length?r[r.length-1]:null,a=l,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)a=i;else if(a!==l)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function xf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Cf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var _f=null;function Pf(e,t,n){if(null===_f){var r=new Map,l=_f=new Map;l.set(n,r)}else(r=(l=_f).get(n))||(r=new Map,l.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),l=0;l<n.length;l++){var a=n[l];if(!(a[Be]||a[Ie]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var o=a.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(a):r.set(o,[a])}}return r}function zf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Nf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Tf=null;function Lf(){}function Of(){if(this.count--,0===this.count)if(this.stylesheets)Af(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Rf=null;function Af(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Rf=new Map,t.forEach(Mf,e),Rf=null,Of.call(e))}function Mf(e,t){if(!(4&t.state.loading)){var n=Rf.get(e);if(n)var r=n.get(null);else{n=new Map,Rf.set(e,n);for(var l=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<l.length;a++){var o=l[a];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(l=t.instance).getAttribute("data-precedence"),(a=n.get(o)||r)===r&&n.set(null,l),n.set(o,l),this.count++,r=Of.bind(this),l.addEventListener("load",r),l.addEventListener("error",r),a?a.parentNode.insertBefore(l,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(l,e.firstChild),t.state.loading|=4}}var Ff={$$typeof:h,Provider:null,Consumer:null,_currentValue:$,_currentValue2:$,_threadCount:0};function If(e,t,n,r,l,a,o,i){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Te(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Te(0),this.hiddenUpdates=Te(null),this.identifierPrefix=r,this.onUncaughtError=l,this.onCaughtError=a,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Df(e,t,n,r,l,a){l=function(e){return e?e=Lr:Lr}(l),null===r.context?r.context=l:r.pendingContext=l,(r=Ti(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=Li(e,r,t))&&(Ls(n,0,t),Oi(n,e,t))}function jf(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Uf(e,t){jf(e,t),(e=e.alternate)&&jf(e,t)}function Hf(e){if(13===e.tag){var t=zr(e,67108864);null!==t&&Ls(t,0,67108864),Uf(e,67108864)}}var $f=!0;function Vf(e,t,n,r){var l=N.T;N.T=null;var a=H.p;try{H.p=2,Wf(e,t,n,r)}finally{H.p=a,N.T=l}}function Bf(e,t,n,r){var l=N.T;N.T=null;var a=H.p;try{H.p=8,Wf(e,t,n,r)}finally{H.p=a,N.T=l}}function Wf(e,t,n,r){if($f){var l=Qf(r);if(null===l)Rc(e,t,r,qf,n),ld(e,r);else if(function(e,t,n,r,l){switch(t){case"focusin":return Xf=ad(Xf,e,t,n,r,l),!0;case"dragenter":return Zf=ad(Zf,e,t,n,r,l),!0;case"mouseover":return Jf=ad(Jf,e,t,n,r,l),!0;case"pointerover":var a=l.pointerId;return ed.set(a,ad(ed.get(a)||null,e,t,n,r,l)),!0;case"gotpointercapture":return a=l.pointerId,td.set(a,ad(td.get(a)||null,e,t,n,r,l)),!0}return!1}(l,e,t,n,r))r.stopPropagation();else if(ld(e,r),4&t&&-1<rd.indexOf(e)){for(;null!==l;){var a=qe(l);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var o=xe(a.pendingLanes);if(0!==o){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-be(o);i.entanglements[1]|=u,o&=~u}mc(a),!(6&Ju)&&(bs=ie()+500,hc(0,!1))}}break;case 13:null!==(i=zr(a,2))&&Ls(i,0,2),Is(),Uf(a,2)}if(null===(a=Qf(r))&&Rc(e,t,r,qf,n),a===l)break;l=a}null!==l&&r.stopPropagation()}else Rc(e,t,r,null,n)}}function Qf(e){return Kf(e=Tt(e))}var qf=null;function Kf(e){if(qf=null,null!==(e=Qe(e))){var t=F(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=I(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return qf=e,null}function Yf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ue()){case se:return 2;case ce:return 8;case fe:case de:return 32;case pe:return 268435456;default:return 32}default:return 32}}var Gf=!1,Xf=null,Zf=null,Jf=null,ed=new Map,td=new Map,nd=[],rd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function ld(e,t){switch(e){case"focusin":case"focusout":Xf=null;break;case"dragenter":case"dragleave":Zf=null;break;case"mouseover":case"mouseout":Jf=null;break;case"pointerover":case"pointerout":ed.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":td.delete(t.pointerId)}}function ad(e,t,n,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==t&&null!==(t=qe(t))&&Hf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==l&&-1===t.indexOf(l)&&t.push(l),e)}function od(e){var t=Qe(e.target);if(null!==t){var n=F(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=I(n)))return e.blockedOn=t,void function(e){var t=H.p;try{return H.p=e,function(){if(13===n.tag){var e=Ns(),t=zr(n,e);null!==t&&Ls(t,0,e),Uf(n,e)}}()}finally{H.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function id(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qf(e.nativeEvent);if(null!==n)return null!==(t=qe(n))&&Hf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Nt=r,n.target.dispatchEvent(r),Nt=null,t.shift()}return!0}function ud(e,t,n){id(e)&&n.delete(t)}function sd(){Gf=!1,null!==Xf&&id(Xf)&&(Xf=null),null!==Zf&&id(Zf)&&(Zf=null),null!==Jf&&id(Jf)&&(Jf=null),ed.forEach(ud),td.forEach(ud)}function cd(e,t){e.blockedOn===t&&(e.blockedOn=null,Gf||(Gf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,sd)))}var fd=null;function dd(e){fd!==e&&(fd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){fd===e&&(fd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],l=e[t+2];if("function"!=typeof r){if(null===Kf(r||n))continue;break}var a=qe(n);null!==a&&(e.splice(t,3),t-=3,so(a,{pending:!0,data:l,method:n.method,action:r},r,l))}})))}function pd(e){function t(t){return cd(t,e)}null!==Xf&&cd(Xf,e),null!==Zf&&cd(Zf,e),null!==Jf&&cd(Jf,e),ed.forEach(t),td.forEach(t);for(var n=0;n<nd.length;n++){var r=nd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<nd.length&&null===(n=nd[0]).blockedOn;)od(n),null===n.blockedOn&&nd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var l=n[r],a=n[r+1],o=l[De]||null;if("function"==typeof a)o||dd(n);else if(o){var i=null;if(a&&a.hasAttribute("formAction")){if(l=a,o=a[De]||null)i=o.formAction;else if(null!==Kf(l))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),dd(n)}}}function md(e){this._internalRoot=e}function hd(e){this._internalRoot=e}hd.prototype.render=md.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Df(t.current,Ns(),e,t,null,null)},hd.prototype.unmount=md.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&ec(),Df(e.current,2,null,e,null,null),Is(),t[je]=null}},hd.prototype.unstable_scheduleHydration=function(e){if(e){var t=Me();e={blockedOn:null,target:e,priority:t};for(var n=0;n<nd.length&&0!==t&&t<nd[n].priority;n++);nd.splice(n,0,e),0===n&&od(e)}};var vd=l.version;if("19.0.0"!==vd)throw Error(o(527,vd,"19.0.0"));H.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=F(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){n=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===n)return D(l),e;if(a===r)return D(l),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=l,r=a;else{for(var i=!1,u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?j(e):null)?null:e.stateNode};var gd={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:N,findFiberByHostInstance:Qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yd.isDisabled&&yd.supportsFiber)try{ve=yd.inject(gd),ge=yd}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(o(299));var n,r=!1,l="",a=Ao,i=Mo,u=Fo;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(l=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(i=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,l,a,o,i,u,s,c,f){return e=new If(e,t,n,o,i,u,s,f),t=1,!0===a&&(t|=24),a=Au(3,null,null,t),e.current=a,a.stateNode=e,(t=jl()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},zi(a),e}(e,1,!1,null,0,r,l,a,i,u,0,null),e[je]=t.current,Lc(8===e.nodeType?e.parentNode:e),new md(t)}},221:(e,t,n)=>{var r=n(540);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var o={d:{f:a,r:function(){throw Error(l(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(l(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),l="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:a}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.0.0"},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},434:(e,t,n)=>{var r=n(540).__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;t.c=function(e){return r.H.useMemoCache(e)}},698:(e,t)=>{var n=Symbol.for("react.transitional.element");function r(e,t,r){var l=null;if(void 0!==r&&(l=""+r),void 0!==t.key&&(l=""+t.key),"key"in t)for(var a in r={},t)"key"!==a&&(r[a]=t[a]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:l,ref:void 0!==t?t:null,props:r}}Symbol.for("react.fragment"),t.jsx=r,t.jsxs=r},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var k=b.prototype=new y;k.constructor=b,h(k,g.prototype),k.isPureReactComponent=!0;var w=Array.isArray,S={H:null,A:null,T:null,S:null},E=Object.prototype.hasOwnProperty;function x(e,t,r,l,a,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function z(){}function N(e,t,l,a,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return N((c=e._init)(e._payload),t,l,a,o)}}if(c)return o=o(e),c=""===a?"."+P(e,0):a,w(o)?(l="",null!=c&&(l=c.replace(_,"$&/")+"/"),N(o,t,l,"",(function(e){return e}))):null!=o&&(C(o)&&(u=o,s=l+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(_,"$&/")+"/")+c,o=x(u.type,s,void 0,0,0,u.props)),t.push(o)),1;c=0;var f,m=""===a?".":a+":";if(w(e))for(var h=0;h<e.length;h++)c+=N(a=e[h],t,l,i=m+P(a,h),o);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(a=e.next()).done;)c+=N(a=a.value,t,l,i=m+P(a,h++),o);else if("object"===i){if("function"==typeof e.then)return N(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(z,z):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,l,a,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function T(e,t,n){if(null==e)return e;var r=[],l=0;return N(e,r,"","",(function(e){return t.call(n,e,l++)})),r}function L(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function R(){}t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=l,t.Profiler=o,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),l=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(l=""+t.key),t)!E.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var o=Array(a),i=0;i<a;i++)o[i]=arguments[i+2];r.children=o}return x(e.type,l,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,l={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(l[r]=t[r]);var o=arguments.length-2;if(1===o)l.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];l.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===l[r]&&(l[r]=o[r]);return x(e,a,void 0,0,0,l)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),l=S.S;null!==l&&l(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(R,O)}catch(e){O(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return S.H.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.0.0"},522:(e,t,n)=>{e.exports=n(434)},540:(e,t,n)=>{e.exports=n(869)},848:(e,t,n)=>{e.exports=n(698)},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,l=e[r];if(!(0<a(l,t)))break e;e[r]=t,e[n]=l,n=r}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,l=e.length,o=l>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>a(u,n))s<l&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<l&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var t=r(c);null!==t;){if(null===t.callback)l(c);else{if(!(t.startTime<=e))break;l(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(v=!1,k(e),!h)if(null!==r(s))h=!0,L();else{var t=r(c);null!==t&&O(w,t.startTime-e)}}var S,E=!1,x=-1,C=5,_=-1;function P(){return!(t.unstable_now()-_<C)}function z(){if(E){var e=t.unstable_now();_=e;var n=!0;try{e:{h=!1,v&&(v=!1,y(x),x=-1),m=!0;var a=p;try{t:{for(k(e),d=r(s);null!==d&&!(d.expirationTime>e&&P());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,k(e),n=!0;break t}d===r(s)&&l(s),k(e)}else l(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&O(w,u.startTime-e),n=!1}}break e}finally{d=null,p=a,m=!1}n=void 0}}finally{n?S():E=!1}}}if("function"==typeof b)S=function(){b(z)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,T=N.port2;N.port1.onmessage=z,S=function(){T.postMessage(null)}}else S=function(){g(z,0)};function L(){E||(E=!0,S())}function O(e,n){x=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,L())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,l,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:l,priorityLevel:e,startTime:a,expirationTime:i=a+i,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(v?(y(x),x=-1):v=!0,O(w,a-o))):(e.sortIndex=i,n(s,e),h||m||(h=!0,L())),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},982:(e,t,n)=>{e.exports=n(477)}},t={};function n(r){var l=t[r];if(void 0!==l)return l.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}var r=n(848),l=n(338),a=n(522),o=n(540);const i=e=>({value:e,hasError:!1,errorMessage:void 0}),u=(0,o.createContext)({});function s(e){const t=(0,a.c)(7),{children:n}=e;let l;t[0]===Symbol.for("react.memo_cache_sentinel")?(l={name:{value:"",hasError:!1,isMasked:!1,errorMessage:void 0},surname:{value:"",hasError:!1,isMasked:!1,errorMessage:void 0},city:i(null),district:i(null),address:{value:"",hasError:!1,isMasked:!1,errorMessage:void 0}},t[0]=l):l=t[0];const[s,c]=(0,o.useState)(l);let f;t[1]===Symbol.for("react.memo_cache_sentinel")?(f=(e,t)=>{c((n=>({...n,[e]:{...n[e],...t}})))},t[1]=f):f=t[1];const d=f;let p,m;return t[2]!==s?(p={...s,updateField:d},t[2]=s,t[3]=p):p=t[3],t[4]!==n||t[5]!==p?(m=(0,r.jsx)(u.Provider,{value:p,children:n}),t[4]=n,t[5]=p,t[6]=m):m=t[6],m}const c=e=>{const t=(0,a.c)(18);let n,l,o,i;t[0]!==e?(({label:o,hint:n,...l}=e),t[0]=e,t[1]=n,t[2]=l,t[3]=o):(n=t[1],l=t[2],o=t[3]),t[4]!==l.id||t[5]!==o?(i=(0,r.jsx)("label",{htmlFor:l.id,children:o}),t[4]=l.id,t[5]=o,t[6]=i):i=t[6];const u=l.autoComplete||"none",s=`${l.id}-hint`;let c,f,d;return t[7]!==l||t[8]!==u||t[9]!==s?(c=(0,r.jsx)("input",{...l,autoComplete:u,"aria-describedby":s}),t[7]=l,t[8]=u,t[9]=s,t[10]=c):c=t[10],t[11]!==n||t[12]!==l.id?(f=n&&(0,r.jsx)("span",{id:`${l.id}-hint`,className:"hint",children:n}),t[11]=n,t[12]=l.id,t[13]=f):f=t[13],t[14]!==i||t[15]!==c||t[16]!==f?(d=(0,r.jsxs)("div",{className:"input-wrapper",children:[i,c,f]}),t[14]=i,t[15]=c,t[16]=f,t[17]=d):d=t[17],d},f={"filter-district-list":0,"select-option":0},d=document.querySelector("#render-stats > ul"),p=e=>{if(f[e]+=1,!d.querySelector(`li.${e}`)){const t=document.createElement("li");return t.classList.add(e),t.innerHTML=`<p class="key">${e}</p> <p class="value">${f[e]}</p>`,void d.appendChild(t)}d.querySelector(`li.${e} > .value`).textContent=f[e].toString()},m=e=>{const t=(0,a.c)(19),{id:n,label:l,options:o,value:i,onChange:u,placeholder:s,disabled:c}=e,f=void 0===s?"Select an option":s,d=void 0!==c&&c;let p;t[0]!==u?(p=e=>{u(e.target.value)},t[0]=u,t[1]=p):p=t[1];const m=p;let v;t[2]!==l?(v=(0,r.jsx)("label",{htmlFor:"select",className:"select-label",children:l}),t[2]=l,t[3]=v):v=t[3];const g=i||"";let y,b,k,w;return t[4]!==f?(y=(0,r.jsx)("option",{value:"",disabled:!0,children:f}),t[4]=f,t[5]=y):y=t[5],t[6]!==o?(b=o.map(h),t[6]=o,t[7]=b):b=t[7],t[8]!==d||t[9]!==m||t[10]!==n||t[11]!==l||t[12]!==g||t[13]!==y||t[14]!==b?(k=(0,r.jsxs)("select",{id:n,value:g,onChange:m,disabled:d,"aria-label":l,"aria-required":"true","aria-disabled":d,"aria-live":"polite",className:"select-input",children:[y,b]}),t[8]=d,t[9]=m,t[10]=n,t[11]=l,t[12]=g,t[13]=y,t[14]=b,t[15]=k):k=t[15],t[16]!==v||t[17]!==k?(w=(0,r.jsxs)("div",{className:"select-wrapper",children:[v,k]}),t[16]=v,t[17]=k,t[18]=w):w=t[18],w};function h(e){return p("select-option"),(0,r.jsx)("option",{value:e.value,children:e.label},e.value)}const v=[{value:1,label:"Tokat"},{value:2,label:"Istanbul"},{value:3,label:"Berlin"},{value:4,label:"London"},{value:5,label:"Paris"},{value:6,label:"New York"},{value:7,label:"Tokyo"},{value:8,label:"Moscow"},{value:9,label:"Rome"},{value:10,label:"Madrid"},{value:11,label:"Lisbon"},{value:12,label:"Athens"},{value:13,label:"Budapest"},{value:14,label:"Prague"},{value:15,label:"Vienna"},{value:16,label:"Warsaw"},{value:17,label:"Stockholm"},{value:18,label:"Helsinki"},{value:19,label:"Oslo"},{value:20,label:"Copenhagen"}],g=[{value:1,label:"Besiktas",cityId:2},{value:2,label:"Kadikoy",cityId:2},{value:55,label:"Levent",cityId:2},{value:3,label:"Fatih",cityId:2},{value:4,label:"Sariyer",cityId:2},{value:5,label:"Uskudar",cityId:2},{value:6,label:"Beyoglu",cityId:2},{value:7,label:"Tokat Merkez",cityId:1},{value:8,label:"Erbaa",cityId:1},{value:9,label:"Turhal",cityId:1},{value:10,label:"Zile",cityId:1},{value:16,label:"Berlin Mitte",cityId:3},{value:17,label:"Berlin Kreuzberg",cityId:3},{value:18,label:"Berlin Charlottenburg",cityId:3},{value:19,label:"Berlin Friedrichshain",cityId:3},{value:20,label:"Berlin Neukolln",cityId:3},{value:21,label:"London Westminster",cityId:4},{value:22,label:"London Camden",cityId:4},{value:23,label:"London Kensington",cityId:4},{value:24,label:"London Islington",cityId:4},{value:25,label:"London Hackney",cityId:4},{value:26,label:"Paris 1",cityId:5},{value:27,label:"Paris 2",cityId:5},{value:28,label:"Paris 3",cityId:5},{value:32,label:"New York Brooklyn",cityId:6},{value:33,label:"New York Queens",cityId:6},{value:34,label:"New York Bronx",cityId:6},{value:35,label:"New York Staten Island",cityId:6},{value:36,label:"Tokyo Shinjuku",cityId:7},{value:37,label:"Tokyo Shibuya",cityId:7},{value:38,label:"Tokyo Chiyoda",cityId:7},{value:39,label:"Tokyo Taito",cityId:7},{value:40,label:"Tokyo Nerima",cityId:7},{value:41,label:"Moscow Tverskoy",cityId:8},{value:42,label:"Moscow Khamovniki",cityId:8},{value:43,label:"Moscow Presnensky",cityId:8},{value:44,label:"Moscow Basmanny",cityId:8},{value:46,label:"Rome Centro Storico",cityId:9},{value:47,label:"Rome Trastevere",cityId:9},{value:48,label:"Rome Ostia",cityId:9},{value:49,label:"Rome Primavalle",cityId:9},{value:50,label:"Rome Tiburtina",cityId:9},{value:51,label:"Madrid Centro",cityId:10},{value:52,label:"Madrid Salamanca",cityId:10},{value:53,label:"Madrid Chamberi",cityId:10}],y=()=>{const e=(0,a.c)(34),{name:t,surname:n,city:l,district:i,address:s,updateField:f}=(0,o.useContext)(u);let d;var h;e[0]!==l.value?(h=l.value,p("filter-district-list"),d=h?g.filter((e=>e.cityId===h)):g,e[0]=l.value,e[1]=d):d=e[1];const y=d;let b,k,w,S,E,x,C,_,P,z,N;return e[2]!==f?(b=e=>f("name",{value:e.currentTarget.value}),e[2]=f,e[3]=b):b=e[3],e[4]!==t.value||e[5]!==b?(k=(0,r.jsx)(c,{value:t.value,onChange:b,id:"name",label:"Name",hint:"Please only provide your legal name without surname"}),e[4]=t.value,e[5]=b,e[6]=k):k=e[6],e[7]!==f?(w=e=>f("surname",{value:e.currentTarget.value}),e[7]=f,e[8]=w):w=e[8],e[9]!==n.value||e[10]!==w?(S=(0,r.jsx)(c,{value:n.value,onChange:w,id:"surname",label:"Surname"}),e[9]=n.value,e[10]=w,e[11]=S):S=e[11],e[12]!==f?(E=e=>f("city",{value:Number(e)}),e[12]=f,e[13]=E):E=e[13],e[14]!==l.value||e[15]!==E?(x=(0,r.jsx)(m,{id:"city",label:"City",options:v,value:l.value,onChange:E}),e[14]=l.value,e[15]=E,e[16]=x):x=e[16],e[17]!==f?(C=e=>f("district",{value:Number(e)}),e[17]=f,e[18]=C):C=e[18],e[19]!==i.value||e[20]!==y||e[21]!==C?(_=(0,r.jsx)(m,{id:"district",label:"District",options:y,value:i.value,onChange:C}),e[19]=i.value,e[20]=y,e[21]=C,e[22]=_):_=e[22],e[23]!==f?(P=e=>f("address",{value:e.currentTarget.value}),e[23]=f,e[24]=P):P=e[24],e[25]!==s.value||e[26]!==P?(z=(0,r.jsx)(c,{value:s.value,onChange:P,id:"address",label:"Address",hint:"Please provide your full text address"}),e[25]=s.value,e[26]=P,e[27]=z):z=e[27],e[28]!==z||e[29]!==k||e[30]!==S||e[31]!==x||e[32]!==_?(N=(0,r.jsxs)("div",{children:[k,S,x,_,z]}),e[28]=z,e[29]=k,e[30]=S,e[31]=x,e[32]=_,e[33]=N):N=e[33],N};(0,l.createRoot)(document.getElementById("app")).render((0,r.jsx)((()=>{const e=(0,a.c)(1);let t;return e[0]===Symbol.for("react.memo_cache_sentinel")?(t=(0,r.jsx)(s,{children:(0,r.jsx)(y,{})}),e[0]=t):t=e[0],t}),{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQzNDbjlELFFBQU8sVUNBTyxLQUNmLE1BQU1rNkQsR0FBSSxPQUFHLEdBQ2IsSUFBSUQsRUFRSixPQVBJQyxFQUFFLEtBQU8vN0QsT0FBT0MsSUFBSSw4QkFDcEI2N0QsR0FBSyxTQUFLRCxFQUFjLENBQUVub0QsVUFBVSxTQUFLNnFELEVBQU0sQ0FBQyxLQUNoRHhDLEVBQUUsR0FBS0QsR0FHUEEsRUFBS0MsRUFBRSxHQUVKRCxDQUFFLEdEVlMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FkZHJlc3MtZm9ybS1hcHAtZGVtby8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2FkZHJlc3MtZm9ybS1hcHAtZGVtby8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtY29tcGlsZXItcnVudGltZS5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL2FkZHJlc3MtZm9ybS1hcHAtZGVtby8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMiLCJ3ZWJwYWNrOi8vYWRkcmVzcy1mb3JtLWFwcC1kZW1vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2NvbXBpbGVyLXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vYWRkcmVzcy1mb3JtLWFwcC1kZW1vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2FkZHJlc3MtZm9ybS1hcHAtZGVtby8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL2FkZHJlc3MtZm9ybS1hcHAtZGVtby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9zcmMvdXRpbC9mb3JtLnRzIiwid2VicGFjazovL2FkZHJlc3MtZm9ybS1hcHAtZGVtby8uL3NyYy9jb250ZXh0cy9mb3JtLnRzeCIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9zcmMvY29tcG9uZW50cy9pbnB1dC9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYWRkcmVzcy1mb3JtLWFwcC1kZW1vLy4vc3JjL3V0aWwvcmVuZGVyLXN0YXRzLWRhdGEudHMiLCJ3ZWJwYWNrOi8vYWRkcmVzcy1mb3JtLWFwcC1kZW1vLy4vc3JjL2NvbXBvbmVudHMvc2VsZWN0L2luZGV4LnRzeCIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9zcmMvZGF0YS9sb2NhdGlvbi50cyIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9zcmMvY29tcG9uZW50cy9mb3JtL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9zcmMvY29tcG9uZW50cy9mb3JtL2hlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vYWRkcmVzcy1mb3JtLWFwcC1kZW1vLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9hZGRyZXNzLWZvcm0tYXBwLWRlbW8vLi9zcmMvYXBwLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20tY2xpZW50LnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgU2NoZWR1bGVyID0gcmVxdWlyZShcInNjaGVkdWxlclwiKSxcbiAgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIiksXG4gIFJlYWN0RE9NID0gcmVxdWlyZShcInJlYWN0LWRvbVwiKTtcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICB2YXIgdXJsID0gXCJodHRwczovL3JlYWN0LmRldi9lcnJvcnMvXCIgKyBjb2RlO1xuICBpZiAoMSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB1cmwgKz0gXCI/YXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1sxXSk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICB1cmwgKz0gXCImYXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIiArXG4gICAgY29kZSArXG4gICAgXCI7IHZpc2l0IFwiICtcbiAgICB1cmwgK1xuICAgIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIlxuICApO1xufVxuZnVuY3Rpb24gaXNWYWxpZENvbnRhaW5lcihub2RlKSB7XG4gIHJldHVybiAhKFxuICAgICFub2RlIHx8XG4gICAgKDEgIT09IG5vZGUubm9kZVR5cGUgJiYgOSAhPT0gbm9kZS5ub2RlVHlwZSAmJiAxMSAhPT0gbm9kZS5ub2RlVHlwZSlcbiAgKTtcbn1cbnZhciBSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksXG4gIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksXG4gIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO1xudmFyIFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUwgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSxcbiAgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChudWxsID09PSBtYXliZUl0ZXJhYmxlIHx8IFwib2JqZWN0XCIgIT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlKSByZXR1cm4gbnVsbDtcbiAgbWF5YmVJdGVyYWJsZSA9XG4gICAgKE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgbWF5YmVJdGVyYWJsZVtcIkBAaXRlcmF0b3JcIl07XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlID8gbWF5YmVJdGVyYWJsZSA6IG51bGw7XG59XG52YXIgUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jbGllbnQucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKG51bGwgPT0gdHlwZSkgcmV0dXJuIG51bGw7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIHJldHVybiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFXG4gICAgICA/IG51bGxcbiAgICAgIDogdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgbnVsbDtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKSByZXR1cm4gdHlwZTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuIFwiRnJhZ21lbnRcIjtcbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuIFwiUG9ydGFsXCI7XG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuIFwiUHJvZmlsZXJcIjtcbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdHJpY3RNb2RlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VcIjtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlTGlzdFwiO1xuICB9XG4gIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSlcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICByZXR1cm4gKHR5cGUuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuUHJvdmlkZXJcIjtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuICh0eXBlLl9jb250ZXh0LmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLkNvbnN1bWVyXCI7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHZhciBpbm5lclR5cGUgPSB0eXBlLnJlbmRlcjtcbiAgICAgICAgdHlwZSA9IHR5cGUuZGlzcGxheU5hbWU7XG4gICAgICAgIHR5cGUgfHxcbiAgICAgICAgICAoKHR5cGUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgXCJcIiksXG4gICAgICAgICAgKHR5cGUgPSBcIlwiICE9PSB0eXBlID8gXCJGb3J3YXJkUmVmKFwiICsgdHlwZSArIFwiKVwiIDogXCJGb3J3YXJkUmVmXCIpKTtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoaW5uZXJUeXBlID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsKSxcbiAgICAgICAgICBudWxsICE9PSBpbm5lclR5cGVcbiAgICAgICAgICAgID8gaW5uZXJUeXBlXG4gICAgICAgICAgICA6IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8IFwiTWVtb1wiXG4gICAgICAgICk7XG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgaW5uZXJUeXBlID0gdHlwZS5fcGF5bG9hZDtcbiAgICAgICAgdHlwZSA9IHR5cGUuX2luaXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKGlubmVyVHlwZSkpO1xuICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICAgIFJlYWN0Ll9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgYXNzaWduID0gT2JqZWN0LmFzc2lnbixcbiAgcHJlZml4LFxuICBzdWZmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSB7XG4gIGlmICh2b2lkIDAgPT09IHByZWZpeClcbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB4LnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgICAgcHJlZml4ID0gKG1hdGNoICYmIG1hdGNoWzFdKSB8fCBcIlwiO1xuICAgICAgc3VmZml4ID1cbiAgICAgICAgLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJcXG4gICAgYXRcIilcbiAgICAgICAgICA/IFwiICg8YW5vbnltb3VzPilcIlxuICAgICAgICAgIDogLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJAXCIpXG4gICAgICAgICAgICA/IFwiQHVua25vd246MDowXCJcbiAgICAgICAgICAgIDogXCJcIjtcbiAgICB9XG4gIHJldHVybiBcIlxcblwiICsgcHJlZml4ICsgbmFtZSArIHN1ZmZpeDtcbn1cbnZhciByZWVudHJ5ID0gITE7XG5mdW5jdGlvbiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBjb25zdHJ1Y3QpIHtcbiAgaWYgKCFmbiB8fCByZWVudHJ5KSByZXR1cm4gXCJcIjtcbiAgcmVlbnRyeSA9ICEwO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHZvaWQgMDtcbiAgdHJ5IHtcbiAgICB2YXIgUnVuSW5Sb290RnJhbWUgPSB7XG4gICAgICBEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAgICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFrZS5wcm90b3R5cGUsIFwicHJvcHNcIiwge1xuICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgUmVmbGVjdCAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sID0geDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChmbiwgW10sIEZha2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBGYWtlLmNhbGwoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCQwKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbCA9IHgkMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgkMSkge1xuICAgICAgICAgICAgICBjb250cm9sID0geCQxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKEZha2UgPSBmbigpKSAmJlxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBGYWtlLmNhdGNoICYmXG4gICAgICAgICAgICAgIEZha2UuY2F0Y2goZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoc2FtcGxlKSB7XG4gICAgICAgICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBzYW1wbGUuc3RhY2spXG4gICAgICAgICAgICByZXR1cm4gW3NhbXBsZS5zdGFjaywgY29udHJvbC5zdGFja107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdC5kaXNwbGF5TmFtZSA9XG4gICAgICBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiO1xuICAgIHZhciBuYW1lUHJvcERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LFxuICAgICAgXCJuYW1lXCJcbiAgICApO1xuICAgIG5hbWVQcm9wRGVzY3JpcHRvciAmJlxuICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSAmJlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QsXG4gICAgICAgIFwibmFtZVwiLFxuICAgICAgICB7IHZhbHVlOiBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiIH1cbiAgICAgICk7XG4gICAgdmFyIF9SdW5JblJvb3RGcmFtZSREZXRlciA9IFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCgpLFxuICAgICAgc2FtcGxlU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMF0sXG4gICAgICBjb250cm9sU3RhY2sgPSBfUnVuSW5Sb290RnJhbWUkRGV0ZXJbMV07XG4gICAgaWYgKHNhbXBsZVN0YWNrICYmIGNvbnRyb2xTdGFjaykge1xuICAgICAgdmFyIHNhbXBsZUxpbmVzID0gc2FtcGxlU3RhY2suc3BsaXQoXCJcXG5cIiksXG4gICAgICAgIGNvbnRyb2xMaW5lcyA9IGNvbnRyb2xTdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICAgIGZvciAoXG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9IFJ1bkluUm9vdEZyYW1lID0gMDtcbiAgICAgICAgUnVuSW5Sb290RnJhbWUgPCBzYW1wbGVMaW5lcy5sZW5ndGggJiZcbiAgICAgICAgIXNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXS5pbmNsdWRlcyhcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiKTtcblxuICAgICAgKVxuICAgICAgICBSdW5JblJvb3RGcmFtZSsrO1xuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPCBjb250cm9sTGluZXMubGVuZ3RoICYmXG4gICAgICAgICFjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXS5pbmNsdWRlcyhcbiAgICAgICAgICBcIkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdFwiXG4gICAgICAgICk7XG5cbiAgICAgIClcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yKys7XG4gICAgICBpZiAoXG4gICAgICAgIFJ1bkluUm9vdEZyYW1lID09PSBzYW1wbGVMaW5lcy5sZW5ndGggfHxcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID09PSBjb250cm9sTGluZXMubGVuZ3RoXG4gICAgICApXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgUnVuSW5Sb290RnJhbWUgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID0gY29udHJvbExpbmVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgMSA8PSBSdW5JblJvb3RGcmFtZSAmJlxuICAgICAgICAgIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yICYmXG4gICAgICAgICAgc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PSBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXTtcblxuICAgICAgICApXG4gICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLS07XG4gICAgICBmb3IgKFxuICAgICAgICA7XG4gICAgICAgIDEgPD0gUnVuSW5Sb290RnJhbWUgJiYgMCA8PSBuYW1lUHJvcERlc2NyaXB0b3I7XG4gICAgICAgIFJ1bkluUm9vdEZyYW1lLS0sIG5hbWVQcm9wRGVzY3JpcHRvci0tXG4gICAgICApXG4gICAgICAgIGlmIChzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09IGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdKSB7XG4gICAgICAgICAgaWYgKDEgIT09IFJ1bkluUm9vdEZyYW1lIHx8IDEgIT09IG5hbWVQcm9wRGVzY3JpcHRvcikge1xuICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIChSdW5JblJvb3RGcmFtZS0tLFxuICAgICAgICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci0tLFxuICAgICAgICAgICAgICAgIDAgPiBuYW1lUHJvcERlc2NyaXB0b3IgfHxcbiAgICAgICAgICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT1cbiAgICAgICAgICAgICAgICAgICAgY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0pXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9XG4gICAgICAgICAgICAgICAgICBcIlxcblwiICtcbiAgICAgICAgICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXS5yZXBsYWNlKFwiIGF0IG5ldyBcIiwgXCIgYXQgXCIpO1xuICAgICAgICAgICAgICAgIGZuLmRpc3BsYXlOYW1lICYmXG4gICAgICAgICAgICAgICAgICBmcmFtZS5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpICYmXG4gICAgICAgICAgICAgICAgICAoZnJhbWUgPSBmcmFtZS5yZXBsYWNlKFwiPGFub255bW91cz5cIiwgZm4uZGlzcGxheU5hbWUpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnJhbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICgxIDw9IFJ1bkluUm9vdEZyYW1lICYmIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgKHJlZW50cnkgPSAhMSksIChFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UpO1xuICB9XG4gIHJldHVybiAocHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6IFwiXCIpXG4gICAgPyBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlKVxuICAgIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGRlc2NyaWJlRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUpO1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJMYXp5XCIpO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJTdXNwZW5zZVwiKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiU3VzcGVuc2VMaXN0XCIpO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDE1OlxuICAgICAgcmV0dXJuIChmaWJlciA9IGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSwgITEpKSwgZmliZXI7XG4gICAgY2FzZSAxMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChmaWJlciA9IGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZS5yZW5kZXIsICExKSksIGZpYmVyXG4gICAgICApO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoZmliZXIgPSBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUsICEwKSksIGZpYmVyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHdvcmtJblByb2dyZXNzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBcIlwiO1xuICAgIGRvXG4gICAgICAoaW5mbyArPSBkZXNjcmliZUZpYmVyKHdvcmtJblByb2dyZXNzKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLnJldHVybik7XG4gICAgd2hpbGUgKHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gaW5mbztcbiAgfSBjYXRjaCAoeCkge1xuICAgIHJldHVybiBcIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiICsgeC5tZXNzYWdlICsgXCJcXG5cIiArIHguc3RhY2s7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpIHtcbiAgdmFyIG5vZGUgPSBmaWJlcixcbiAgICBuZWFyZXN0TW91bnRlZCA9IGZpYmVyO1xuICBpZiAoZmliZXIuYWx0ZXJuYXRlKSBmb3IgKDsgbm9kZS5yZXR1cm47ICkgbm9kZSA9IG5vZGUucmV0dXJuO1xuICBlbHNlIHtcbiAgICBmaWJlciA9IG5vZGU7XG4gICAgZG9cbiAgICAgIChub2RlID0gZmliZXIpLFxuICAgICAgICAwICE9PSAobm9kZS5mbGFncyAmIDQwOTgpICYmIChuZWFyZXN0TW91bnRlZCA9IG5vZGUucmV0dXJuKSxcbiAgICAgICAgKGZpYmVyID0gbm9kZS5yZXR1cm4pO1xuICAgIHdoaWxlIChmaWJlcik7XG4gIH1cbiAgcmV0dXJuIDMgPT09IG5vZGUudGFnID8gbmVhcmVzdE1vdW50ZWQgOiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciBzdXNwZW5zZVN0YXRlID0gZmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICBudWxsID09PSBzdXNwZW5zZVN0YXRlICYmXG4gICAgICAoKGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlKSxcbiAgICAgIG51bGwgIT09IGZpYmVyICYmIChzdXNwZW5zZVN0YXRlID0gZmliZXIubWVtb2l6ZWRTdGF0ZSkpO1xuICAgIGlmIChudWxsICE9PSBzdXNwZW5zZVN0YXRlKSByZXR1cm4gc3VzcGVuc2VTdGF0ZS5kZWh5ZHJhdGVkO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gYXNzZXJ0SXNNb3VudGVkKGZpYmVyKSB7XG4gIGlmIChnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKSAhPT0gZmliZXIpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbn1cbmZ1bmN0aW9uIGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIGlmICghYWx0ZXJuYXRlKSB7XG4gICAgYWx0ZXJuYXRlID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcik7XG4gICAgaWYgKG51bGwgPT09IGFsdGVybmF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgICByZXR1cm4gYWx0ZXJuYXRlICE9PSBmaWJlciA/IG51bGwgOiBmaWJlcjtcbiAgfVxuICBmb3IgKHZhciBhID0gZmliZXIsIGIgPSBhbHRlcm5hdGU7IDsgKSB7XG4gICAgdmFyIHBhcmVudEEgPSBhLnJldHVybjtcbiAgICBpZiAobnVsbCA9PT0gcGFyZW50QSkgYnJlYWs7XG4gICAgdmFyIHBhcmVudEIgPSBwYXJlbnRBLmFsdGVybmF0ZTtcbiAgICBpZiAobnVsbCA9PT0gcGFyZW50Qikge1xuICAgICAgYiA9IHBhcmVudEEucmV0dXJuO1xuICAgICAgaWYgKG51bGwgIT09IGIpIHtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChwYXJlbnRBLmNoaWxkID09PSBwYXJlbnRCLmNoaWxkKSB7XG4gICAgICBmb3IgKHBhcmVudEIgPSBwYXJlbnRBLmNoaWxkOyBwYXJlbnRCOyApIHtcbiAgICAgICAgaWYgKHBhcmVudEIgPT09IGEpIHJldHVybiBhc3NlcnRJc01vdW50ZWQocGFyZW50QSksIGZpYmVyO1xuICAgICAgICBpZiAocGFyZW50QiA9PT0gYikgcmV0dXJuIGFzc2VydElzTW91bnRlZChwYXJlbnRBKSwgYWx0ZXJuYXRlO1xuICAgICAgICBwYXJlbnRCID0gcGFyZW50Qi5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgICB9XG4gICAgaWYgKGEucmV0dXJuICE9PSBiLnJldHVybikgKGEgPSBwYXJlbnRBKSwgKGIgPSBwYXJlbnRCKTtcbiAgICBlbHNlIHtcbiAgICAgIGZvciAodmFyIGRpZEZpbmRDaGlsZCA9ICExLCBjaGlsZCQyID0gcGFyZW50QS5jaGlsZDsgY2hpbGQkMjsgKSB7XG4gICAgICAgIGlmIChjaGlsZCQyID09PSBhKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkJDIgPT09IGIpIHtcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZCQyID0gY2hpbGQkMi5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHtcbiAgICAgICAgZm9yIChjaGlsZCQyID0gcGFyZW50Qi5jaGlsZDsgY2hpbGQkMjsgKSB7XG4gICAgICAgICAgaWYgKGNoaWxkJDIgPT09IGEpIHtcbiAgICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgICAgYSA9IHBhcmVudEI7XG4gICAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGQkMiA9PT0gYikge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgICBiID0gcGFyZW50QjtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkJDIgPSBjaGlsZCQyLnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg5KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhLmFsdGVybmF0ZSAhPT0gYikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTApKTtcbiAgfVxuICBpZiAoMyAhPT0gYS50YWcpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gIHJldHVybiBhLnN0YXRlTm9kZS5jdXJyZW50ID09PSBhID8gZmliZXIgOiBhbHRlcm5hdGU7XG59XG5mdW5jdGlvbiBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwobm9kZSkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgMjYgPT09IHRhZyB8fCAyNyA9PT0gdGFnIHx8IDYgPT09IHRhZykgcmV0dXJuIG5vZGU7XG4gIGZvciAobm9kZSA9IG5vZGUuY2hpbGQ7IG51bGwgIT09IG5vZGU7ICkge1xuICAgIHRhZyA9IGZpbmRDdXJyZW50SG9zdEZpYmVySW1wbChub2RlKTtcbiAgICBpZiAobnVsbCAhPT0gdGFnKSByZXR1cm4gdGFnO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5LFxuICBSZWFjdERPTVNoYXJlZEludGVybmFscyA9XG4gICAgUmVhY3RET00uX19ET01fSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFLFxuICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0ID0ge1xuICAgIHBlbmRpbmc6ICExLFxuICAgIGRhdGE6IG51bGwsXG4gICAgbWV0aG9kOiBudWxsLFxuICAgIGFjdGlvbjogbnVsbFxuICB9LFxuICB2YWx1ZVN0YWNrID0gW10sXG4gIGluZGV4ID0gLTE7XG5mdW5jdGlvbiBjcmVhdGVDdXJzb3IoZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB7IGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZSB9O1xufVxuZnVuY3Rpb24gcG9wKGN1cnNvcikge1xuICAwID4gaW5kZXggfHxcbiAgICAoKGN1cnNvci5jdXJyZW50ID0gdmFsdWVTdGFja1tpbmRleF0pLCAodmFsdWVTdGFja1tpbmRleF0gPSBudWxsKSwgaW5kZXgtLSk7XG59XG5mdW5jdGlvbiBwdXNoKGN1cnNvciwgdmFsdWUpIHtcbiAgaW5kZXgrKztcbiAgdmFsdWVTdGFja1tpbmRleF0gPSBjdXJzb3IuY3VycmVudDtcbiAgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZTtcbn1cbnZhciBjb250ZXh0U3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICByb290SW5zdGFuY2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGFpbmVyKGZpYmVyLCBuZXh0Um9vdEluc3RhbmNlKSB7XG4gIHB1c2gocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UpO1xuICBwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBudWxsKTtcbiAgZmliZXIgPSBuZXh0Um9vdEluc3RhbmNlLm5vZGVUeXBlO1xuICBzd2l0Y2ggKGZpYmVyKSB7XG4gICAgY2FzZSA5OlxuICAgIGNhc2UgMTE6XG4gICAgICBuZXh0Um9vdEluc3RhbmNlID0gKG5leHRSb290SW5zdGFuY2UgPSBuZXh0Um9vdEluc3RhbmNlLmRvY3VtZW50RWxlbWVudClcbiAgICAgICAgPyAobmV4dFJvb3RJbnN0YW5jZSA9IG5leHRSb290SW5zdGFuY2UubmFtZXNwYWNlVVJJKVxuICAgICAgICAgID8gZ2V0T3duSG9zdENvbnRleHQobmV4dFJvb3RJbnN0YW5jZSlcbiAgICAgICAgICA6IDBcbiAgICAgICAgOiAwO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgKChmaWJlciA9IDggPT09IGZpYmVyID8gbmV4dFJvb3RJbnN0YW5jZS5wYXJlbnROb2RlIDogbmV4dFJvb3RJbnN0YW5jZSksXG4gICAgICAgIChuZXh0Um9vdEluc3RhbmNlID0gZmliZXIudGFnTmFtZSksXG4gICAgICAgIChmaWJlciA9IGZpYmVyLm5hbWVzcGFjZVVSSSkpXG4gICAgICApXG4gICAgICAgIChmaWJlciA9IGdldE93bkhvc3RDb250ZXh0KGZpYmVyKSksXG4gICAgICAgICAgKG5leHRSb290SW5zdGFuY2UgPSBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChmaWJlciwgbmV4dFJvb3RJbnN0YW5jZSkpO1xuICAgICAgZWxzZVxuICAgICAgICBzd2l0Y2ggKG5leHRSb290SW5zdGFuY2UpIHtcbiAgICAgICAgICBjYXNlIFwic3ZnXCI6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuZXh0Um9vdEluc3RhbmNlID0gMDtcbiAgICAgICAgfVxuICB9XG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbmV4dFJvb3RJbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBwb3BIb3N0Q29udGFpbmVyKCkge1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yKTtcbiAgcG9wKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yKTtcbn1cbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGV4dChmaWJlcikge1xuICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmIHB1c2goaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciwgZmliZXIpO1xuICB2YXIgY29udGV4dCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QoY29udGV4dCwgZmliZXIudHlwZSk7XG4gIGNvbnRleHQgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgIChwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciksXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xufVxuZnVuY3Rpb24gcG9wSG9zdENvbnRleHQoZmliZXIpIHtcbiAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IuY3VycmVudCA9PT0gZmliZXIgJiZcbiAgICAocG9wKGNvbnRleHRTdGFja0N1cnNvciksIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvcikpO1xuICBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQgPT09IGZpYmVyICYmXG4gICAgKHBvcChob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yKSxcbiAgICAoSG9zdFRyYW5zaXRpb25Db250ZXh0Ll9jdXJyZW50VmFsdWUgPSBzaGFyZWROb3RQZW5kaW5nT2JqZWN0KSk7XG59XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICBzY2hlZHVsZUNhbGxiYWNrJDMgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgY2FuY2VsQ2FsbGJhY2skMSA9IFNjaGVkdWxlci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxcbiAgc2hvdWxkWWllbGQgPSBTY2hlZHVsZXIudW5zdGFibGVfc2hvdWxkWWllbGQsXG4gIHJlcXVlc3RQYWludCA9IFNjaGVkdWxlci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsXG4gIG5vdyA9IFNjaGVkdWxlci51bnN0YWJsZV9ub3csXG4gIGdldEN1cnJlbnRQcmlvcml0eUxldmVsID0gU2NoZWR1bGVyLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFxuICBJbW1lZGlhdGVQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxcbiAgVXNlckJsb2NraW5nUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG4gIE5vcm1hbFByaW9yaXR5JDEgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIExvd1ByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFxuICBJZGxlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFxuICBsb2ckMSA9IFNjaGVkdWxlci5sb2csXG4gIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlLFxuICByZW5kZXJlcklEID0gbnVsbCxcbiAgaW5qZWN0ZWRIb29rID0gbnVsbDtcbmZ1bmN0aW9uIG9uQ29tbWl0Um9vdChyb290KSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJSb290KVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QoXG4gICAgICAgIHJlbmRlcmVySUQsXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgMTI4ID09PSAocm9vdC5jdXJyZW50LmZsYWdzICYgMTI4KVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG59XG5mdW5jdGlvbiBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyhuZXdJc1N0cmljdE1vZGUpIHtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbG9nJDEgJiYgdW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUobmV3SXNTdHJpY3RNb2RlKTtcbiAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2suc2V0U3RyaWN0TW9kZSlcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLnNldFN0cmljdE1vZGUocmVuZGVyZXJJRCwgbmV3SXNTdHJpY3RNb2RlKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG59XG52YXIgY2x6MzIgPSBNYXRoLmNsejMyID8gTWF0aC5jbHozMiA6IGNsejMyRmFsbGJhY2ssXG4gIGxvZyA9IE1hdGgubG9nLFxuICBMTjIgPSBNYXRoLkxOMjtcbmZ1bmN0aW9uIGNsejMyRmFsbGJhY2soeCkge1xuICB4ID4+Pj0gMDtcbiAgcmV0dXJuIDAgPT09IHggPyAzMiA6ICgzMSAtICgobG9nKHgpIC8gTE4yKSB8IDApKSB8IDA7XG59XG52YXIgbmV4dFRyYW5zaXRpb25MYW5lID0gMTI4LFxuICBuZXh0UmV0cnlMYW5lID0gNDE5NDMwNDtcbmZ1bmN0aW9uIGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGxhbmVzKSB7XG4gIHZhciBwZW5kaW5nU3luY0xhbmVzID0gbGFuZXMgJiA0MjtcbiAgaWYgKDAgIT09IHBlbmRpbmdTeW5jTGFuZXMpIHJldHVybiBwZW5kaW5nU3luY0xhbmVzO1xuICBzd2l0Y2ggKGxhbmVzICYgLWxhbmVzKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIDQ7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIDg7XG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiAxNjtcbiAgICBjYXNlIDMyOlxuICAgICAgcmV0dXJuIDMyO1xuICAgIGNhc2UgNjQ6XG4gICAgICByZXR1cm4gNjQ7XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gbGFuZXMgJiA0MTk0MTc2O1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIGxhbmVzICYgNjI5MTQ1NjA7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICAgIHJldHVybiA2NzEwODg2NDtcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICAgIHJldHVybiAxMzQyMTc3Mjg7XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICByZXR1cm4gMjY4NDM1NDU2O1xuICAgIGNhc2UgNTM2ODcwOTEyOlxuICAgICAgcmV0dXJuIDUzNjg3MDkxMjtcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGxhbmVzO1xuICB9XG59XG5mdW5jdGlvbiBnZXROZXh0TGFuZXMocm9vdCwgd2lwTGFuZXMpIHtcbiAgdmFyIHBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSByZXR1cm4gMDtcbiAgdmFyIG5leHRMYW5lcyA9IDAsXG4gICAgc3VzcGVuZGVkTGFuZXMgPSByb290LnN1c3BlbmRlZExhbmVzLFxuICAgIHBpbmdlZExhbmVzID0gcm9vdC5waW5nZWRMYW5lcyxcbiAgICB3YXJtTGFuZXMgPSByb290Lndhcm1MYW5lcztcbiAgcm9vdCA9IDAgIT09IHJvb3QuZmluaXNoZWRMYW5lcztcbiAgdmFyIG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiAxMzQyMTc3Mjc7XG4gIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICA/ICgocGVuZGluZ0xhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBwZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGVuZGluZ0xhbmVzKSlcbiAgICAgICAgOiAoKHBpbmdlZExhbmVzICY9IG5vbklkbGVQZW5kaW5nTGFuZXMpLFxuICAgICAgICAgIDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgICA6IHJvb3QgfHxcbiAgICAgICAgICAgICAgKCh3YXJtTGFuZXMgPSBub25JZGxlUGVuZGluZ0xhbmVzICYgfndhcm1MYW5lcyksXG4gICAgICAgICAgICAgIDAgIT09IHdhcm1MYW5lcyAmJlxuICAgICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyh3YXJtTGFuZXMpKSkpKVxuICAgIDogKChub25JZGxlUGVuZGluZ0xhbmVzID0gcGVuZGluZ0xhbmVzICYgfnN1c3BlbmRlZExhbmVzKSxcbiAgICAgIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMobm9uSWRsZVBlbmRpbmdMYW5lcykpXG4gICAgICAgIDogMCAhPT0gcGluZ2VkTGFuZXNcbiAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgOiByb290IHx8XG4gICAgICAgICAgICAoKHdhcm1MYW5lcyA9IHBlbmRpbmdMYW5lcyAmIH53YXJtTGFuZXMpLFxuICAgICAgICAgICAgMCAhPT0gd2FybUxhbmVzICYmXG4gICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyh3YXJtTGFuZXMpKSkpO1xuICByZXR1cm4gMCA9PT0gbmV4dExhbmVzXG4gICAgPyAwXG4gICAgOiAwICE9PSB3aXBMYW5lcyAmJlxuICAgICAgICB3aXBMYW5lcyAhPT0gbmV4dExhbmVzICYmXG4gICAgICAgIDAgPT09ICh3aXBMYW5lcyAmIHN1c3BlbmRlZExhbmVzKSAmJlxuICAgICAgICAoKHN1c3BlbmRlZExhbmVzID0gbmV4dExhbmVzICYgLW5leHRMYW5lcyksXG4gICAgICAgICh3YXJtTGFuZXMgPSB3aXBMYW5lcyAmIC13aXBMYW5lcyksXG4gICAgICAgIHN1c3BlbmRlZExhbmVzID49IHdhcm1MYW5lcyB8fFxuICAgICAgICAgICgzMiA9PT0gc3VzcGVuZGVkTGFuZXMgJiYgMCAhPT0gKHdhcm1MYW5lcyAmIDQxOTQxNzYpKSlcbiAgICAgID8gd2lwTGFuZXNcbiAgICAgIDogbmV4dExhbmVzO1xufVxuZnVuY3Rpb24gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCByZW5kZXJMYW5lcykge1xuICByZXR1cm4gKFxuICAgIDAgPT09XG4gICAgKHJvb3QucGVuZGluZ0xhbmVzICZcbiAgICAgIH4ocm9vdC5zdXNwZW5kZWRMYW5lcyAmIH5yb290LnBpbmdlZExhbmVzKSAmXG4gICAgICByZW5kZXJMYW5lcylcbiAgKTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVFeHBpcmF0aW9uVGltZShsYW5lLCBjdXJyZW50VGltZSkge1xuICBzd2l0Y2ggKGxhbmUpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgNDpcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyAyNTA7XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDMyOlxuICAgIGNhc2UgNjQ6XG4gICAgY2FzZSAxMjg6XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyA1ZTM7XG4gICAgY2FzZSA0MTk0MzA0OlxuICAgIGNhc2UgODM4ODYwODpcbiAgICBjYXNlIDE2Nzc3MjE2OlxuICAgIGNhc2UgMzM1NTQ0MzI6XG4gICAgICByZXR1cm4gLTE7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICBjYXNlIDUzNjg3MDkxMjpcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gLTE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAtMTtcbiAgfVxufVxuZnVuY3Rpb24gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFRyYW5zaXRpb25MYW5lO1xuICBuZXh0VHJhbnNpdGlvbkxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0VHJhbnNpdGlvbkxhbmUgJiA0MTk0MTc2KSAmJiAobmV4dFRyYW5zaXRpb25MYW5lID0gMTI4KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjbGFpbU5leHRSZXRyeUxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFJldHJ5TGFuZTtcbiAgbmV4dFJldHJ5TGFuZSA8PD0gMTtcbiAgMCA9PT0gKG5leHRSZXRyeUxhbmUgJiA2MjkxNDU2MCkgJiYgKG5leHRSZXRyeUxhbmUgPSA0MTk0MzA0KTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjcmVhdGVMYW5lTWFwKGluaXRpYWwpIHtcbiAgZm9yICh2YXIgbGFuZU1hcCA9IFtdLCBpID0gMDsgMzEgPiBpOyBpKyspIGxhbmVNYXAucHVzaChpbml0aWFsKTtcbiAgcmV0dXJuIGxhbmVNYXA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFVwZGF0ZWQkMShyb290LCB1cGRhdGVMYW5lKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHVwZGF0ZUxhbmU7XG4gIDI2ODQzNTQ1NiAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICgocm9vdC5zdXNwZW5kZWRMYW5lcyA9IDApLCAocm9vdC5waW5nZWRMYW5lcyA9IDApLCAocm9vdC53YXJtTGFuZXMgPSAwKSk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEZpbmlzaGVkKFxuICByb290LFxuICBmaW5pc2hlZExhbmVzLFxuICByZW1haW5pbmdMYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIHVwZGF0ZWRMYW5lcyxcbiAgc3VzcGVuZGVkUmV0cnlMYW5lc1xuKSB7XG4gIHZhciBwcmV2aW91c2x5UGVuZGluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIHJvb3QucGVuZGluZ0xhbmVzID0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwO1xuICByb290LnBpbmdlZExhbmVzID0gMDtcbiAgcm9vdC53YXJtTGFuZXMgPSAwO1xuICByb290LmV4cGlyZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyAmPSByZW1haW5pbmdMYW5lcztcbiAgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyID0gMDtcbiAgdmFyIGVudGFuZ2xlbWVudHMgPSByb290LmVudGFuZ2xlbWVudHMsXG4gICAgZXhwaXJhdGlvblRpbWVzID0gcm9vdC5leHBpcmF0aW9uVGltZXMsXG4gICAgaGlkZGVuVXBkYXRlcyA9IHJvb3QuaGlkZGVuVXBkYXRlcztcbiAgZm9yIChcbiAgICByZW1haW5pbmdMYW5lcyA9IHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+cmVtYWluaW5nTGFuZXM7XG4gICAgMCA8IHJlbWFpbmluZ0xhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQ3ID0gMzEgLSBjbHozMihyZW1haW5pbmdMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ3O1xuICAgIGVudGFuZ2xlbWVudHNbaW5kZXgkN10gPSAwO1xuICAgIGV4cGlyYXRpb25UaW1lc1tpbmRleCQ3XSA9IC0xO1xuICAgIHZhciBoaWRkZW5VcGRhdGVzRm9yTGFuZSA9IGhpZGRlblVwZGF0ZXNbaW5kZXgkN107XG4gICAgaWYgKG51bGwgIT09IGhpZGRlblVwZGF0ZXNGb3JMYW5lKVxuICAgICAgZm9yIChcbiAgICAgICAgaGlkZGVuVXBkYXRlc1tpbmRleCQ3XSA9IG51bGwsIGluZGV4JDcgPSAwO1xuICAgICAgICBpbmRleCQ3IDwgaGlkZGVuVXBkYXRlc0ZvckxhbmUubGVuZ3RoO1xuICAgICAgICBpbmRleCQ3KytcbiAgICAgICkge1xuICAgICAgICB2YXIgdXBkYXRlID0gaGlkZGVuVXBkYXRlc0ZvckxhbmVbaW5kZXgkN107XG4gICAgICAgIG51bGwgIT09IHVwZGF0ZSAmJiAodXBkYXRlLmxhbmUgJj0gLTUzNjg3MDkxMyk7XG4gICAgICB9XG4gICAgcmVtYWluaW5nTGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgMCAhPT0gc3Bhd25lZExhbmUgJiYgbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIDApO1xuICAwICE9PSBzdXNwZW5kZWRSZXRyeUxhbmVzICYmXG4gICAgMCA9PT0gdXBkYXRlZExhbmVzICYmXG4gICAgMCAhPT0gcm9vdC50YWcgJiZcbiAgICAocm9vdC5zdXNwZW5kZWRMYW5lcyB8PVxuICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lcyAmIH4ocHJldmlvdXNseVBlbmRpbmdMYW5lcyAmIH5maW5pc2hlZExhbmVzKSk7XG59XG5mdW5jdGlvbiBtYXJrU3Bhd25lZERlZmVycmVkTGFuZShyb290LCBzcGF3bmVkTGFuZSwgZW50YW5nbGVkTGFuZXMpIHtcbiAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gc3Bhd25lZExhbmU7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgJj0gfnNwYXduZWRMYW5lO1xuICB2YXIgc3Bhd25lZExhbmVJbmRleCA9IDMxIC0gY2x6MzIoc3Bhd25lZExhbmUpO1xuICByb290LmVudGFuZ2xlZExhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gPVxuICAgIHJvb3QuZW50YW5nbGVtZW50c1tzcGF3bmVkTGFuZUluZGV4XSB8XG4gICAgMTA3Mzc0MTgyNCB8XG4gICAgKGVudGFuZ2xlZExhbmVzICYgNDE5NDIxOCk7XG59XG5mdW5jdGlvbiBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBlbnRhbmdsZWRMYW5lcykge1xuICB2YXIgcm9vdEVudGFuZ2xlZExhbmVzID0gKHJvb3QuZW50YW5nbGVkTGFuZXMgfD0gZW50YW5nbGVkTGFuZXMpO1xuICBmb3IgKHJvb3QgPSByb290LmVudGFuZ2xlbWVudHM7IHJvb3RFbnRhbmdsZWRMYW5lczsgKSB7XG4gICAgdmFyIGluZGV4JDggPSAzMSAtIGNsejMyKHJvb3RFbnRhbmdsZWRMYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ4O1xuICAgIChsYW5lICYgZW50YW5nbGVkTGFuZXMpIHwgKHJvb3RbaW5kZXgkOF0gJiBlbnRhbmdsZWRMYW5lcykgJiZcbiAgICAgIChyb290W2luZGV4JDhdIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgICByb290RW50YW5nbGVkTGFuZXMgJj0gfmxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGxhbmVzVG9FdmVudFByaW9yaXR5KGxhbmVzKSB7XG4gIGxhbmVzICY9IC1sYW5lcztcbiAgcmV0dXJuIDIgPCBsYW5lc1xuICAgID8gOCA8IGxhbmVzXG4gICAgICA/IDAgIT09IChsYW5lcyAmIDEzNDIxNzcyNylcbiAgICAgICAgPyAzMlxuICAgICAgICA6IDI2ODQzNTQ1NlxuICAgICAgOiA4XG4gICAgOiAyO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCkge1xuICB2YXIgdXBkYXRlUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICBpZiAoMCAhPT0gdXBkYXRlUHJpb3JpdHkpIHJldHVybiB1cGRhdGVQcmlvcml0eTtcbiAgdXBkYXRlUHJpb3JpdHkgPSB3aW5kb3cuZXZlbnQ7XG4gIHJldHVybiB2b2lkIDAgPT09IHVwZGF0ZVByaW9yaXR5ID8gMzIgOiBnZXRFdmVudFByaW9yaXR5KHVwZGF0ZVByaW9yaXR5LnR5cGUpO1xufVxuZnVuY3Rpb24gcnVuV2l0aFByaW9yaXR5KHByaW9yaXR5LCBmbikge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgcmV0dXJuIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJpb3JpdHkpLCBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5O1xuICB9XG59XG52YXIgcmFuZG9tS2V5ID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksXG4gIGludGVybmFsSW5zdGFuY2VLZXkgPSBcIl9fcmVhY3RGaWJlciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxQcm9wc0tleSA9IFwiX19yZWFjdFByb3BzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5ID0gXCJfX3JlYWN0Q29udGFpbmVyJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXkgPSBcIl9fcmVhY3RFdmVudHMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5ID0gXCJfX3JlYWN0TGlzdGVuZXJzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleSA9IFwiX19yZWFjdEhhbmRsZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXkgPSBcIl9fcmVhY3RSZXNvdXJjZXMkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsSG9pc3RhYmxlTWFya2VyID0gXCJfX3JlYWN0TWFya2VyJFwiICsgcmFuZG9tS2V5O1xuZnVuY3Rpb24gZGV0YWNoRGVsZXRlZEluc3RhbmNlKG5vZGUpIHtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsUHJvcHNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5XTtcbn1cbmZ1bmN0aW9uIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpIHtcbiAgdmFyIHRhcmdldEluc3QgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBpZiAodGFyZ2V0SW5zdCkgcmV0dXJuIHRhcmdldEluc3Q7XG4gIGZvciAodmFyIHBhcmVudE5vZGUgPSB0YXJnZXROb2RlLnBhcmVudE5vZGU7IHBhcmVudE5vZGU7ICkge1xuICAgIGlmIChcbiAgICAgICh0YXJnZXRJbnN0ID1cbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSB8fFxuICAgICAgICBwYXJlbnROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKVxuICAgICkge1xuICAgICAgcGFyZW50Tm9kZSA9IHRhcmdldEluc3QuYWx0ZXJuYXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSB0YXJnZXRJbnN0LmNoaWxkIHx8XG4gICAgICAgIChudWxsICE9PSBwYXJlbnROb2RlICYmIG51bGwgIT09IHBhcmVudE5vZGUuY2hpbGQpXG4gICAgICApXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgICAgbnVsbCAhPT0gdGFyZ2V0Tm9kZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoKHBhcmVudE5vZGUgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSkgcmV0dXJuIHBhcmVudE5vZGU7XG4gICAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICAgIH1cbiAgICB0YXJnZXROb2RlID0gcGFyZW50Tm9kZTtcbiAgICBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIGlmIChcbiAgICAobm9kZSA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHwgbm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgKSB7XG4gICAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICAgIGlmIChcbiAgICAgIDUgPT09IHRhZyB8fFxuICAgICAgNiA9PT0gdGFnIHx8XG4gICAgICAxMyA9PT0gdGFnIHx8XG4gICAgICAyNiA9PT0gdGFnIHx8XG4gICAgICAyNyA9PT0gdGFnIHx8XG4gICAgICAzID09PSB0YWdcbiAgICApXG4gICAgICByZXR1cm4gbm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkge1xuICB2YXIgdGFnID0gaW5zdC50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgMjYgPT09IHRhZyB8fCAyNyA9PT0gdGFnIHx8IDYgPT09IHRhZykgcmV0dXJuIGluc3Quc3RhdGVOb2RlO1xuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMzKSk7XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZXNGcm9tUm9vdChyb290KSB7XG4gIHZhciByZXNvdXJjZXMgPSByb290W2ludGVybmFsUm9vdE5vZGVSZXNvdXJjZXNLZXldO1xuICByZXNvdXJjZXMgfHxcbiAgICAocmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XSA9XG4gICAgICB7IGhvaXN0YWJsZVN0eWxlczogbmV3IE1hcCgpLCBob2lzdGFibGVTY3JpcHRzOiBuZXcgTWFwKCkgfSk7XG4gIHJldHVybiByZXNvdXJjZXM7XG59XG5mdW5jdGlvbiBtYXJrTm9kZUFzSG9pc3RhYmxlKG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gPSAhMDtcbn1cbnZhciBhbGxOYXRpdmVFdmVudHMgPSBuZXcgU2V0KCksXG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMgPSB7fTtcbmZ1bmN0aW9uIHJlZ2lzdGVyVHdvUGhhc2VFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpIHtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpO1xuICByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUgKyBcIkNhcHR1cmVcIiwgZGVwZW5kZW5jaWVzKTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBkZXBlbmRlbmNpZXM7XG4gIGZvciAoXG4gICAgcmVnaXN0cmF0aW9uTmFtZSA9IDA7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7XG4gICAgcmVnaXN0cmF0aW9uTmFtZSsrXG4gIClcbiAgICBhbGxOYXRpdmVFdmVudHMuYWRkKGRlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSk7XG59XG52YXIgY2FuVXNlRE9NID0gIShcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93IHx8XG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudCB8fFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudFxuICApLFxuICBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IFJlZ0V4cChcbiAgICBcIl5bOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRF1bOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRFxcXFwtLjAtOVxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwXSokXCJcbiAgKSxcbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9LFxuICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGlzQXR0cmlidXRlTmFtZVNhZmUoYXR0cmlidXRlTmFtZSkge1xuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKVxuICAgIHJldHVybiAhMDtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpIHJldHVybiAhMTtcbiAgaWYgKFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYLnRlc3QoYXR0cmlidXRlTmFtZSkpXG4gICAgcmV0dXJuICh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSAhMCk7XG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSAhMDtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKGlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkpXG4gICAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBlbHNlIHtcbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgdmFyIHByZWZpeCQxMCA9IG5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCA1KTtcbiAgICAgICAgICBpZiAoXCJkYXRhLVwiICE9PSBwcmVmaXgkMTAgJiYgXCJhcmlhLVwiICE9PSBwcmVmaXgkMTApIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBcIlwiICsgdmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUobm9kZSwgbmFtZXNwYWNlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICBlbHNlIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgbmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzQ2hlY2thYmxlKGVsZW0pIHtcbiAgdmFyIHR5cGUgPSBlbGVtLnR5cGU7XG4gIHJldHVybiAoXG4gICAgKGVsZW0gPSBlbGVtLm5vZGVOYW1lKSAmJlxuICAgIFwiaW5wdXRcIiA9PT0gZWxlbS50b0xvd2VyQ2FzZSgpICYmXG4gICAgKFwiY2hlY2tib3hcIiA9PT0gdHlwZSB8fCBcInJhZGlvXCIgPT09IHR5cGUpXG4gICk7XG59XG5mdW5jdGlvbiB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpIHtcbiAgdmFyIHZhbHVlRmllbGQgPSBpc0NoZWNrYWJsZShub2RlKSA/IFwiY2hlY2tlZFwiIDogXCJ2YWx1ZVwiLFxuICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgbm9kZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsXG4gICAgICB2YWx1ZUZpZWxkXG4gICAgKSxcbiAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgaWYgKFxuICAgICFub2RlLmhhc093blByb3BlcnR5KHZhbHVlRmllbGQpICYmXG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGRlc2NyaXB0b3IgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkZXNjcmlwdG9yLmdldCAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGRlc2NyaXB0b3Iuc2V0XG4gICkge1xuICAgIHZhciBnZXQgPSBkZXNjcmlwdG9yLmdldCxcbiAgICAgIHNldCA9IGRlc2NyaXB0b3Iuc2V0O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXQuY2FsbCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgdmFsdWU7XG4gICAgICAgIHNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgICAgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBcIlwiICsgdmFsdWU7XG4gICAgICB9LFxuICAgICAgc3RvcFRyYWNraW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5vZGUuX3ZhbHVlVHJhY2tlciA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBub2RlW3ZhbHVlRmllbGRdO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIHRyYWNrKG5vZGUpIHtcbiAgbm9kZS5fdmFsdWVUcmFja2VyIHx8IChub2RlLl92YWx1ZVRyYWNrZXIgPSB0cmFja1ZhbHVlT25Ob2RlKG5vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG5vZGUpIHtcbiAgaWYgKCFub2RlKSByZXR1cm4gITE7XG4gIHZhciB0cmFja2VyID0gbm9kZS5fdmFsdWVUcmFja2VyO1xuICBpZiAoIXRyYWNrZXIpIHJldHVybiAhMDtcbiAgdmFyIGxhc3RWYWx1ZSA9IHRyYWNrZXIuZ2V0VmFsdWUoKTtcbiAgdmFyIHZhbHVlID0gXCJcIjtcbiAgbm9kZSAmJlxuICAgICh2YWx1ZSA9IGlzQ2hlY2thYmxlKG5vZGUpXG4gICAgICA/IG5vZGUuY2hlY2tlZFxuICAgICAgICA/IFwidHJ1ZVwiXG4gICAgICAgIDogXCJmYWxzZVwiXG4gICAgICA6IG5vZGUudmFsdWUpO1xuICBub2RlID0gdmFsdWU7XG4gIHJldHVybiBub2RlICE9PSBsYXN0VmFsdWUgPyAodHJhY2tlci5zZXRWYWx1ZShub2RlKSwgITApIDogITE7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykge1xuICBkb2MgPSBkb2MgfHwgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBkb2N1bWVudCA/IGRvY3VtZW50IDogdm9pZCAwKTtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBkb2MpIHJldHVybiBudWxsO1xuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxudmFyIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCA9IC9bXFxuXCJcXFxcXS9nO1xuZnVuY3Rpb24gZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlcyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShcbiAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzUmVnZXgsXG4gICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICByZXR1cm4gXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSArIFwiIFwiO1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUlucHV0KFxuICBlbGVtZW50LFxuICB2YWx1ZSxcbiAgZGVmYXVsdFZhbHVlLFxuICBsYXN0RGVmYXVsdFZhbHVlLFxuICBjaGVja2VkLFxuICBkZWZhdWx0Q2hlY2tlZCxcbiAgdHlwZSxcbiAgbmFtZVxuKSB7XG4gIGVsZW1lbnQubmFtZSA9IFwiXCI7XG4gIG51bGwgIT0gdHlwZSAmJlxuICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gIFwic3ltYm9sXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgdHlwZVxuICAgID8gKGVsZW1lbnQudHlwZSA9IHR5cGUpXG4gICAgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIik7XG4gIGlmIChudWxsICE9IHZhbHVlKVxuICAgIGlmIChcIm51bWJlclwiID09PSB0eXBlKSB7XG4gICAgICBpZiAoKDAgPT09IHZhbHVlICYmIFwiXCIgPT09IGVsZW1lbnQudmFsdWUpIHx8IGVsZW1lbnQudmFsdWUgIT0gdmFsdWUpXG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlXG4gICAgICBlbGVtZW50LnZhbHVlICE9PSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkgJiZcbiAgICAgICAgKGVsZW1lbnQudmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpO1xuICBlbHNlXG4gICAgKFwic3VibWl0XCIgIT09IHR5cGUgJiYgXCJyZXNldFwiICE9PSB0eXBlKSB8fCBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICBudWxsICE9IHZhbHVlXG4gICAgPyBzZXREZWZhdWx0VmFsdWUoZWxlbWVudCwgdHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpXG4gICAgOiBudWxsICE9IGRlZmF1bHRWYWx1ZVxuICAgICAgPyBzZXREZWZhdWx0VmFsdWUoZWxlbWVudCwgdHlwZSwgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpKVxuICAgICAgOiBudWxsICE9IGxhc3REZWZhdWx0VmFsdWUgJiYgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcbiAgbnVsbCA9PSBjaGVja2VkICYmXG4gICAgbnVsbCAhPSBkZWZhdWx0Q2hlY2tlZCAmJlxuICAgIChlbGVtZW50LmRlZmF1bHRDaGVja2VkID0gISFkZWZhdWx0Q2hlY2tlZCk7XG4gIG51bGwgIT0gY2hlY2tlZCAmJlxuICAgIChlbGVtZW50LmNoZWNrZWQgPVxuICAgICAgY2hlY2tlZCAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjaGVja2VkICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjaGVja2VkKTtcbiAgbnVsbCAhPSBuYW1lICYmXG4gIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgXCJib29sZWFuXCIgIT09IHR5cGVvZiBuYW1lXG4gICAgPyAoZWxlbWVudC5uYW1lID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUobmFtZSkpXG4gICAgOiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcIm5hbWVcIik7XG59XG5mdW5jdGlvbiBpbml0SW5wdXQoXG4gIGVsZW1lbnQsXG4gIHZhbHVlLFxuICBkZWZhdWx0VmFsdWUsXG4gIGNoZWNrZWQsXG4gIGRlZmF1bHRDaGVja2VkLFxuICB0eXBlLFxuICBuYW1lLFxuICBpc0h5ZHJhdGluZ1xuKSB7XG4gIG51bGwgIT0gdHlwZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIChlbGVtZW50LnR5cGUgPSB0eXBlKTtcbiAgaWYgKG51bGwgIT0gdmFsdWUgfHwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpIHtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICAoXCJzdWJtaXRcIiAhPT0gdHlwZSAmJiBcInJlc2V0XCIgIT09IHR5cGUpIHx8XG4gICAgICAgICh2b2lkIDAgIT09IHZhbHVlICYmIG51bGwgIT09IHZhbHVlKVxuICAgICAgKVxuICAgIClcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0VmFsdWUgPVxuICAgICAgbnVsbCAhPSBkZWZhdWx0VmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpIDogXCJcIjtcbiAgICB2YWx1ZSA9IG51bGwgIT0gdmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkgOiBkZWZhdWx0VmFsdWU7XG4gICAgaXNIeWRyYXRpbmcgfHwgdmFsdWUgPT09IGVsZW1lbnQudmFsdWUgfHwgKGVsZW1lbnQudmFsdWUgPSB2YWx1ZSk7XG4gICAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBjaGVja2VkID0gbnVsbCAhPSBjaGVja2VkID8gY2hlY2tlZCA6IGRlZmF1bHRDaGVja2VkO1xuICBjaGVja2VkID1cbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjaGVja2VkICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjaGVja2VkICYmICEhY2hlY2tlZDtcbiAgZWxlbWVudC5jaGVja2VkID0gaXNIeWRyYXRpbmcgPyBlbGVtZW50LmNoZWNrZWQgOiAhIWNoZWNrZWQ7XG4gIGVsZW1lbnQuZGVmYXVsdENoZWNrZWQgPSAhIWNoZWNrZWQ7XG4gIG51bGwgIT0gbmFtZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIChlbGVtZW50Lm5hbWUgPSBuYW1lKTtcbn1cbmZ1bmN0aW9uIHNldERlZmF1bHRWYWx1ZShub2RlLCB0eXBlLCB2YWx1ZSkge1xuICAoXCJudW1iZXJcIiA9PT0gdHlwZSAmJiBnZXRBY3RpdmVFbGVtZW50KG5vZGUub3duZXJEb2N1bWVudCkgPT09IG5vZGUpIHx8XG4gICAgbm9kZS5kZWZhdWx0VmFsdWUgPT09IFwiXCIgKyB2YWx1ZSB8fFxuICAgIChub2RlLmRlZmF1bHRWYWx1ZSA9IFwiXCIgKyB2YWx1ZSk7XG59XG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKG5vZGUsIG11bHRpcGxlLCBwcm9wVmFsdWUsIHNldERlZmF1bHRTZWxlY3RlZCkge1xuICBub2RlID0gbm9kZS5vcHRpb25zO1xuICBpZiAobXVsdGlwbGUpIHtcbiAgICBtdWx0aXBsZSA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKVxuICAgICAgbXVsdGlwbGVbXCIkXCIgKyBwcm9wVmFsdWVbaV1dID0gITA7XG4gICAgZm9yIChwcm9wVmFsdWUgPSAwOyBwcm9wVmFsdWUgPCBub2RlLmxlbmd0aDsgcHJvcFZhbHVlKyspXG4gICAgICAoaSA9IG11bHRpcGxlLmhhc093blByb3BlcnR5KFwiJFwiICsgbm9kZVtwcm9wVmFsdWVdLnZhbHVlKSksXG4gICAgICAgIG5vZGVbcHJvcFZhbHVlXS5zZWxlY3RlZCAhPT0gaSAmJiAobm9kZVtwcm9wVmFsdWVdLnNlbGVjdGVkID0gaSksXG4gICAgICAgIGkgJiYgc2V0RGVmYXVsdFNlbGVjdGVkICYmIChub2RlW3Byb3BWYWx1ZV0uZGVmYXVsdFNlbGVjdGVkID0gITApO1xuICB9IGVsc2Uge1xuICAgIHByb3BWYWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHByb3BWYWx1ZSk7XG4gICAgbXVsdGlwbGUgPSBudWxsO1xuICAgIGZvciAoaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobm9kZVtpXS52YWx1ZSA9PT0gcHJvcFZhbHVlKSB7XG4gICAgICAgIG5vZGVbaV0uc2VsZWN0ZWQgPSAhMDtcbiAgICAgICAgc2V0RGVmYXVsdFNlbGVjdGVkICYmIChub2RlW2ldLmRlZmF1bHRTZWxlY3RlZCA9ICEwKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbnVsbCAhPT0gbXVsdGlwbGUgfHwgbm9kZVtpXS5kaXNhYmxlZCB8fCAobXVsdGlwbGUgPSBub2RlW2ldKTtcbiAgICB9XG4gICAgbnVsbCAhPT0gbXVsdGlwbGUgJiYgKG11bHRpcGxlLnNlbGVjdGVkID0gITApO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVUZXh0YXJlYShlbGVtZW50LCB2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChcbiAgICBudWxsICE9IHZhbHVlICYmXG4gICAgKCh2YWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSksXG4gICAgdmFsdWUgIT09IGVsZW1lbnQudmFsdWUgJiYgKGVsZW1lbnQudmFsdWUgPSB2YWx1ZSksXG4gICAgbnVsbCA9PSBkZWZhdWx0VmFsdWUpXG4gICkge1xuICAgIGVsZW1lbnQuZGVmYXVsdFZhbHVlICE9PSB2YWx1ZSAmJiAoZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuZGVmYXVsdFZhbHVlID1cbiAgICBudWxsICE9IGRlZmF1bHRWYWx1ZSA/IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKGRlZmF1bHRWYWx1ZSkgOiBcIlwiO1xufVxuZnVuY3Rpb24gaW5pdFRleHRhcmVhKGVsZW1lbnQsIHZhbHVlLCBkZWZhdWx0VmFsdWUsIGNoaWxkcmVuKSB7XG4gIGlmIChudWxsID09IHZhbHVlKSB7XG4gICAgaWYgKG51bGwgIT0gY2hpbGRyZW4pIHtcbiAgICAgIGlmIChudWxsICE9IGRlZmF1bHRWYWx1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MikpO1xuICAgICAgaWYgKGlzQXJyYXlJbXBsKGNoaWxkcmVuKSkge1xuICAgICAgICBpZiAoMSA8IGNoaWxkcmVuLmxlbmd0aCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MykpO1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgfVxuICAgICAgZGVmYXVsdFZhbHVlID0gY2hpbGRyZW47XG4gICAgfVxuICAgIG51bGwgPT0gZGVmYXVsdFZhbHVlICYmIChkZWZhdWx0VmFsdWUgPSBcIlwiKTtcbiAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuICBkZWZhdWx0VmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKTtcbiAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIGNoaWxkcmVuID0gZWxlbWVudC50ZXh0Q29udGVudDtcbiAgY2hpbGRyZW4gPT09IGRlZmF1bHRWYWx1ZSAmJlxuICAgIFwiXCIgIT09IGNoaWxkcmVuICYmXG4gICAgbnVsbCAhPT0gY2hpbGRyZW4gJiZcbiAgICAoZWxlbWVudC52YWx1ZSA9IGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50KG5vZGUsIHRleHQpIHtcbiAgaWYgKHRleHQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICBpZiAoXG4gICAgICBmaXJzdENoaWxkICYmXG4gICAgICBmaXJzdENoaWxkID09PSBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgMyA9PT0gZmlyc3RDaGlsZC5ub2RlVHlwZVxuICAgICkge1xuICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0ZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cbnZhciB1bml0bGVzc051bWJlcnMgPSBuZXcgU2V0KFxuICBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IGFzcGVjdFJhdGlvIGJvcmRlckltYWdlT3V0c2V0IGJvcmRlckltYWdlU2xpY2UgYm9yZGVySW1hZ2VXaWR0aCBib3hGbGV4IGJveEZsZXhHcm91cCBib3hPcmRpbmFsR3JvdXAgY29sdW1uQ291bnQgY29sdW1ucyBmbGV4IGZsZXhHcm93IGZsZXhQb3NpdGl2ZSBmbGV4U2hyaW5rIGZsZXhOZWdhdGl2ZSBmbGV4T3JkZXIgZ3JpZEFyZWEgZ3JpZFJvdyBncmlkUm93RW5kIGdyaWRSb3dTcGFuIGdyaWRSb3dTdGFydCBncmlkQ29sdW1uIGdyaWRDb2x1bW5FbmQgZ3JpZENvbHVtblNwYW4gZ3JpZENvbHVtblN0YXJ0IGZvbnRXZWlnaHQgbGluZUNsYW1wIGxpbmVIZWlnaHQgb3BhY2l0eSBvcmRlciBvcnBoYW5zIHNjYWxlIHRhYlNpemUgd2lkb3dzIHpJbmRleCB6b29tIGZpbGxPcGFjaXR5IGZsb29kT3BhY2l0eSBzdG9wT3BhY2l0eSBzdHJva2VEYXNoYXJyYXkgc3Ryb2tlRGFzaG9mZnNldCBzdHJva2VNaXRlcmxpbWl0IHN0cm9rZU9wYWNpdHkgc3Ryb2tlV2lkdGggTW96QW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgTW96Qm94RmxleCBNb3pCb3hGbGV4R3JvdXAgTW96TGluZUNsYW1wIG1zQW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgbXNGbGV4IG1zWm9vbSBtc0ZsZXhHcm93IG1zRmxleE5lZ2F0aXZlIG1zRmxleE9yZGVyIG1zRmxleFBvc2l0aXZlIG1zRmxleFNocmluayBtc0dyaWRDb2x1bW4gbXNHcmlkQ29sdW1uU3BhbiBtc0dyaWRSb3cgbXNHcmlkUm93U3BhbiBXZWJraXRBbmltYXRpb25JdGVyYXRpb25Db3VudCBXZWJraXRCb3hGbGV4IFdlYktpdEJveEZsZXhHcm91cCBXZWJraXRCb3hPcmRpbmFsR3JvdXAgV2Via2l0Q29sdW1uQ291bnQgV2Via2l0Q29sdW1ucyBXZWJraXRGbGV4IFdlYmtpdEZsZXhHcm93IFdlYmtpdEZsZXhQb3NpdGl2ZSBXZWJraXRGbGV4U2hyaW5rIFdlYmtpdExpbmVDbGFtcFwiLnNwbGl0KFxuICAgIFwiIFwiXG4gIClcbik7XG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlKHN0eWxlLCBzdHlsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gMCA9PT0gc3R5bGVOYW1lLmluZGV4T2YoXCItLVwiKTtcbiAgbnVsbCA9PSB2YWx1ZSB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIHZhbHVlIHx8IFwiXCIgPT09IHZhbHVlXG4gICAgPyBpc0N1c3RvbVByb3BlcnR5XG4gICAgICA/IHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgXCJcIilcbiAgICAgIDogXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgPyAoc3R5bGUuY3NzRmxvYXQgPSBcIlwiKVxuICAgICAgICA6IChzdHlsZVtzdHlsZU5hbWVdID0gXCJcIilcbiAgICA6IGlzQ3VzdG9tUHJvcGVydHlcbiAgICAgID8gc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCB2YWx1ZSlcbiAgICAgIDogXCJudW1iZXJcIiAhPT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgICAgMCA9PT0gdmFsdWUgfHxcbiAgICAgICAgICB1bml0bGVzc051bWJlcnMuaGFzKHN0eWxlTmFtZSlcbiAgICAgICAgPyBcImZsb2F0XCIgPT09IHN0eWxlTmFtZVxuICAgICAgICAgID8gKHN0eWxlLmNzc0Zsb2F0ID0gdmFsdWUpXG4gICAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IChcIlwiICsgdmFsdWUpLnRyaW0oKSlcbiAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IHZhbHVlICsgXCJweFwiKTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yU3R5bGVzKG5vZGUsIHN0eWxlcywgcHJldlN0eWxlcykge1xuICBpZiAobnVsbCAhPSBzdHlsZXMgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHN0eWxlcylcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYyKSk7XG4gIG5vZGUgPSBub2RlLnN0eWxlO1xuICBpZiAobnVsbCAhPSBwcmV2U3R5bGVzKSB7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHByZXZTdHlsZXMpXG4gICAgICAhcHJldlN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpIHx8XG4gICAgICAgIChudWxsICE9IHN0eWxlcyAmJiBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkgfHxcbiAgICAgICAgKDAgPT09IHN0eWxlTmFtZS5pbmRleE9mKFwiLS1cIilcbiAgICAgICAgICA/IG5vZGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBcIlwiKVxuICAgICAgICAgIDogXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgICAgID8gKG5vZGUuY3NzRmxvYXQgPSBcIlwiKVxuICAgICAgICAgICAgOiAobm9kZVtzdHlsZU5hbWVdID0gXCJcIikpO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSQxNiBpbiBzdHlsZXMpXG4gICAgICAoc3R5bGVOYW1lID0gc3R5bGVzW3N0eWxlTmFtZSQxNl0pLFxuICAgICAgICBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lJDE2KSAmJlxuICAgICAgICAgIHByZXZTdHlsZXNbc3R5bGVOYW1lJDE2XSAhPT0gc3R5bGVOYW1lICYmXG4gICAgICAgICAgc2V0VmFsdWVGb3JTdHlsZShub2RlLCBzdHlsZU5hbWUkMTYsIHN0eWxlTmFtZSk7XG4gIH0gZWxzZVxuICAgIGZvciAodmFyIHN0eWxlTmFtZSQxNyBpbiBzdHlsZXMpXG4gICAgICBzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lJDE3KSAmJlxuICAgICAgICBzZXRWYWx1ZUZvclN0eWxlKG5vZGUsIHN0eWxlTmFtZSQxNywgc3R5bGVzW3N0eWxlTmFtZSQxN10pO1xufVxuZnVuY3Rpb24gaXNDdXN0b21FbGVtZW50KHRhZ05hbWUpIHtcbiAgaWYgKC0xID09PSB0YWdOYW1lLmluZGV4T2YoXCItXCIpKSByZXR1cm4gITE7XG4gIHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOlxuICAgIGNhc2UgXCJjb2xvci1wcm9maWxlXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2Utc3JjXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS11cmlcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtbmFtZVwiOlxuICAgIGNhc2UgXCJtaXNzaW5nLWdseXBoXCI6XG4gICAgICByZXR1cm4gITE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAhMDtcbiAgfVxufVxudmFyIGFsaWFzZXMgPSBuZXcgTWFwKFtcbiAgICBbXCJhY2NlcHRDaGFyc2V0XCIsIFwiYWNjZXB0LWNoYXJzZXRcIl0sXG4gICAgW1wiaHRtbEZvclwiLCBcImZvclwiXSxcbiAgICBbXCJodHRwRXF1aXZcIiwgXCJodHRwLWVxdWl2XCJdLFxuICAgIFtcImNyb3NzT3JpZ2luXCIsIFwiY3Jvc3NvcmlnaW5cIl0sXG4gICAgW1wiYWNjZW50SGVpZ2h0XCIsIFwiYWNjZW50LWhlaWdodFwiXSxcbiAgICBbXCJhbGlnbm1lbnRCYXNlbGluZVwiLCBcImFsaWdubWVudC1iYXNlbGluZVwiXSxcbiAgICBbXCJhcmFiaWNGb3JtXCIsIFwiYXJhYmljLWZvcm1cIl0sXG4gICAgW1wiYmFzZWxpbmVTaGlmdFwiLCBcImJhc2VsaW5lLXNoaWZ0XCJdLFxuICAgIFtcImNhcEhlaWdodFwiLCBcImNhcC1oZWlnaHRcIl0sXG4gICAgW1wiY2xpcFBhdGhcIiwgXCJjbGlwLXBhdGhcIl0sXG4gICAgW1wiY2xpcFJ1bGVcIiwgXCJjbGlwLXJ1bGVcIl0sXG4gICAgW1wiY29sb3JJbnRlcnBvbGF0aW9uXCIsIFwiY29sb3ItaW50ZXJwb2xhdGlvblwiXSxcbiAgICBbXCJjb2xvckludGVycG9sYXRpb25GaWx0ZXJzXCIsIFwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzXCJdLFxuICAgIFtcImNvbG9yUHJvZmlsZVwiLCBcImNvbG9yLXByb2ZpbGVcIl0sXG4gICAgW1wiY29sb3JSZW5kZXJpbmdcIiwgXCJjb2xvci1yZW5kZXJpbmdcIl0sXG4gICAgW1wiZG9taW5hbnRCYXNlbGluZVwiLCBcImRvbWluYW50LWJhc2VsaW5lXCJdLFxuICAgIFtcImVuYWJsZUJhY2tncm91bmRcIiwgXCJlbmFibGUtYmFja2dyb3VuZFwiXSxcbiAgICBbXCJmaWxsT3BhY2l0eVwiLCBcImZpbGwtb3BhY2l0eVwiXSxcbiAgICBbXCJmaWxsUnVsZVwiLCBcImZpbGwtcnVsZVwiXSxcbiAgICBbXCJmbG9vZENvbG9yXCIsIFwiZmxvb2QtY29sb3JcIl0sXG4gICAgW1wiZmxvb2RPcGFjaXR5XCIsIFwiZmxvb2Qtb3BhY2l0eVwiXSxcbiAgICBbXCJmb250RmFtaWx5XCIsIFwiZm9udC1mYW1pbHlcIl0sXG4gICAgW1wiZm9udFNpemVcIiwgXCJmb250LXNpemVcIl0sXG4gICAgW1wiZm9udFNpemVBZGp1c3RcIiwgXCJmb250LXNpemUtYWRqdXN0XCJdLFxuICAgIFtcImZvbnRTdHJldGNoXCIsIFwiZm9udC1zdHJldGNoXCJdLFxuICAgIFtcImZvbnRTdHlsZVwiLCBcImZvbnQtc3R5bGVcIl0sXG4gICAgW1wiZm9udFZhcmlhbnRcIiwgXCJmb250LXZhcmlhbnRcIl0sXG4gICAgW1wiZm9udFdlaWdodFwiLCBcImZvbnQtd2VpZ2h0XCJdLFxuICAgIFtcImdseXBoTmFtZVwiLCBcImdseXBoLW5hbWVcIl0sXG4gICAgW1wiZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWxcIiwgXCJnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsXCJdLFxuICAgIFtcImdseXBoT3JpZW50YXRpb25WZXJ0aWNhbFwiLCBcImdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsXCJdLFxuICAgIFtcImhvcml6QWR2WFwiLCBcImhvcml6LWFkdi14XCJdLFxuICAgIFtcImhvcml6T3JpZ2luWFwiLCBcImhvcml6LW9yaWdpbi14XCJdLFxuICAgIFtcImltYWdlUmVuZGVyaW5nXCIsIFwiaW1hZ2UtcmVuZGVyaW5nXCJdLFxuICAgIFtcImxldHRlclNwYWNpbmdcIiwgXCJsZXR0ZXItc3BhY2luZ1wiXSxcbiAgICBbXCJsaWdodGluZ0NvbG9yXCIsIFwibGlnaHRpbmctY29sb3JcIl0sXG4gICAgW1wibWFya2VyRW5kXCIsIFwibWFya2VyLWVuZFwiXSxcbiAgICBbXCJtYXJrZXJNaWRcIiwgXCJtYXJrZXItbWlkXCJdLFxuICAgIFtcIm1hcmtlclN0YXJ0XCIsIFwibWFya2VyLXN0YXJ0XCJdLFxuICAgIFtcIm92ZXJsaW5lUG9zaXRpb25cIiwgXCJvdmVybGluZS1wb3NpdGlvblwiXSxcbiAgICBbXCJvdmVybGluZVRoaWNrbmVzc1wiLCBcIm92ZXJsaW5lLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJwYWludE9yZGVyXCIsIFwicGFpbnQtb3JkZXJcIl0sXG4gICAgW1wicGFub3NlLTFcIiwgXCJwYW5vc2UtMVwiXSxcbiAgICBbXCJwb2ludGVyRXZlbnRzXCIsIFwicG9pbnRlci1ldmVudHNcIl0sXG4gICAgW1wicmVuZGVyaW5nSW50ZW50XCIsIFwicmVuZGVyaW5nLWludGVudFwiXSxcbiAgICBbXCJzaGFwZVJlbmRlcmluZ1wiLCBcInNoYXBlLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJzdG9wQ29sb3JcIiwgXCJzdG9wLWNvbG9yXCJdLFxuICAgIFtcInN0b3BPcGFjaXR5XCIsIFwic3RvcC1vcGFjaXR5XCJdLFxuICAgIFtcInN0cmlrZXRocm91Z2hQb3NpdGlvblwiLCBcInN0cmlrZXRocm91Z2gtcG9zaXRpb25cIl0sXG4gICAgW1wic3RyaWtldGhyb3VnaFRoaWNrbmVzc1wiLCBcInN0cmlrZXRocm91Z2gtdGhpY2tuZXNzXCJdLFxuICAgIFtcInN0cm9rZURhc2hhcnJheVwiLCBcInN0cm9rZS1kYXNoYXJyYXlcIl0sXG4gICAgW1wic3Ryb2tlRGFzaG9mZnNldFwiLCBcInN0cm9rZS1kYXNob2Zmc2V0XCJdLFxuICAgIFtcInN0cm9rZUxpbmVjYXBcIiwgXCJzdHJva2UtbGluZWNhcFwiXSxcbiAgICBbXCJzdHJva2VMaW5lam9pblwiLCBcInN0cm9rZS1saW5lam9pblwiXSxcbiAgICBbXCJzdHJva2VNaXRlcmxpbWl0XCIsIFwic3Ryb2tlLW1pdGVybGltaXRcIl0sXG4gICAgW1wic3Ryb2tlT3BhY2l0eVwiLCBcInN0cm9rZS1vcGFjaXR5XCJdLFxuICAgIFtcInN0cm9rZVdpZHRoXCIsIFwic3Ryb2tlLXdpZHRoXCJdLFxuICAgIFtcInRleHRBbmNob3JcIiwgXCJ0ZXh0LWFuY2hvclwiXSxcbiAgICBbXCJ0ZXh0RGVjb3JhdGlvblwiLCBcInRleHQtZGVjb3JhdGlvblwiXSxcbiAgICBbXCJ0ZXh0UmVuZGVyaW5nXCIsIFwidGV4dC1yZW5kZXJpbmdcIl0sXG4gICAgW1widHJhbnNmb3JtT3JpZ2luXCIsIFwidHJhbnNmb3JtLW9yaWdpblwiXSxcbiAgICBbXCJ1bmRlcmxpbmVQb3NpdGlvblwiLCBcInVuZGVybGluZS1wb3NpdGlvblwiXSxcbiAgICBbXCJ1bmRlcmxpbmVUaGlja25lc3NcIiwgXCJ1bmRlcmxpbmUtdGhpY2tuZXNzXCJdLFxuICAgIFtcInVuaWNvZGVCaWRpXCIsIFwidW5pY29kZS1iaWRpXCJdLFxuICAgIFtcInVuaWNvZGVSYW5nZVwiLCBcInVuaWNvZGUtcmFuZ2VcIl0sXG4gICAgW1widW5pdHNQZXJFbVwiLCBcInVuaXRzLXBlci1lbVwiXSxcbiAgICBbXCJ2QWxwaGFiZXRpY1wiLCBcInYtYWxwaGFiZXRpY1wiXSxcbiAgICBbXCJ2SGFuZ2luZ1wiLCBcInYtaGFuZ2luZ1wiXSxcbiAgICBbXCJ2SWRlb2dyYXBoaWNcIiwgXCJ2LWlkZW9ncmFwaGljXCJdLFxuICAgIFtcInZNYXRoZW1hdGljYWxcIiwgXCJ2LW1hdGhlbWF0aWNhbFwiXSxcbiAgICBbXCJ2ZWN0b3JFZmZlY3RcIiwgXCJ2ZWN0b3ItZWZmZWN0XCJdLFxuICAgIFtcInZlcnRBZHZZXCIsIFwidmVydC1hZHYteVwiXSxcbiAgICBbXCJ2ZXJ0T3JpZ2luWFwiLCBcInZlcnQtb3JpZ2luLXhcIl0sXG4gICAgW1widmVydE9yaWdpbllcIiwgXCJ2ZXJ0LW9yaWdpbi15XCJdLFxuICAgIFtcIndvcmRTcGFjaW5nXCIsIFwid29yZC1zcGFjaW5nXCJdLFxuICAgIFtcIndyaXRpbmdNb2RlXCIsIFwid3JpdGluZy1tb2RlXCJdLFxuICAgIFtcInhtbG5zWGxpbmtcIiwgXCJ4bWxuczp4bGlua1wiXSxcbiAgICBbXCJ4SGVpZ2h0XCIsIFwieC1oZWlnaHRcIl1cbiAgXSksXG4gIGlzSmF2YVNjcmlwdFByb3RvY29sID1cbiAgICAvXltcXHUwMDAwLVxcdTAwMUYgXSpqW1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnZbXFxyXFxuXFx0XSphW1xcclxcblxcdF0qc1tcXHJcXG5cXHRdKmNbXFxyXFxuXFx0XSpyW1xcclxcblxcdF0qaVtcXHJcXG5cXHRdKnBbXFxyXFxuXFx0XSp0W1xcclxcblxcdF0qOi9pO1xuZnVuY3Rpb24gc2FuaXRpemVVUkwodXJsKSB7XG4gIHJldHVybiBpc0phdmFTY3JpcHRQcm90b2NvbC50ZXN0KFwiXCIgKyB1cmwpXG4gICAgPyBcImphdmFzY3JpcHQ6dGhyb3cgbmV3IEVycm9yKCdSZWFjdCBoYXMgYmxvY2tlZCBhIGphdmFzY3JpcHQ6IFVSTCBhcyBhIHNlY3VyaXR5IHByZWNhdXRpb24uJylcIlxuICAgIDogdXJsO1xufVxudmFyIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LnRhcmdldCB8fCBuYXRpdmVFdmVudC5zcmNFbGVtZW50IHx8IHdpbmRvdztcbiAgbmF0aXZlRXZlbnQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQgJiZcbiAgICAobmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7XG4gIHJldHVybiAzID09PSBuYXRpdmVFdmVudC5ub2RlVHlwZSA/IG5hdGl2ZUV2ZW50LnBhcmVudE5vZGUgOiBuYXRpdmVFdmVudDtcbn1cbnZhciByZXN0b3JlVGFyZ2V0ID0gbnVsbCxcbiAgcmVzdG9yZVF1ZXVlID0gbnVsbDtcbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHRhcmdldCkge1xuICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEluc3RhbmNlRnJvbU5vZGUodGFyZ2V0KTtcbiAgaWYgKGludGVybmFsSW5zdGFuY2UgJiYgKHRhcmdldCA9IGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlKSkge1xuICAgIHZhciBwcm9wcyA9IHRhcmdldFtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICAgIGE6IHN3aXRjaCAoKCh0YXJnZXQgPSBpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSksIGludGVybmFsSW5zdGFuY2UudHlwZSkpIHtcbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgICAgcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBwcm9wcy5jaGVja2VkLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgIHByb3BzLnR5cGUsXG4gICAgICAgICAgcHJvcHMubmFtZVxuICAgICAgICApO1xuICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gcHJvcHMubmFtZTtcbiAgICAgICAgaWYgKFwicmFkaW9cIiA9PT0gcHJvcHMudHlwZSAmJiBudWxsICE9IGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgICBmb3IgKHByb3BzID0gdGFyZ2V0OyBwcm9wcy5wYXJlbnROb2RlOyApIHByb3BzID0gcHJvcHMucGFyZW50Tm9kZTtcbiAgICAgICAgICBwcm9wcyA9IHByb3BzLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICAnaW5wdXRbbmFtZT1cIicgK1xuICAgICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICAgIFwiXCIgKyBpbnRlcm5hbEluc3RhbmNlXG4gICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAnXCJdW3R5cGU9XCJyYWRpb1wiXSdcbiAgICAgICAgICApO1xuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gMDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPCBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlKytcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBvdGhlck5vZGUgPSBwcm9wc1tpbnRlcm5hbEluc3RhbmNlXTtcbiAgICAgICAgICAgIGlmIChvdGhlck5vZGUgIT09IHRhcmdldCAmJiBvdGhlck5vZGUuZm9ybSA9PT0gdGFyZ2V0LmZvcm0pIHtcbiAgICAgICAgICAgICAgdmFyIG90aGVyUHJvcHMgPSBvdGhlck5vZGVbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgICAgICAgICAgICAgaWYgKCFvdGhlclByb3BzKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkwKSk7XG4gICAgICAgICAgICAgIHVwZGF0ZUlucHV0KFxuICAgICAgICAgICAgICAgIG90aGVyTm9kZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMudHlwZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLm5hbWVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPSAwO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA8IHByb3BzLmxlbmd0aDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UrK1xuICAgICAgICAgIClcbiAgICAgICAgICAgIChvdGhlck5vZGUgPSBwcm9wc1tpbnRlcm5hbEluc3RhbmNlXSksXG4gICAgICAgICAgICAgIG90aGVyTm9kZS5mb3JtID09PSB0YXJnZXQuZm9ybSAmJiB1cGRhdGVWYWx1ZUlmQ2hhbmdlZChvdGhlck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgdXBkYXRlVGV4dGFyZWEodGFyZ2V0LCBwcm9wcy52YWx1ZSwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgYnJlYWsgYTtcbiAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgKGludGVybmFsSW5zdGFuY2UgPSBwcm9wcy52YWx1ZSksXG4gICAgICAgICAgbnVsbCAhPSBpbnRlcm5hbEluc3RhbmNlICYmXG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zKHRhcmdldCwgISFwcm9wcy5tdWx0aXBsZSwgaW50ZXJuYWxJbnN0YW5jZSwgITEpO1xuICAgIH1cbiAgfVxufVxudmFyIGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITE7XG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyQxKGZuLCBhLCBiKSB7XG4gIGlmIChpc0luc2lkZUV2ZW50SGFuZGxlcikgcmV0dXJuIGZuKGEsIGIpO1xuICBpc0luc2lkZUV2ZW50SGFuZGxlciA9ICEwO1xuICB0cnkge1xuICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBmbihhKTtcbiAgICByZXR1cm4gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChcbiAgICAgICgoaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMSksXG4gICAgICBudWxsICE9PSByZXN0b3JlVGFyZ2V0IHx8IG51bGwgIT09IHJlc3RvcmVRdWV1ZSlcbiAgICApXG4gICAgICBpZiAoXG4gICAgICAgIChmbHVzaFN5bmNXb3JrJDEoKSxcbiAgICAgICAgcmVzdG9yZVRhcmdldCAmJlxuICAgICAgICAgICgoYSA9IHJlc3RvcmVUYXJnZXQpLFxuICAgICAgICAgIChmbiA9IHJlc3RvcmVRdWV1ZSksXG4gICAgICAgICAgKHJlc3RvcmVRdWV1ZSA9IHJlc3RvcmVUYXJnZXQgPSBudWxsKSxcbiAgICAgICAgICByZXN0b3JlU3RhdGVPZlRhcmdldChhKSxcbiAgICAgICAgICBmbikpXG4gICAgICApXG4gICAgICAgIGZvciAoYSA9IDA7IGEgPCBmbi5sZW5ndGg7IGErKykgcmVzdG9yZVN0YXRlT2ZUYXJnZXQoZm5bYV0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gIHZhciBzdGF0ZU5vZGUgPSBpbnN0LnN0YXRlTm9kZTtcbiAgaWYgKG51bGwgPT09IHN0YXRlTm9kZSkgcmV0dXJuIG51bGw7XG4gIHZhciBwcm9wcyA9IHN0YXRlTm9kZVtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICBpZiAobnVsbCA9PT0gcHJvcHMpIHJldHVybiBudWxsO1xuICBzdGF0ZU5vZGUgPSBwcm9wc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgYTogc3dpdGNoIChyZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICBjYXNlIFwib25DbGlja0NhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Eb3VibGVDbGlja1wiOlxuICAgIGNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93blwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VVcFwiOlxuICAgIGNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VFbnRlclwiOlxuICAgICAgKHByb3BzID0gIXByb3BzLmRpc2FibGVkKSB8fFxuICAgICAgICAoKGluc3QgPSBpbnN0LnR5cGUpLFxuICAgICAgICAocHJvcHMgPSAhKFxuICAgICAgICAgIFwiYnV0dG9uXCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcImlucHV0XCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcInNlbGVjdFwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJ0ZXh0YXJlYVwiID09PSBpbnN0XG4gICAgICAgICkpKTtcbiAgICAgIGluc3QgPSAhcHJvcHM7XG4gICAgICBicmVhayBhO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpbnN0ID0gITE7XG4gIH1cbiAgaWYgKGluc3QpIHJldHVybiBudWxsO1xuICBpZiAoc3RhdGVOb2RlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN0YXRlTm9kZSlcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjMxLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2Ygc3RhdGVOb2RlKVxuICAgICk7XG4gIHJldHVybiBzdGF0ZU5vZGU7XG59XG52YXIgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbmlmIChjYW5Vc2VET00pXG4gIHRyeSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW9ucywgXCJwYXNzaXZlXCIsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICEwO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCA9ICExO1xuICB9XG52YXIgcm9vdCA9IG51bGwsXG4gIHN0YXJ0VGV4dCA9IG51bGwsXG4gIGZhbGxiYWNrVGV4dCA9IG51bGw7XG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICBpZiAoZmFsbGJhY2tUZXh0KSByZXR1cm4gZmFsbGJhY2tUZXh0O1xuICB2YXIgc3RhcnQsXG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0VGV4dCxcbiAgICBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoLFxuICAgIGVuZCxcbiAgICBlbmRWYWx1ZSA9IFwidmFsdWVcIiBpbiByb290ID8gcm9vdC52YWx1ZSA6IHJvb3QudGV4dENvbnRlbnQsXG4gICAgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuICBmb3IgKFxuICAgIHN0YXJ0ID0gMDtcbiAgICBzdGFydCA8IHN0YXJ0TGVuZ3RoICYmIHN0YXJ0VmFsdWVbc3RhcnRdID09PSBlbmRWYWx1ZVtzdGFydF07XG4gICAgc3RhcnQrK1xuICApO1xuICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgZm9yIChcbiAgICBlbmQgPSAxO1xuICAgIGVuZCA8PSBtaW5FbmQgJiZcbiAgICBzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSA9PT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXTtcbiAgICBlbmQrK1xuICApO1xuICByZXR1cm4gKGZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCAxIDwgZW5kID8gMSAtIGVuZCA6IHZvaWQgMCkpO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkge1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gIFwiY2hhckNvZGVcIiBpbiBuYXRpdmVFdmVudFxuICAgID8gKChuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlKSxcbiAgICAgIDAgPT09IG5hdGl2ZUV2ZW50ICYmIDEzID09PSBrZXlDb2RlICYmIChuYXRpdmVFdmVudCA9IDEzKSlcbiAgICA6IChuYXRpdmVFdmVudCA9IGtleUNvZGUpO1xuICAxMCA9PT0gbmF0aXZlRXZlbnQgJiYgKG5hdGl2ZUV2ZW50ID0gMTMpO1xuICByZXR1cm4gMzIgPD0gbmF0aXZlRXZlbnQgfHwgMTMgPT09IG5hdGl2ZUV2ZW50ID8gbmF0aXZlRXZlbnQgOiAwO1xufVxuZnVuY3Rpb24gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUoKSB7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSgpIHtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ludGhldGljRXZlbnQoSW50ZXJmYWNlKSB7XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY0Jhc2VFdmVudChcbiAgICByZWFjdE5hbWUsXG4gICAgcmVhY3RFdmVudFR5cGUsXG4gICAgdGFyZ2V0SW5zdCxcbiAgICBuYXRpdmVFdmVudCxcbiAgICBuYXRpdmVFdmVudFRhcmdldFxuICApIHtcbiAgICB0aGlzLl9yZWFjdE5hbWUgPSByZWFjdE5hbWU7XG4gICAgdGhpcy5fdGFyZ2V0SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgdGhpcy50eXBlID0gcmVhY3RFdmVudFR5cGU7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpXG4gICAgICBJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmXG4gICAgICAgICgocmVhY3ROYW1lID0gSW50ZXJmYWNlW3Byb3BOYW1lXSksXG4gICAgICAgICh0aGlzW3Byb3BOYW1lXSA9IHJlYWN0TmFtZVxuICAgICAgICAgID8gcmVhY3ROYW1lKG5hdGl2ZUV2ZW50KVxuICAgICAgICAgIDogbmF0aXZlRXZlbnRbcHJvcE5hbWVdKSk7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSAoXG4gICAgICBudWxsICE9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWRcbiAgICAgICAgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgIDogITEgPT09IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlXG4gICAgKVxuICAgICAgPyBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICAgICAgOiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBhc3NpZ24oU3ludGhldGljQmFzZUV2ZW50LnByb3RvdHlwZSwge1xuICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMDtcbiAgICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgICBldmVudCAmJlxuICAgICAgICAoZXZlbnQucHJldmVudERlZmF1bHRcbiAgICAgICAgICA/IGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQucmV0dXJuVmFsdWUgJiYgKGV2ZW50LnJldHVyblZhbHVlID0gITEpLFxuICAgICAgICAodGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnN0b3BQcm9wYWdhdGlvblxuICAgICAgICAgID8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICA6IFwidW5rbm93blwiICE9PSB0eXBlb2YgZXZlbnQuY2FuY2VsQnViYmxlICYmXG4gICAgICAgICAgICAoZXZlbnQuY2FuY2VsQnViYmxlID0gITApLFxuICAgICAgICAodGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKSk7XG4gICAgfSxcbiAgICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7fSxcbiAgICBpc1BlcnNpc3RlbnQ6IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlXG4gIH0pO1xuICByZXR1cm4gU3ludGhldGljQmFzZUV2ZW50O1xufVxudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICAgIGV2ZW50UGhhc2U6IDAsXG4gICAgYnViYmxlczogMCxcbiAgICBjYW5jZWxhYmxlOiAwLFxuICAgIHRpbWVTdGFtcDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gICAgfSxcbiAgICBkZWZhdWx0UHJldmVudGVkOiAwLFxuICAgIGlzVHJ1c3RlZDogMFxuICB9LFxuICBTeW50aGV0aWNFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEV2ZW50SW50ZXJmYWNlKSxcbiAgVUlFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHsgdmlldzogMCwgZGV0YWlsOiAwIH0pLFxuICBTeW50aGV0aWNVSUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVUlFdmVudEludGVyZmFjZSksXG4gIGxhc3RNb3ZlbWVudFgsXG4gIGxhc3RNb3ZlbWVudFksXG4gIGxhc3RNb3VzZUV2ZW50LFxuICBNb3VzZUV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgc2NyZWVuWDogMCxcbiAgICBzY3JlZW5ZOiAwLFxuICAgIGNsaWVudFg6IDAsXG4gICAgY2xpZW50WTogMCxcbiAgICBwYWdlWDogMCxcbiAgICBwYWdlWTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBidXR0b246IDAsXG4gICAgYnV0dG9uczogMCxcbiAgICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IGV2ZW50LnJlbGF0ZWRUYXJnZXRcbiAgICAgICAgPyBldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudFxuICAgICAgICAgID8gZXZlbnQudG9FbGVtZW50XG4gICAgICAgICAgOiBldmVudC5mcm9tRWxlbWVudFxuICAgICAgICA6IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgfSxcbiAgICBtb3ZlbWVudFg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKFwibW92ZW1lbnRYXCIgaW4gZXZlbnQpIHJldHVybiBldmVudC5tb3ZlbWVudFg7XG4gICAgICBldmVudCAhPT0gbGFzdE1vdXNlRXZlbnQgJiZcbiAgICAgICAgKGxhc3RNb3VzZUV2ZW50ICYmIFwibW91c2Vtb3ZlXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/ICgobGFzdE1vdmVtZW50WCA9IGV2ZW50LnNjcmVlblggLSBsYXN0TW91c2VFdmVudC5zY3JlZW5YKSxcbiAgICAgICAgICAgIChsYXN0TW92ZW1lbnRZID0gZXZlbnQuc2NyZWVuWSAtIGxhc3RNb3VzZUV2ZW50LnNjcmVlblkpKVxuICAgICAgICAgIDogKGxhc3RNb3ZlbWVudFkgPSBsYXN0TW92ZW1lbnRYID0gMCksXG4gICAgICAgIChsYXN0TW91c2VFdmVudCA9IGV2ZW50KSk7XG4gICAgICByZXR1cm4gbGFzdE1vdmVtZW50WDtcbiAgICB9LFxuICAgIG1vdmVtZW50WTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJtb3ZlbWVudFlcIiBpbiBldmVudCA/IGV2ZW50Lm1vdmVtZW50WSA6IGxhc3RNb3ZlbWVudFk7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljTW91c2VFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KE1vdXNlRXZlbnRJbnRlcmZhY2UpLFxuICBEcmFnRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHsgZGF0YVRyYW5zZmVyOiAwIH0pLFxuICBTeW50aGV0aWNEcmFnRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChEcmFnRXZlbnRJbnRlcmZhY2UpLFxuICBGb2N1c0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7IHJlbGF0ZWRUYXJnZXQ6IDAgfSksXG4gIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChGb2N1c0V2ZW50SW50ZXJmYWNlKSxcbiAgQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgYW5pbWF0aW9uTmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJjbGlwYm9hcmREYXRhXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5jbGlwYm9hcmREYXRhXG4gICAgICAgIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDbGlwYm9hcmRFdmVudEludGVyZmFjZSksXG4gIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IGRhdGE6IDAgfSksXG4gIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKSxcbiAgbm9ybWFsaXplS2V5ID0ge1xuICAgIEVzYzogXCJFc2NhcGVcIixcbiAgICBTcGFjZWJhcjogXCIgXCIsXG4gICAgTGVmdDogXCJBcnJvd0xlZnRcIixcbiAgICBVcDogXCJBcnJvd1VwXCIsXG4gICAgUmlnaHQ6IFwiQXJyb3dSaWdodFwiLFxuICAgIERvd246IFwiQXJyb3dEb3duXCIsXG4gICAgRGVsOiBcIkRlbGV0ZVwiLFxuICAgIFdpbjogXCJPU1wiLFxuICAgIE1lbnU6IFwiQ29udGV4dE1lbnVcIixcbiAgICBBcHBzOiBcIkNvbnRleHRNZW51XCIsXG4gICAgU2Nyb2xsOiBcIlNjcm9sbExvY2tcIixcbiAgICBNb3pQcmludGFibGVLZXk6IFwiVW5pZGVudGlmaWVkXCJcbiAgfSxcbiAgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICAgODogXCJCYWNrc3BhY2VcIixcbiAgICA5OiBcIlRhYlwiLFxuICAgIDEyOiBcIkNsZWFyXCIsXG4gICAgMTM6IFwiRW50ZXJcIixcbiAgICAxNjogXCJTaGlmdFwiLFxuICAgIDE3OiBcIkNvbnRyb2xcIixcbiAgICAxODogXCJBbHRcIixcbiAgICAxOTogXCJQYXVzZVwiLFxuICAgIDIwOiBcIkNhcHNMb2NrXCIsXG4gICAgMjc6IFwiRXNjYXBlXCIsXG4gICAgMzI6IFwiIFwiLFxuICAgIDMzOiBcIlBhZ2VVcFwiLFxuICAgIDM0OiBcIlBhZ2VEb3duXCIsXG4gICAgMzU6IFwiRW5kXCIsXG4gICAgMzY6IFwiSG9tZVwiLFxuICAgIDM3OiBcIkFycm93TGVmdFwiLFxuICAgIDM4OiBcIkFycm93VXBcIixcbiAgICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gICAgNDA6IFwiQXJyb3dEb3duXCIsXG4gICAgNDU6IFwiSW5zZXJ0XCIsXG4gICAgNDY6IFwiRGVsZXRlXCIsXG4gICAgMTEyOiBcIkYxXCIsXG4gICAgMTEzOiBcIkYyXCIsXG4gICAgMTE0OiBcIkYzXCIsXG4gICAgMTE1OiBcIkY0XCIsXG4gICAgMTE2OiBcIkY1XCIsXG4gICAgMTE3OiBcIkY2XCIsXG4gICAgMTE4OiBcIkY3XCIsXG4gICAgMTE5OiBcIkY4XCIsXG4gICAgMTIwOiBcIkY5XCIsXG4gICAgMTIxOiBcIkYxMFwiLFxuICAgIDEyMjogXCJGMTFcIixcbiAgICAxMjM6IFwiRjEyXCIsXG4gICAgMTQ0OiBcIk51bUxvY2tcIixcbiAgICAxNDU6IFwiU2Nyb2xsTG9ja1wiLFxuICAgIDIyNDogXCJNZXRhXCJcbiAgfSxcbiAgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICAgQWx0OiBcImFsdEtleVwiLFxuICAgIENvbnRyb2w6IFwiY3RybEtleVwiLFxuICAgIE1ldGE6IFwibWV0YUtleVwiLFxuICAgIFNoaWZ0OiBcInNoaWZ0S2V5XCJcbiAgfTtcbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBuYXRpdmVFdmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlXG4gICAgPyBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZylcbiAgICA6IChrZXlBcmcgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddKVxuICAgICAgPyAhIW5hdGl2ZUV2ZW50W2tleUFyZ11cbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUoKSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxudmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBrZXk6IGZ1bmN0aW9uIChuYXRpdmVFdmVudCkge1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgICAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgICAgICBpZiAoXCJVbmlkZW50aWZpZWRcIiAhPT0ga2V5KSByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwia2V5cHJlc3NcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICA/ICgobmF0aXZlRXZlbnQgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSksXG4gICAgICAgICAgMTMgPT09IG5hdGl2ZUV2ZW50ID8gXCJFbnRlclwiIDogU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudCkpXG4gICAgICAgIDogXCJrZXlkb3duXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBuYXRpdmVFdmVudC50eXBlXG4gICAgICAgICAgPyB0cmFuc2xhdGVUb0tleVtuYXRpdmVFdmVudC5rZXlDb2RlXSB8fCBcIlVuaWRlbnRpZmllZFwiXG4gICAgICAgICAgOiBcIlwiO1xuICAgIH0sXG4gICAgY29kZTogMCxcbiAgICBsb2NhdGlvbjogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGFsdEtleTogMCxcbiAgICBtZXRhS2V5OiAwLFxuICAgIHJlcGVhdDogMCxcbiAgICBsb2NhbGU6IDAsXG4gICAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAgIGNoYXJDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGUgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KSA6IDA7XG4gICAgfSxcbiAgICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBldmVudC5rZXlDb2RlXG4gICAgICAgIDogMDtcbiAgICB9LFxuICAgIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgPyBnZXRFdmVudENoYXJDb2RlKGV2ZW50KVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBldmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gZXZlbnQudHlwZVxuICAgICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICAgIDogMDtcbiAgICB9XG4gIH0pLFxuICBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoS2V5Ym9hcmRFdmVudEludGVyZmFjZSksXG4gIFBvaW50ZXJFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgTW91c2VFdmVudEludGVyZmFjZSwge1xuICAgIHBvaW50ZXJJZDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgcHJlc3N1cmU6IDAsXG4gICAgdGFuZ2VudGlhbFByZXNzdXJlOiAwLFxuICAgIHRpbHRYOiAwLFxuICAgIHRpbHRZOiAwLFxuICAgIHR3aXN0OiAwLFxuICAgIHBvaW50ZXJUeXBlOiAwLFxuICAgIGlzUHJpbWFyeTogMFxuICB9KSxcbiAgU3ludGhldGljUG9pbnRlckV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoUG9pbnRlckV2ZW50SW50ZXJmYWNlKSxcbiAgVG91Y2hFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHRvdWNoZXM6IDAsXG4gICAgdGFyZ2V0VG91Y2hlczogMCxcbiAgICBjaGFuZ2VkVG91Y2hlczogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBjdHJsS2V5OiAwLFxuICAgIHNoaWZ0S2V5OiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuICB9KSxcbiAgU3ludGhldGljVG91Y2hFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRvdWNoRXZlbnRJbnRlcmZhY2UpLFxuICBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgcHJvcGVydHlOYW1lOiAwLFxuICAgIGVsYXBzZWRUaW1lOiAwLFxuICAgIHBzZXVkb0VsZW1lbnQ6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFRyYW5zaXRpb25FdmVudEludGVyZmFjZSksXG4gIFdoZWVsRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVhcbiAgICAgICAgOiBcIndoZWVsRGVsdGFYXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWFxuICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJkZWx0YVlcIiBpbiBldmVudFxuICAgICAgICA/IGV2ZW50LmRlbHRhWVxuICAgICAgICA6IFwid2hlZWxEZWx0YVlcIiBpbiBldmVudFxuICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFZXG4gICAgICAgICAgOiBcIndoZWVsRGVsdGFcIiBpbiBldmVudFxuICAgICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVxuICAgICAgICAgICAgOiAwO1xuICAgIH0sXG4gICAgZGVsdGFaOiAwLFxuICAgIGRlbHRhTW9kZTogMFxuICB9KSxcbiAgU3ludGhldGljV2hlZWxFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFdoZWVsRXZlbnRJbnRlcmZhY2UpLFxuICBUb2dnbGVFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBuZXdTdGF0ZTogMCxcbiAgICBvbGRTdGF0ZTogMFxuICB9KSxcbiAgU3ludGhldGljVG9nZ2xlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb2dnbGVFdmVudEludGVyZmFjZSksXG4gIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXSxcbiAgY2FuVXNlQ29tcG9zaXRpb25FdmVudCA9IGNhblVzZURPTSAmJiBcIkNvbXBvc2l0aW9uRXZlbnRcIiBpbiB3aW5kb3csXG4gIGRvY3VtZW50TW9kZSA9IG51bGw7XG5jYW5Vc2VET00gJiZcbiAgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJlxuICAoZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IGNhblVzZURPTSAmJiBcIlRleHRFdmVudFwiIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlLFxuICB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA9XG4gICAgY2FuVXNlRE9NICYmXG4gICAgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8XG4gICAgICAoZG9jdW1lbnRNb2RlICYmIDggPCBkb2N1bWVudE1vZGUgJiYgMTEgPj0gZG9jdW1lbnRNb2RlKSksXG4gIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxcbiAgaGFzU3BhY2VLZXlwcmVzcyA9ICExO1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgIHJldHVybiAtMSAhPT0gRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSk7XG4gICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgIHJldHVybiAyMjkgIT09IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIHJldHVybiBcIm9iamVjdFwiID09PSB0eXBlb2YgbmF0aXZlRXZlbnQgJiYgXCJkYXRhXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/IG5hdGl2ZUV2ZW50LmRhdGFcbiAgICA6IG51bGw7XG59XG52YXIgaXNDb21wb3NpbmcgPSAhMTtcbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgaWYgKDMyICE9PSBuYXRpdmVFdmVudC53aGljaCkgcmV0dXJuIG51bGw7XG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gITA7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcbiAgICBjYXNlIFwidGV4dElucHV0XCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZG9tRXZlbnROYW1lID0gbmF0aXZlRXZlbnQuZGF0YSksXG4gICAgICAgIGRvbUV2ZW50TmFtZSA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzID8gbnVsbCA6IGRvbUV2ZW50TmFtZVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyhkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChpc0NvbXBvc2luZylcbiAgICByZXR1cm4gXCJjb21wb3NpdGlvbmVuZFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCAmJlxuICAgICAgICBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICA/ICgoZG9tRXZlbnROYW1lID0gZ2V0RGF0YSgpKSxcbiAgICAgICAgKGZhbGxiYWNrVGV4dCA9IHN0YXJ0VGV4dCA9IHJvb3QgPSBudWxsKSxcbiAgICAgICAgKGlzQ29tcG9zaW5nID0gITEpLFxuICAgICAgICBkb21FdmVudE5hbWUpXG4gICAgICA6IG51bGw7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmIChcbiAgICAgICAgIShuYXRpdmVFdmVudC5jdHJsS2V5IHx8IG5hdGl2ZUV2ZW50LmFsdEtleSB8fCBuYXRpdmVFdmVudC5tZXRhS2V5KSB8fFxuICAgICAgICAobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpXG4gICAgICApIHtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmNoYXIgJiYgMSA8IG5hdGl2ZUV2ZW50LmNoYXIubGVuZ3RoKVxuICAgICAgICAgIHJldHVybiBuYXRpdmVFdmVudC5jaGFyO1xuICAgICAgICBpZiAobmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgcmV0dXJuIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmIFwia29cIiAhPT0gbmF0aXZlRXZlbnQubG9jYWxlXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgY29sb3I6ICEwLFxuICBkYXRlOiAhMCxcbiAgZGF0ZXRpbWU6ICEwLFxuICBcImRhdGV0aW1lLWxvY2FsXCI6ICEwLFxuICBlbWFpbDogITAsXG4gIG1vbnRoOiAhMCxcbiAgbnVtYmVyOiAhMCxcbiAgcGFzc3dvcmQ6ICEwLFxuICByYW5nZTogITAsXG4gIHNlYXJjaDogITAsXG4gIHRlbDogITAsXG4gIHRleHQ6ICEwLFxuICB0aW1lOiAhMCxcbiAgdXJsOiAhMCxcbiAgd2VlazogITBcbn07XG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gXCJpbnB1dFwiID09PSBub2RlTmFtZVxuICAgID8gISFzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV1cbiAgICA6IFwidGV4dGFyZWFcIiA9PT0gbm9kZU5hbWVcbiAgICAgID8gITBcbiAgICAgIDogITE7XG59XG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGluc3QsXG4gIG5hdGl2ZUV2ZW50LFxuICB0YXJnZXRcbikge1xuICByZXN0b3JlVGFyZ2V0XG4gICAgPyByZXN0b3JlUXVldWVcbiAgICAgID8gcmVzdG9yZVF1ZXVlLnB1c2godGFyZ2V0KVxuICAgICAgOiAocmVzdG9yZVF1ZXVlID0gW3RhcmdldF0pXG4gICAgOiAocmVzdG9yZVRhcmdldCA9IHRhcmdldCk7XG4gIGluc3QgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMoaW5zdCwgXCJvbkNoYW5nZVwiKTtcbiAgMCA8IGluc3QubGVuZ3RoICYmXG4gICAgKChuYXRpdmVFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgIFwib25DaGFuZ2VcIixcbiAgICAgIFwiY2hhbmdlXCIsXG4gICAgICBudWxsLFxuICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICB0YXJnZXRcbiAgICApKSxcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogbmF0aXZlRXZlbnQsIGxpc3RlbmVyczogaW5zdCB9KSk7XG59XG52YXIgYWN0aXZlRWxlbWVudCQxID0gbnVsbCxcbiAgYWN0aXZlRWxlbWVudEluc3QkMSA9IG51bGw7XG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZGlzcGF0Y2hRdWV1ZSkge1xuICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCAwKTtcbn1cbmZ1bmN0aW9uIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KSB7XG4gIHZhciB0YXJnZXROb2RlID0gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KTtcbiAgaWYgKHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRhcmdldE5vZGUpKSByZXR1cm4gdGFyZ2V0SW5zdDtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MztcbiAgaWYgKGNhblVzZURPTSkge1xuICAgIHZhciBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxOCA9IFwib25pbnB1dFwiIGluIGRvY3VtZW50O1xuICAgIGlmICghaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTgpIHtcbiAgICAgIHZhciBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGVsZW1lbnQkanNjb21wJGlubGluZV80MTkuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLCBcInJldHVybjtcIik7XG4gICAgICBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxOCA9XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGVsZW1lbnQkanNjb21wJGlubGluZV80MTkub25pbnB1dDtcbiAgICB9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODMgPSBpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxODtcbiAgfSBlbHNlIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzID0gITE7XG4gIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9XG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODMgJiZcbiAgICAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCA5IDwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbn1cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuICBhY3RpdmVFbGVtZW50JDEgJiZcbiAgICAoYWN0aXZlRWxlbWVudCQxLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSksXG4gICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBhY3RpdmVFbGVtZW50JDEgPSBudWxsKSk7XG59XG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAoXG4gICAgXCJ2YWx1ZVwiID09PSBuYXRpdmVFdmVudC5wcm9wZXJ0eU5hbWUgJiZcbiAgICBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSlcbiAgKSB7XG4gICAgdmFyIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoXG4gICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgYWN0aXZlRWxlbWVudEluc3QkMSxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpXG4gICAgKTtcbiAgICBiYXRjaGVkVXBkYXRlcyQxKHJ1bkV2ZW50SW5CYXRjaCwgZGlzcGF0Y2hRdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbChkb21FdmVudE5hbWUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBcImZvY3VzaW5cIiA9PT0gZG9tRXZlbnROYW1lXG4gICAgPyAoc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSxcbiAgICAgIChhY3RpdmVFbGVtZW50JDEgPSB0YXJnZXQpLFxuICAgICAgKGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSB0YXJnZXRJbnN0KSxcbiAgICAgIGFjdGl2ZUVsZW1lbnQkMS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpKVxuICAgIDogXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiYgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lKSB7XG4gIGlmIChcbiAgICBcInNlbGVjdGlvbmNoYW5nZVwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleXVwXCIgPT09IGRvbUV2ZW50TmFtZSB8fFxuICAgIFwia2V5ZG93blwiID09PSBkb21FdmVudE5hbWVcbiAgKVxuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QkMSk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiY2xpY2tcIiA9PT0gZG9tRXZlbnROYW1lKSByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKFwiaW5wdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwiY2hhbmdlXCIgPT09IGRvbUV2ZW50TmFtZSlcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xufVxuZnVuY3Rpb24gaXMoeCwgeSkge1xuICByZXR1cm4gKHggPT09IHkgJiYgKDAgIT09IHggfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSk7XG59XG52YXIgb2JqZWN0SXMgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBpcztcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChvYmplY3RJcyhvYmpBLCBvYmpCKSkgcmV0dXJuICEwO1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakEgfHxcbiAgICBudWxsID09PSBvYmpBIHx8XG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG9iakIgfHxcbiAgICBudWxsID09PSBvYmpCXG4gIClcbiAgICByZXR1cm4gITE7XG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpLFxuICAgIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuICExO1xuICBmb3IgKGtleXNCID0gMDsga2V5c0IgPCBrZXlzQS5sZW5ndGg7IGtleXNCKyspIHtcbiAgICB2YXIgY3VycmVudEtleSA9IGtleXNBW2tleXNCXTtcbiAgICBpZiAoXG4gICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBjdXJyZW50S2V5KSB8fFxuICAgICAgIW9iamVjdElzKG9iakFbY3VycmVudEtleV0sIG9iakJbY3VycmVudEtleV0pXG4gICAgKVxuICAgICAgcmV0dXJuICExO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgZm9yICg7IG5vZGUgJiYgbm9kZS5maXJzdENoaWxkOyApIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBnZXRMZWFmTm9kZShyb290KTtcbiAgcm9vdCA9IDA7XG4gIGZvciAodmFyIG5vZGVFbmQ7IG5vZGU7ICkge1xuICAgIGlmICgzID09PSBub2RlLm5vZGVUeXBlKSB7XG4gICAgICBub2RlRW5kID0gcm9vdCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgICAgaWYgKHJvb3QgPD0gb2Zmc2V0ICYmIG5vZGVFbmQgPj0gb2Zmc2V0KVxuICAgICAgICByZXR1cm4geyBub2RlOiBub2RlLCBvZmZzZXQ6IG9mZnNldCAtIHJvb3QgfTtcbiAgICAgIHJvb3QgPSBub2RlRW5kO1xuICAgIH1cbiAgICBhOiB7XG4gICAgICBmb3IgKDsgbm9kZTsgKSB7XG4gICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgbm9kZSA9IHZvaWQgMDtcbiAgICB9XG4gICAgbm9kZSA9IGdldExlYWZOb2RlKG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgcmV0dXJuIG91dGVyTm9kZSAmJiBpbm5lck5vZGVcbiAgICA/IG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlXG4gICAgICA/ICEwXG4gICAgICA6IG91dGVyTm9kZSAmJiAzID09PSBvdXRlck5vZGUubm9kZVR5cGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IGlubmVyTm9kZSAmJiAzID09PSBpbm5lck5vZGUubm9kZVR5cGVcbiAgICAgICAgICA/IGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAgIDogXCJjb250YWluc1wiIGluIG91dGVyTm9kZVxuICAgICAgICAgICAgPyBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKVxuICAgICAgICAgICAgOiBvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb25cbiAgICAgICAgICAgICAgPyAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KVxuICAgICAgICAgICAgICA6ICExXG4gICAgOiAhMTtcbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnREZWVwKGNvbnRhaW5lckluZm8pIHtcbiAgY29udGFpbmVySW5mbyA9XG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgJiZcbiAgICBudWxsICE9IGNvbnRhaW5lckluZm8ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld1xuICAgICAgPyBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgIDogd2luZG93O1xuICBmb3IgKFxuICAgIHZhciBlbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudChjb250YWluZXJJbmZvLmRvY3VtZW50KTtcbiAgICBlbGVtZW50IGluc3RhbmNlb2YgY29udGFpbmVySW5mby5IVE1MSUZyYW1lRWxlbWVudDtcblxuICApIHtcbiAgICB0cnkge1xuICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlbGVtZW50LmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgIH1cbiAgICBpZiAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSBjb250YWluZXJJbmZvID0gZWxlbWVudC5jb250ZW50V2luZG93O1xuICAgIGVsc2UgYnJlYWs7XG4gICAgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5mdW5jdGlvbiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKFxuICAgIG5vZGVOYW1lICYmXG4gICAgKChcImlucHV0XCIgPT09IG5vZGVOYW1lICYmXG4gICAgICAoXCJ0ZXh0XCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInNlYXJjaFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJ0ZWxcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidXJsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInBhc3N3b3JkXCIgPT09IGVsZW0udHlwZSkpIHx8XG4gICAgICBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICBcInRydWVcIiA9PT0gZWxlbS5jb250ZW50RWRpdGFibGUpXG4gICk7XG59XG5mdW5jdGlvbiByZXN0b3JlU2VsZWN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24sIGNvbnRhaW5lckluZm8pIHtcbiAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAoY29udGFpbmVySW5mbyk7XG4gIGNvbnRhaW5lckluZm8gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gIGlmIChcbiAgICBjdXJGb2N1c2VkRWxlbSAhPT0gY29udGFpbmVySW5mbyAmJlxuICAgIGNvbnRhaW5lckluZm8gJiZcbiAgICBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgJiZcbiAgICBjb250YWluc05vZGUoY29udGFpbmVySW5mby5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY29udGFpbmVySW5mbylcbiAgKSB7XG4gICAgaWYgKG51bGwgIT09IHByaW9yU2VsZWN0aW9uUmFuZ2UgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGNvbnRhaW5lckluZm8pKVxuICAgICAgaWYgKFxuICAgICAgICAoKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24gPSBwcmlvclNlbGVjdGlvblJhbmdlLnN0YXJ0KSxcbiAgICAgICAgKGN1ckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25SYW5nZS5lbmQpLFxuICAgICAgICB2b2lkIDAgPT09IGN1ckZvY3VzZWRFbGVtICYmXG4gICAgICAgICAgKGN1ckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiksXG4gICAgICAgIFwic2VsZWN0aW9uU3RhcnRcIiBpbiBjb250YWluZXJJbmZvKVxuICAgICAgKVxuICAgICAgICAoY29udGFpbmVySW5mby5zZWxlY3Rpb25TdGFydCA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pLFxuICAgICAgICAgIChjb250YWluZXJJbmZvLnNlbGVjdGlvbkVuZCA9IE1hdGgubWluKFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0sXG4gICAgICAgICAgICBjb250YWluZXJJbmZvLnZhbHVlLmxlbmd0aFxuICAgICAgICAgICkpO1xuICAgICAgZWxzZSBpZiAoXG4gICAgICAgICgoY3VyRm9jdXNlZEVsZW0gPVxuICAgICAgICAgICgocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9XG4gICAgICAgICAgICBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQpICYmXG4gICAgICAgICAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvdyksXG4gICAgICAgIGN1ckZvY3VzZWRFbGVtLmdldFNlbGVjdGlvbilcbiAgICAgICkge1xuICAgICAgICBjdXJGb2N1c2VkRWxlbSA9IGN1ckZvY3VzZWRFbGVtLmdldFNlbGVjdGlvbigpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gY29udGFpbmVySW5mby50ZXh0Q29udGVudC5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBNYXRoLm1pbihwcmlvclNlbGVjdGlvblJhbmdlLnN0YXJ0LCBsZW5ndGgpO1xuICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlID1cbiAgICAgICAgICB2b2lkIDAgPT09IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kXG4gICAgICAgICAgICA/IHN0YXJ0XG4gICAgICAgICAgICA6IE1hdGgubWluKHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kLCBsZW5ndGgpO1xuICAgICAgICAhY3VyRm9jdXNlZEVsZW0uZXh0ZW5kICYmXG4gICAgICAgICAgc3RhcnQgPiBwcmlvclNlbGVjdGlvblJhbmdlICYmXG4gICAgICAgICAgKChsZW5ndGggPSBwcmlvclNlbGVjdGlvblJhbmdlKSxcbiAgICAgICAgICAocHJpb3JTZWxlY3Rpb25SYW5nZSA9IHN0YXJ0KSxcbiAgICAgICAgICAoc3RhcnQgPSBsZW5ndGgpKTtcbiAgICAgICAgbGVuZ3RoID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChjb250YWluZXJJbmZvLCBzdGFydCk7XG4gICAgICAgIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KFxuICAgICAgICAgIGNvbnRhaW5lckluZm8sXG4gICAgICAgICAgcHJpb3JTZWxlY3Rpb25SYW5nZVxuICAgICAgICApO1xuICAgICAgICBsZW5ndGggJiZcbiAgICAgICAgICBlbmRNYXJrZXIgJiZcbiAgICAgICAgICAoMSAhPT0gY3VyRm9jdXNlZEVsZW0ucmFuZ2VDb3VudCB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uYW5jaG9yTm9kZSAhPT0gbGVuZ3RoLm5vZGUgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmFuY2hvck9mZnNldCAhPT0gbGVuZ3RoLm9mZnNldCB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZm9jdXNOb2RlICE9PSBlbmRNYXJrZXIubm9kZSB8fFxuICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZm9jdXNPZmZzZXQgIT09IGVuZE1hcmtlci5vZmZzZXQpICYmXG4gICAgICAgICAgKChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID1cbiAgICAgICAgICAgIHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uY3JlYXRlUmFuZ2UoKSksXG4gICAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZXRTdGFydChsZW5ndGgubm9kZSwgbGVuZ3RoLm9mZnNldCksXG4gICAgICAgICAgY3VyRm9jdXNlZEVsZW0ucmVtb3ZlQWxsUmFuZ2VzKCksXG4gICAgICAgICAgc3RhcnQgPiBwcmlvclNlbGVjdGlvblJhbmdlXG4gICAgICAgICAgICA/IChjdXJGb2N1c2VkRWxlbS5hZGRSYW5nZShwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSxcbiAgICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KSlcbiAgICAgICAgICAgIDogKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2V0RW5kKFxuICAgICAgICAgICAgICAgIGVuZE1hcmtlci5ub2RlLFxuICAgICAgICAgICAgICAgIGVuZE1hcmtlci5vZmZzZXRcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgY3VyRm9jdXNlZEVsZW0uYWRkUmFuZ2UocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikpKTtcbiAgICAgIH1cbiAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID0gW107XG4gICAgZm9yIChcbiAgICAgIGN1ckZvY3VzZWRFbGVtID0gY29udGFpbmVySW5mbztcbiAgICAgIChjdXJGb2N1c2VkRWxlbSA9IGN1ckZvY3VzZWRFbGVtLnBhcmVudE5vZGUpO1xuXG4gICAgKVxuICAgICAgMSA9PT0gY3VyRm9jdXNlZEVsZW0ubm9kZVR5cGUgJiZcbiAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5wdXNoKHtcbiAgICAgICAgICBlbGVtZW50OiBjdXJGb2N1c2VkRWxlbSxcbiAgICAgICAgICBsZWZ0OiBjdXJGb2N1c2VkRWxlbS5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHRvcDogY3VyRm9jdXNlZEVsZW0uc2Nyb2xsVG9wXG4gICAgICAgIH0pO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRhaW5lckluZm8uZm9jdXMgJiYgY29udGFpbmVySW5mby5mb2N1cygpO1xuICAgIGZvciAoXG4gICAgICBjb250YWluZXJJbmZvID0gMDtcbiAgICAgIGNvbnRhaW5lckluZm8gPCBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnRhaW5lckluZm8rK1xuICAgIClcbiAgICAgIChjdXJGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb25bY29udGFpbmVySW5mb10pLFxuICAgICAgICAoY3VyRm9jdXNlZEVsZW0uZWxlbWVudC5zY3JvbGxMZWZ0ID0gY3VyRm9jdXNlZEVsZW0ubGVmdCksXG4gICAgICAgIChjdXJGb2N1c2VkRWxlbS5lbGVtZW50LnNjcm9sbFRvcCA9IGN1ckZvY3VzZWRFbGVtLnRvcCk7XG4gIH1cbn1cbnZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPVxuICAgIGNhblVzZURPTSAmJiBcImRvY3VtZW50TW9kZVwiIGluIGRvY3VtZW50ICYmIDExID49IGRvY3VtZW50LmRvY3VtZW50TW9kZSxcbiAgYWN0aXZlRWxlbWVudCA9IG51bGwsXG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbCxcbiAgbGFzdFNlbGVjdGlvbiA9IG51bGwsXG4gIG1vdXNlRG93biA9ICExO1xuZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBkb2MgPVxuICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXQuZG9jdW1lbnRcbiAgICAgIDogOSA9PT0gbmF0aXZlRXZlbnRUYXJnZXQubm9kZVR5cGVcbiAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICA6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gIG1vdXNlRG93biB8fFxuICAgIG51bGwgPT0gYWN0aXZlRWxlbWVudCB8fFxuICAgIGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoZG9jKSB8fFxuICAgICgoZG9jID0gYWN0aXZlRWxlbWVudCksXG4gICAgXCJzZWxlY3Rpb25TdGFydFwiIGluIGRvYyAmJiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZG9jKVxuICAgICAgPyAoZG9jID0geyBzdGFydDogZG9jLnNlbGVjdGlvblN0YXJ0LCBlbmQ6IGRvYy5zZWxlY3Rpb25FbmQgfSlcbiAgICAgIDogKChkb2MgPSAoXG4gICAgICAgICAgKGRvYy5vd25lckRvY3VtZW50ICYmIGRvYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvd1xuICAgICAgICApLmdldFNlbGVjdGlvbigpKSxcbiAgICAgICAgKGRvYyA9IHtcbiAgICAgICAgICBhbmNob3JOb2RlOiBkb2MuYW5jaG9yTm9kZSxcbiAgICAgICAgICBhbmNob3JPZmZzZXQ6IGRvYy5hbmNob3JPZmZzZXQsXG4gICAgICAgICAgZm9jdXNOb2RlOiBkb2MuZm9jdXNOb2RlLFxuICAgICAgICAgIGZvY3VzT2Zmc2V0OiBkb2MuZm9jdXNPZmZzZXRcbiAgICAgICAgfSkpLFxuICAgIChsYXN0U2VsZWN0aW9uICYmIHNoYWxsb3dFcXVhbChsYXN0U2VsZWN0aW9uLCBkb2MpKSB8fFxuICAgICAgKChsYXN0U2VsZWN0aW9uID0gZG9jKSxcbiAgICAgIChkb2MgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMoYWN0aXZlRWxlbWVudEluc3QsIFwib25TZWxlY3RcIikpLFxuICAgICAgMCA8IGRvYy5sZW5ndGggJiZcbiAgICAgICAgKChuYXRpdmVFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgICAgICBcIm9uU2VsZWN0XCIsXG4gICAgICAgICAgXCJzZWxlY3RcIixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICkpLFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogbmF0aXZlRXZlbnQsIGxpc3RlbmVyczogZG9jIH0pLFxuICAgICAgICAobmF0aXZlRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudCkpKSk7XG59XG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbXCJXZWJraXRcIiArIHN0eWxlUHJvcF0gPSBcIndlYmtpdFwiICsgZXZlbnROYW1lO1xuICBwcmVmaXhlc1tcIk1velwiICsgc3R5bGVQcm9wXSA9IFwibW96XCIgKyBldmVudE5hbWU7XG4gIHJldHVybiBwcmVmaXhlcztcbn1cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgICBhbmltYXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25FbmRcIiksXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLFxuICAgIGFuaW1hdGlvbnN0YXJ0OiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uU3RhcnRcIiksXG4gICAgdHJhbnNpdGlvbnJ1bjogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uUnVuXCIpLFxuICAgIHRyYW5zaXRpb25zdGFydDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uU3RhcnRcIiksXG4gICAgdHJhbnNpdGlvbmNhbmNlbDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uQ2FuY2VsXCIpLFxuICAgIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvbkVuZFwiKVxuICB9LFxuICBwcmVmaXhlZEV2ZW50TmFtZXMgPSB7fSxcbiAgc3R5bGUgPSB7fTtcbmNhblVzZURPTSAmJlxuICAoKHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSksXG4gIFwiQW5pbWF0aW9uRXZlbnRcIiBpbiB3aW5kb3cgfHxcbiAgICAoZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sXG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sXG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXG4gIFwiVHJhbnNpdGlvbkV2ZW50XCIgaW4gd2luZG93IHx8XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gIGlmICghdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXSkgcmV0dXJuIGV2ZW50TmFtZTtcbiAgdmFyIHByZWZpeE1hcCA9IHZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0sXG4gICAgc3R5bGVQcm9wO1xuICBmb3IgKHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApXG4gICAgaWYgKHByZWZpeE1hcC5oYXNPd25Qcm9wZXJ0eShzdHlsZVByb3ApICYmIHN0eWxlUHJvcCBpbiBzdHlsZSlcbiAgICAgIHJldHVybiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXSk7XG4gIHJldHVybiBldmVudE5hbWU7XG59XG52YXIgQU5JTUFUSU9OX0VORCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uZW5kXCIpLFxuICBBTklNQVRJT05fSVRFUkFUSU9OID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksXG4gIEFOSU1BVElPTl9TVEFSVCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uc3RhcnRcIiksXG4gIFRSQU5TSVRJT05fUlVOID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9ucnVuXCIpLFxuICBUUkFOU0lUSU9OX1NUQVJUID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uc3RhcnRcIiksXG4gIFRSQU5TSVRJT05fQ0FOQ0VMID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uY2FuY2VsXCIpLFxuICBUUkFOU0lUSU9OX0VORCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbmVuZFwiKSxcbiAgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMgPSBuZXcgTWFwKCksXG4gIHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzID1cbiAgICBcImFib3J0IGF1eENsaWNrIGJlZm9yZVRvZ2dsZSBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHNjcm9sbEVuZCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKTtcbmZ1bmN0aW9uIHJlZ2lzdGVyU2ltcGxlRXZlbnQoZG9tRXZlbnROYW1lLCByZWFjdE5hbWUpIHtcbiAgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuc2V0KGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lKTtcbiAgcmVnaXN0ZXJUd29QaGFzZUV2ZW50KHJlYWN0TmFtZSwgW2RvbUV2ZW50TmFtZV0pO1xufVxudmFyIGNvbmN1cnJlbnRRdWV1ZXMgPSBbXSxcbiAgY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCxcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gMDtcbmZ1bmN0aW9uIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSB7XG4gIGZvciAoXG4gICAgdmFyIGVuZEluZGV4ID0gY29uY3VycmVudFF1ZXVlc0luZGV4LFxuICAgICAgaSA9IChjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgPSBjb25jdXJyZW50UXVldWVzSW5kZXggPSAwKTtcbiAgICBpIDwgZW5kSW5kZXg7XG5cbiAgKSB7XG4gICAgdmFyIGZpYmVyID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBxdWV1ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgdXBkYXRlID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIHZhciBsYW5lID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICBjb25jdXJyZW50UXVldWVzW2krK10gPSBudWxsO1xuICAgIGlmIChudWxsICE9PSBxdWV1ZSAmJiBudWxsICE9PSB1cGRhdGUpIHtcbiAgICAgIHZhciBwZW5kaW5nID0gcXVldWUucGVuZGluZztcbiAgICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgICAgIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgfVxuICAgIDAgIT09IGxhbmUgJiYgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIHVwZGF0ZSwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUkMShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IGZpYmVyO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHF1ZXVlO1xuICBjb25jdXJyZW50UXVldWVzW2NvbmN1cnJlbnRRdWV1ZXNJbmRleCsrXSA9IHVwZGF0ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBsYW5lO1xuICBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMgfD0gbGFuZTtcbiAgZmliZXIubGFuZXMgfD0gbGFuZTtcbiAgZmliZXIgPSBmaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5sYW5lcyB8PSBsYW5lKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShmaWJlciwgcXVldWUsIHVwZGF0ZSwgbGFuZSkge1xuICBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICByZXR1cm4gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBudWxsLCBudWxsLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3Qoc291cmNlRmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICBzb3VyY2VGaWJlci5sYW5lcyB8PSBsYW5lO1xuICB2YXIgYWx0ZXJuYXRlID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSBsYW5lKTtcbiAgZm9yICh2YXIgaXNIaWRkZW4gPSAhMSwgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgfD0gbGFuZSksXG4gICAgICAoYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZSksXG4gICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgMjIgPT09IHBhcmVudC50YWcgJiZcbiAgICAgICAgKChzb3VyY2VGaWJlciA9IHBhcmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICBudWxsID09PSBzb3VyY2VGaWJlciB8fCBzb3VyY2VGaWJlci5fdmlzaWJpbGl0eSAmIDEgfHwgKGlzSGlkZGVuID0gITApKSxcbiAgICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksXG4gICAgICAocGFyZW50ID0gcGFyZW50LnJldHVybik7XG4gIGlzSGlkZGVuICYmXG4gICAgbnVsbCAhPT0gdXBkYXRlICYmXG4gICAgMyA9PT0gc291cmNlRmliZXIudGFnICYmXG4gICAgKChwYXJlbnQgPSBzb3VyY2VGaWJlci5zdGF0ZU5vZGUpLFxuICAgIChpc0hpZGRlbiA9IDMxIC0gY2x6MzIobGFuZSkpLFxuICAgIChwYXJlbnQgPSBwYXJlbnQuaGlkZGVuVXBkYXRlcyksXG4gICAgKHNvdXJjZUZpYmVyID0gcGFyZW50W2lzSGlkZGVuXSksXG4gICAgbnVsbCA9PT0gc291cmNlRmliZXJcbiAgICAgID8gKHBhcmVudFtpc0hpZGRlbl0gPSBbdXBkYXRlXSlcbiAgICAgIDogc291cmNlRmliZXIucHVzaCh1cGRhdGUpLFxuICAgICh1cGRhdGUubGFuZSA9IGxhbmUgfCA1MzY4NzA5MTIpKTtcbn1cbmZ1bmN0aW9uIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoc291cmNlRmliZXIpIHtcbiAgaWYgKDUwIDwgbmVzdGVkVXBkYXRlQ291bnQpXG4gICAgdGhyb3cgKFxuICAgICAgKChuZXN0ZWRVcGRhdGVDb3VudCA9IDApLFxuICAgICAgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGwpLFxuICAgICAgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODUpKSlcbiAgICApO1xuICBmb3IgKHZhciBwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm47IG51bGwgIT09IHBhcmVudDsgKVxuICAgIChzb3VyY2VGaWJlciA9IHBhcmVudCksIChwYXJlbnQgPSBzb3VyY2VGaWJlci5yZXR1cm4pO1xuICByZXR1cm4gMyA9PT0gc291cmNlRmliZXIudGFnID8gc291cmNlRmliZXIuc3RhdGVOb2RlIDogbnVsbDtcbn1cbnZhciBlbXB0eUNvbnRleHRPYmplY3QgPSB7fSxcbiAgQ2FwdHVyZWRTdGFja3MgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZSkge1xuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlICYmIG51bGwgIT09IHZhbHVlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gQ2FwdHVyZWRTdGFja3MuZ2V0KHZhbHVlKTtcbiAgICBpZiAodm9pZCAwICE9PSBleGlzdGluZykgcmV0dXJuIGV4aXN0aW5nO1xuICAgIHNvdXJjZSA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gICAgfTtcbiAgICBDYXB0dXJlZFN0YWNrcy5zZXQodmFsdWUsIHNvdXJjZSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICBzdGFjazogZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHNvdXJjZSlcbiAgfTtcbn1cbnZhciBmb3JrU3RhY2sgPSBbXSxcbiAgZm9ya1N0YWNrSW5kZXggPSAwLFxuICB0cmVlRm9ya1Byb3ZpZGVyID0gbnVsbCxcbiAgdHJlZUZvcmtDb3VudCA9IDAsXG4gIGlkU3RhY2sgPSBbXSxcbiAgaWRTdGFja0luZGV4ID0gMCxcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IG51bGwsXG4gIHRyZWVDb250ZXh0SWQgPSAxLFxuICB0cmVlQ29udGV4dE92ZXJmbG93ID0gXCJcIjtcbmZ1bmN0aW9uIHB1c2hUcmVlRm9yayh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbikge1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya0NvdW50O1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya1Byb3ZpZGVyO1xuICB0cmVlRm9ya1Byb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHRyZWVGb3JrQ291bnQgPSB0b3RhbENoaWxkcmVuO1xufVxuZnVuY3Rpb24gcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbiwgaW5kZXgpIHtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkO1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlcjtcbiAgdHJlZUNvbnRleHRQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgYmFzZUlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIHZhciBiYXNlTGVuZ3RoID0gMzIgLSBjbHozMihiYXNlSWRXaXRoTGVhZGluZ0JpdCkgLSAxO1xuICBiYXNlSWRXaXRoTGVhZGluZ0JpdCAmPSB+KDEgPDwgYmFzZUxlbmd0aCk7XG4gIGluZGV4ICs9IDE7XG4gIHZhciBsZW5ndGggPSAzMiAtIGNsejMyKHRvdGFsQ2hpbGRyZW4pICsgYmFzZUxlbmd0aDtcbiAgaWYgKDMwIDwgbGVuZ3RoKSB7XG4gICAgdmFyIG51bWJlck9mT3ZlcmZsb3dCaXRzID0gYmFzZUxlbmd0aCAtIChiYXNlTGVuZ3RoICUgNSk7XG4gICAgbGVuZ3RoID0gKFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJlxuICAgICAgKCgxIDw8IG51bWJlck9mT3ZlcmZsb3dCaXRzKSAtIDEpXG4gICAgKS50b1N0cmluZygzMik7XG4gICAgYmFzZUlkV2l0aExlYWRpbmdCaXQgPj49IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIGJhc2VMZW5ndGggLT0gbnVtYmVyT2ZPdmVyZmxvd0JpdHM7XG4gICAgdHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCAoMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGgpKSB8XG4gICAgICAoaW5kZXggPDwgYmFzZUxlbmd0aCkgfFxuICAgICAgYmFzZUlkV2l0aExlYWRpbmdCaXQ7XG4gICAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IGxlbmd0aCArIHdvcmtJblByb2dyZXNzO1xuICB9IGVsc2VcbiAgICAodHJlZUNvbnRleHRJZCA9XG4gICAgICAoMSA8PCBsZW5ndGgpIHwgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHwgYmFzZUlkV2l0aExlYWRpbmdCaXQpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSB3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKSB7XG4gIG51bGwgIT09IHdvcmtJblByb2dyZXNzLnJldHVybiAmJlxuICAgIChwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIDEpLCBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCAxLCAwKSk7XG59XG5mdW5jdGlvbiBwb3BUcmVlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBmb3IgKDsgd29ya0luUHJvZ3Jlc3MgPT09IHRyZWVGb3JrUHJvdmlkZXI7IClcbiAgICAodHJlZUZvcmtQcm92aWRlciA9IGZvcmtTdGFja1stLWZvcmtTdGFja0luZGV4XSksXG4gICAgICAoZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVGb3JrQ291bnQgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKTtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlQ29udGV4dFByb3ZpZGVyOyApXG4gICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlQ29udGV4dElkID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpO1xufVxudmFyIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbCxcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwsXG4gIGlzSHlkcmF0aW5nID0gITEsXG4gIGh5ZHJhdGlvbkVycm9ycyA9IG51bGwsXG4gIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSxcbiAgSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUxOSkpO1xuZnVuY3Rpb24gdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDE4LCBcIlwiKSk7XG4gIHF1ZXVlSHlkcmF0aW9uRXJyb3IoY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIGZpYmVyKSk7XG4gIHRocm93IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZShmaWJlcikge1xuICB2YXIgaW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGUsXG4gICAgdHlwZSA9IGZpYmVyLnR5cGUsXG4gICAgcHJvcHMgPSBmaWJlci5tZW1vaXplZFByb3BzO1xuICBpbnN0YW5jZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpYmVyO1xuICBpbnN0YW5jZVtpbnRlcm5hbFByb3BzS2V5XSA9IHByb3BzO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiZGlhbG9nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2FuY2VsXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInZpZGVvXCI6XG4gICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICBmb3IgKHR5cGUgPSAwOyB0eXBlIDwgbWVkaWFFdmVudFR5cGVzLmxlbmd0aDsgdHlwZSsrKVxuICAgICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KG1lZGlhRXZlbnRUeXBlc1t0eXBlXSwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNvdXJjZVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbWdcIjpcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGluc3RhbmNlKTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkZXRhaWxzXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgaW5pdElucHV0KFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgcHJvcHMudmFsdWUsXG4gICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BzLnR5cGUsXG4gICAgICAgIHByb3BzLm5hbWUsXG4gICAgICAgICEwXG4gICAgICApO1xuICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBpbnN0YW5jZSksXG4gICAgICAgIGluaXRUZXh0YXJlYShpbnN0YW5jZSwgcHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSwgcHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICB0cmFjayhpbnN0YW5jZSk7XG4gIH1cbiAgdHlwZSA9IHByb3BzLmNoaWxkcmVuO1xuICAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcIm51bWJlclwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwiYmlnaW50XCIgIT09IHR5cGVvZiB0eXBlKSB8fFxuICBpbnN0YW5jZS50ZXh0Q29udGVudCA9PT0gXCJcIiArIHR5cGUgfHxcbiAgITAgPT09IHByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyB8fFxuICBjaGVja0ZvclVubWF0Y2hlZFRleHQoaW5zdGFuY2UudGV4dENvbnRlbnQsIHR5cGUpXG4gICAgPyAobnVsbCAhPSBwcm9wcy5wb3BvdmVyICYmXG4gICAgICAgIChsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGluc3RhbmNlKSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSkpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vblNjcm9sbCAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGluc3RhbmNlKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGxFbmQgJiZcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbGVuZFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uQ2xpY2sgJiYgKGluc3RhbmNlLm9uY2xpY2sgPSBub29wJDEpLFxuICAgICAgKGluc3RhbmNlID0gITApKVxuICAgIDogKGluc3RhbmNlID0gITEpO1xuICBpbnN0YW5jZSB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xufVxuZnVuY3Rpb24gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcikge1xuICBmb3IgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXIucmV0dXJuOyBoeWRyYXRpb25QYXJlbnRGaWJlcjsgKVxuICAgIHN3aXRjaCAoaHlkcmF0aW9uUGFyZW50RmliZXIudGFnKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICBjYXNlIDI3OlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgNTpcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBoeWRyYXRpb25QYXJlbnRGaWJlci5yZXR1cm47XG4gICAgfVxufVxuZnVuY3Rpb24gcG9wSHlkcmF0aW9uU3RhdGUoZmliZXIpIHtcbiAgaWYgKGZpYmVyICE9PSBoeWRyYXRpb25QYXJlbnRGaWJlcikgcmV0dXJuICExO1xuICBpZiAoIWlzSHlkcmF0aW5nKSByZXR1cm4gcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlciksIChpc0h5ZHJhdGluZyA9ICEwKSwgITE7XG4gIHZhciBzaG91bGRDbGVhciA9ICExLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgaWYgKChKU0NvbXBpbGVyX3RlbXAgPSAzICE9PSBmaWJlci50YWcgJiYgMjcgIT09IGZpYmVyLnRhZykpIHtcbiAgICBpZiAoKEpTQ29tcGlsZXJfdGVtcCA9IDUgPT09IGZpYmVyLnRhZykpXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gZmliZXIudHlwZSksXG4gICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICEoXCJmb3JtXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJiBcImJ1dHRvblwiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoZmliZXIudHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcykpO1xuICAgIEpTQ29tcGlsZXJfdGVtcCA9ICFKU0NvbXBpbGVyX3RlbXA7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wICYmIChzaG91bGRDbGVhciA9ICEwKTtcbiAgc2hvdWxkQ2xlYXIgJiYgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSAmJiB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goZmliZXIpO1xuICBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKTtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICBmaWJlciA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgZmliZXIgPSBudWxsICE9PSBmaWJlciA/IGZpYmVyLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgIGlmICghZmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE3KSk7XG4gICAgYToge1xuICAgICAgZmliZXIgPSBmaWJlci5uZXh0U2libGluZztcbiAgICAgIGZvciAoc2hvdWxkQ2xlYXIgPSAwOyBmaWJlcjsgKSB7XG4gICAgICAgIGlmICg4ID09PSBmaWJlci5ub2RlVHlwZSlcbiAgICAgICAgICBpZiAoKChKU0NvbXBpbGVyX3RlbXAgPSBmaWJlci5kYXRhKSwgXCIvJFwiID09PSBKU0NvbXBpbGVyX3RlbXApKSB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gc2hvdWxkQ2xlYXIpIHtcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNob3VsZENsZWFyLS07XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAoXCIkXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQhXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICBcIiQ/XCIgIT09IEpTQ29tcGlsZXJfdGVtcCkgfHxcbiAgICAgICAgICAgICAgc2hvdWxkQ2xlYXIrKztcbiAgICAgICAgZmliZXIgPSBmaWJlci5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgfSBlbHNlXG4gICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyXG4gICAgICA/IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLnN0YXRlTm9kZS5uZXh0U2libGluZylcbiAgICAgIDogbnVsbDtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVzZXRIeWRyYXRpb25TdGF0ZSgpIHtcbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyID0gbnVsbDtcbiAgaXNIeWRyYXRpbmcgPSAhMTtcbn1cbmZ1bmN0aW9uIHF1ZXVlSHlkcmF0aW9uRXJyb3IoZXJyb3IpIHtcbiAgbnVsbCA9PT0gaHlkcmF0aW9uRXJyb3JzXG4gICAgPyAoaHlkcmF0aW9uRXJyb3JzID0gW2Vycm9yXSlcbiAgICA6IGh5ZHJhdGlvbkVycm9ycy5wdXNoKGVycm9yKTtcbn1cbnZhciBTdXNwZW5zZUV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYwKSksXG4gIFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc0KSksXG4gIG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSA9IHsgdGhlbjogZnVuY3Rpb24gKCkge30gfTtcbmZ1bmN0aW9uIGlzVGhlbmFibGVSZXNvbHZlZCh0aGVuYWJsZSkge1xuICB0aGVuYWJsZSA9IHRoZW5hYmxlLnN0YXR1cztcbiAgcmV0dXJuIFwiZnVsZmlsbGVkXCIgPT09IHRoZW5hYmxlIHx8IFwicmVqZWN0ZWRcIiA9PT0gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBub29wJDMoKSB7fVxuZnVuY3Rpb24gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdGhlbmFibGUsIGluZGV4KSB7XG4gIGluZGV4ID0gdGhlbmFibGVTdGF0ZVtpbmRleF07XG4gIHZvaWQgMCA9PT0gaW5kZXhcbiAgICA/IHRoZW5hYmxlU3RhdGUucHVzaCh0aGVuYWJsZSlcbiAgICA6IGluZGV4ICE9PSB0aGVuYWJsZSAmJiAodGhlbmFibGUudGhlbihub29wJDMsIG5vb3AkMyksICh0aGVuYWJsZSA9IGluZGV4KSk7XG4gIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgIGlmICh0aGVuYWJsZVN0YXRlID09PSBTdXNwZW5zZUV4Y2VwdGlvbilcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODMpKTtcbiAgICAgIHRocm93IHRoZW5hYmxlU3RhdGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzKSB0aGVuYWJsZS50aGVuKG5vb3AkMywgbm9vcCQzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGVuYWJsZVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgICBpZiAobnVsbCAhPT0gdGhlbmFibGVTdGF0ZSAmJiAxMDAgPCB0aGVuYWJsZVN0YXRlLnNoZWxsU3VzcGVuZENvdW50ZXIpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODIpKTtcbiAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKGZ1bGZpbGxlZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICAgICAgICB2YXIgZnVsZmlsbGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdmFyIHJlamVjdGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgcmVqZWN0ZWRUaGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgICAgIHJlamVjdGVkVGhlbmFibGUucmVhc29uID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgICAgICBpZiAodGhlbmFibGVTdGF0ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb24pXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4MykpO1xuICAgICAgICAgIHRocm93IHRoZW5hYmxlU3RhdGU7XG4gICAgICB9XG4gICAgICBzdXNwZW5kZWRUaGVuYWJsZSA9IHRoZW5hYmxlO1xuICAgICAgdGhyb3cgU3VzcGVuc2VFeGNlcHRpb247XG4gIH1cbn1cbnZhciBzdXNwZW5kZWRUaGVuYWJsZSA9IG51bGw7XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFRoZW5hYmxlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1OSkpO1xuICB2YXIgdGhlbmFibGUgPSBzdXNwZW5kZWRUaGVuYWJsZTtcbiAgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG52YXIgdGhlbmFibGVTdGF0ZSQxID0gbnVsbCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSA9IDA7XG5mdW5jdGlvbiB1bndyYXBUaGVuYWJsZSh0aGVuYWJsZSkge1xuICB2YXIgaW5kZXggPSB0aGVuYWJsZUluZGV4Q291bnRlciQxO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciQxICs9IDE7XG4gIG51bGwgPT09IHRoZW5hYmxlU3RhdGUkMSAmJiAodGhlbmFibGVTdGF0ZSQxID0gW10pO1xuICByZXR1cm4gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSQxLCB0aGVuYWJsZSwgaW5kZXgpO1xufVxuZnVuY3Rpb24gY29lcmNlUmVmKHdvcmtJblByb2dyZXNzLCBlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBlbGVtZW50LnByb3BzLnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmID0gdm9pZCAwICE9PSBlbGVtZW50ID8gZWxlbWVudCA6IG51bGw7XG59XG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSB7XG4gIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSlcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyNSkpO1xuICByZXR1cm5GaWJlciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdDaGlsZCk7XG4gIHRocm93IEVycm9yKFxuICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoXG4gICAgICAzMSxcbiAgICAgIFwiW29iamVjdCBPYmplY3RdXCIgPT09IHJldHVybkZpYmVyXG4gICAgICAgID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKG5ld0NoaWxkKS5qb2luKFwiLCBcIikgKyBcIn1cIlxuICAgICAgICA6IHJldHVybkZpYmVyXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUxhenkobGF6eVR5cGUpIHtcbiAgdmFyIGluaXQgPSBsYXp5VHlwZS5faW5pdDtcbiAgcmV0dXJuIGluaXQobGF6eVR5cGUuX3BheWxvYWQpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgdmFyIGRlbGV0aW9ucyA9IHJldHVybkZpYmVyLmRlbGV0aW9ucztcbiAgICAgIG51bGwgPT09IGRlbGV0aW9uc1xuICAgICAgICA/ICgocmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2NoaWxkVG9EZWxldGVdKSwgKHJldHVybkZpYmVyLmZsYWdzIHw9IDE2KSlcbiAgICAgICAgOiBkZWxldGlvbnMucHVzaChjaGlsZFRvRGVsZXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSByZXR1cm4gbnVsbDtcbiAgICBmb3IgKDsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIG1hcFJlbWFpbmluZ0NoaWxkcmVuKGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgZm9yICh2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG5ldyBNYXAoKTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkLmtleVxuICAgICAgICA/IGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGN1cnJlbnRGaXJzdENoaWxkLmtleSwgY3VycmVudEZpcnN0Q2hpbGQpXG4gICAgICAgIDogZXhpc3RpbmdDaGlsZHJlbi5zZXQoY3VycmVudEZpcnN0Q2hpbGQuaW5kZXgsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cbiAgZnVuY3Rpb24gdXNlRmliZXIoZmliZXIsIHBlbmRpbmdQcm9wcykge1xuICAgIGZpYmVyID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZmliZXIsIHBlbmRpbmdQcm9wcyk7XG4gICAgZmliZXIuaW5kZXggPSAwO1xuICAgIGZpYmVyLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBmaWJlcjtcbiAgfVxuICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpXG4gICAgICByZXR1cm4gKG5ld0ZpYmVyLmZsYWdzIHw9IDEwNDg1NzYpLCBsYXN0UGxhY2VkSW5kZXg7XG4gICAgbmV3SW5kZXggPSBuZXdGaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgIT09IG5ld0luZGV4KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5ld0luZGV4ID0gbmV3SW5kZXguaW5kZXgpLFxuICAgICAgICBuZXdJbmRleCA8IGxhc3RQbGFjZWRJbmRleFxuICAgICAgICAgID8gKChuZXdGaWJlci5mbGFncyB8PSAzMzU1NDQzNCksIGxhc3RQbGFjZWRJbmRleClcbiAgICAgICAgICA6IG5ld0luZGV4XG4gICAgICApO1xuICAgIG5ld0ZpYmVyLmZsYWdzIHw9IDMzNTU0NDM0O1xuICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gcGxhY2VTaW5nbGVDaGlsZChuZXdGaWJlcikge1xuICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgKG5ld0ZpYmVyLmZsYWdzIHw9IDMzNTU0NDM0KTtcbiAgICByZXR1cm4gbmV3RmliZXI7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGN1cnJlbnQsIHRleHRDb250ZW50LCBsYW5lcykge1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IDYgIT09IGN1cnJlbnQudGFnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcykpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIHRleHRDb250ZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQsIGxhbmVzKSB7XG4gICAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuICAgIGlmIChlbGVtZW50VHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSlcbiAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGxhbmVzLFxuICAgICAgICBlbGVtZW50LmtleVxuICAgICAgKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoY3VycmVudC5lbGVtZW50VHlwZSA9PT0gZWxlbWVudFR5cGUgfHxcbiAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50VHlwZSAmJlxuICAgICAgICAgIG51bGwgIT09IGVsZW1lbnRUeXBlICYmXG4gICAgICAgICAgZWxlbWVudFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJlxuICAgICAgICAgIHJlc29sdmVMYXp5KGVsZW1lbnRUeXBlKSA9PT0gY3VycmVudC50eXBlKSlcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGVsZW1lbnQucHJvcHMpKSxcbiAgICAgICAgY29lcmNlUmVmKGN1cnJlbnQsIGVsZW1lbnQpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIGVsZW1lbnQudHlwZSxcbiAgICAgIGVsZW1lbnQua2V5LFxuICAgICAgZWxlbWVudC5wcm9wcyxcbiAgICAgIG51bGwsXG4gICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgbGFuZXNcbiAgICApO1xuICAgIGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCwgcG9ydGFsLCBsYW5lcykge1xuICAgIGlmIChcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgIDQgIT09IGN1cnJlbnQudGFnIHx8XG4gICAgICBjdXJyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBwb3J0YWwuY2hpbGRyZW4gfHwgW10pO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGZyYWdtZW50LCBsYW5lcywga2V5KSB7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgNyAhPT0gY3VycmVudC50YWcpXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgbGFuZXMsXG4gICAgICAgICAga2V5XG4gICAgICAgICkpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGZyYWdtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobmV3Q2hpbGQgPSBjcmVhdGVGaWJlckZyb21UZXh0KFxuICAgICAgICAgIFwiXCIgKyBuZXdDaGlsZCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICkpLFxuICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBuZXdDaGlsZFxuICAgICAgKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAobGFuZXMgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUsXG4gICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICBuZXdDaGlsZCA9IGluaXQobmV3Q2hpbGQuX3BheWxvYWQpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksIGxhbmVzKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIHZhciBrZXkgPSBudWxsICE9PSBvbGRGaWJlciA/IG9sZEZpYmVyLmtleSA6IG51bGw7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIG51bGwgIT09IGtleVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgb2xkRmliZXIsIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiBudWxsICE9PSBrZXlcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzLCBudWxsKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGcm9tTWFwKFxuICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgcmV0dXJuRmliZXIsXG4gICAgbmV3SWR4LFxuICAgIG5ld0NoaWxkLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChleGlzdGluZ0NoaWxkcmVuID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsKSxcbiAgICAgICAgdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICApO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICkgfHwgbnVsbCksXG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPVxuICAgICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmdldChcbiAgICAgICAgICAgICAgICBudWxsID09PSBuZXdDaGlsZC5rZXkgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgKSB8fCBudWxsKSxcbiAgICAgICAgICAgIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgbmV3Q2hpbGQgPSBpbml0KG5ld0NoaWxkLl9wYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbCksXG4gICAgICAgICAgdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcywgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbDtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDtcbiAgICAgIG5ld0lkeCsrXG4gICAgKSB7XG4gICAgICBvbGRGaWJlci5pbmRleCA+IG5ld0lkeFxuICAgICAgICA/ICgobmV4dE9sZEZpYmVyID0gb2xkRmliZXIpLCAob2xkRmliZXIgPSBudWxsKSlcbiAgICAgICAgOiAobmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZyk7XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgaWYgKG51bGwgPT09IG5ld0ZpYmVyKSB7XG4gICAgICAgIG51bGwgPT09IG9sZEZpYmVyICYmIChvbGRGaWJlciA9IG5leHRPbGRGaWJlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICBvbGRGaWJlciAmJlxuICAgICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChuZXdGaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCk7XG4gICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcilcbiAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXIpO1xuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksXG4gICAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KSxcbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZFxuICAgICAgKTtcbiAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgIGZvciAoOyBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKVxuICAgICAgICAob2xkRmliZXIgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgbGFuZXMpKSxcbiAgICAgICAgICBudWxsICE9PSBvbGRGaWJlciAmJlxuICAgICAgICAgICAgKChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG9sZEZpYmVyKVxuICAgICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBvbGRGaWJlciksXG4gICAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IG9sZEZpYmVyKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgbmV3SWR4KytcbiAgICApXG4gICAgICAobmV4dE9sZEZpYmVyID0gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBuZXdJZHgsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApKSxcbiAgICAgICAgbnVsbCAhPT0gbmV4dE9sZEZpYmVyICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IG5leHRPbGRGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIG9sZEZpYmVyLmRlbGV0ZShcbiAgICAgICAgICAgICAgbnVsbCA9PT0gbmV4dE9sZEZpYmVyLmtleSA/IG5ld0lkeCA6IG5leHRPbGRGaWJlci5rZXlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChcbiAgICAgICAgICAgIG5leHRPbGRGaWJlcixcbiAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgKSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5leHRPbGRGaWJlcilcbiAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5leHRPbGRGaWJlciksXG4gICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBuZXh0T2xkRmliZXIpKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChudWxsID09IG5ld0NoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MSkpO1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbCxcbiAgICAgICAgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmICFzdGVwLmRvbmU7XG4gICAgICBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKVxuICAgICkge1xuICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHhcbiAgICAgICAgPyAoKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyKSwgKG9sZEZpYmVyID0gbnVsbCkpXG4gICAgICAgIDogKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmcpO1xuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIHN0ZXAudmFsdWUsIGxhbmVzKTtcbiAgICAgIGlmIChudWxsID09PSBuZXdGaWJlcikge1xuICAgICAgICBudWxsID09PSBvbGRGaWJlciAmJiAob2xkRmliZXIgPSBuZXh0T2xkRmliZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgb2xkRmliZXIgJiZcbiAgICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpO1xuICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIpXG4gICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyKTtcbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cbiAgICBpZiAoc3RlcC5kb25lKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKSxcbiAgICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpLFxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkXG4gICAgICApO1xuICAgIGlmIChudWxsID09PSBvbGRGaWJlcikge1xuICAgICAgZm9yICg7ICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpKVxuICAgICAgICAoc3RlcCA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICAgIG51bGwgIT09IHN0ZXAgJiZcbiAgICAgICAgICAgICgoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKHN0ZXAsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IHN0ZXApLFxuICAgICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBzdGVwKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgIXN0ZXAuZG9uZTtcbiAgICAgIG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpXG4gICAgKVxuICAgICAgKHN0ZXAgPSB1cGRhdGVGcm9tTWFwKG9sZEZpYmVyLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICBudWxsICE9PSBzdGVwICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHN0ZXAuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICBvbGRGaWJlci5kZWxldGUobnVsbCA9PT0gc3RlcC5rZXkgPyBuZXdJZHggOiBzdGVwLmtleSksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChzdGVwLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBzdGVwKSxcbiAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IHN0ZXApKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgcmV0dXJuRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgbmV3Q2hpbGQsXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmXG4gICAgICBudWxsICE9PSBuZXdDaGlsZCAmJlxuICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJlxuICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ICYmXG4gICAgICAobmV3Q2hpbGQgPSBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgPSBuZXdDaGlsZC5rZXk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaXJzdENoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gbmV3Q2hpbGQudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNyA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuZWxlbWVudFR5cGUgPT09IGtleSB8fFxuICAgICAgICAgICAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBrZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0ga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIGtleS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVMYXp5KGtleSkgPT09IGN1cnJlbnRGaXJzdENoaWxkLnR5cGUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5wcm9wcyk7XG4gICAgICAgICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFXG4gICAgICAgICAgICAgID8gKChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmV0dXJuRmliZXIpO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgIGZvciAoa2V5ID0gbmV3Q2hpbGQua2V5OyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZC5rZXkgPT09IGtleSlcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICA0ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWcgJiZcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvID09PVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5jb250YWluZXJJbmZvICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gPT09XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICBrZXkgPSBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGtleSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTApKTtcbiAgICAgICAgbmV3Q2hpbGQgPSBrZXkuY2FsbChuZXdDaGlsZCk7XG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICAgID8gKChuZXdDaGlsZCA9IFwiXCIgKyBuZXdDaGlsZCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkICYmIDYgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZ1xuICAgICAgICAgID8gKGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKSxcbiAgICAgICAgICAgIChsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCkpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICA6IChkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVGV4dChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpLFxuICAgICAgICBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKSlcbiAgICAgIDogZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICAgICAgdmFyIGZpcnN0Q2hpbGRGaWJlciA9IHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgbGFuZXNcbiAgICAgICk7XG4gICAgICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xuICAgICAgcmV0dXJuIGZpcnN0Q2hpbGRGaWJlcjtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICBpZiAoeCA9PT0gU3VzcGVuc2VFeGNlcHRpb24pIHRocm93IHg7XG4gICAgICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlckltcGxDbGFzcygyOSwgeCwgbnVsbCwgcmV0dXJuRmliZXIubW9kZSk7XG4gICAgICBmaWJlci5sYW5lcyA9IGxhbmVzO1xuICAgICAgZmliZXIucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZmliZXI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICB9XG4gIH07XG59XG52YXIgcmVjb25jaWxlQ2hpbGRGaWJlcnMgPSBjcmVhdGVDaGlsZFJlY29uY2lsZXIoITApLFxuICBtb3VudENoaWxkRmliZXJzID0gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKCExKSxcbiAgY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgcHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKDApO1xuZnVuY3Rpb24gcHVzaEhpZGRlbkNvbnRleHQoZmliZXIsIGNvbnRleHQpIHtcbiAgZmliZXIgPSBlbnRhbmdsZWRSZW5kZXJMYW5lcztcbiAgcHVzaChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IsIGZpYmVyKTtcbiAgcHVzaChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLCBjb250ZXh0KTtcbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBmaWJlciB8IGNvbnRleHQuYmFzZUxhbmVzO1xufVxuZnVuY3Rpb24gcmV1c2VIaWRkZW5Db250ZXh0T25TdGFjaygpIHtcbiAgcHVzaChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IsIGVudGFuZ2xlZFJlbmRlckxhbmVzKTtcbiAgcHVzaChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLCBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xufVxuZnVuY3Rpb24gcG9wSGlkZGVuQ29udGV4dCgpIHtcbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IuY3VycmVudDtcbiAgcG9wKGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IpO1xuICBwb3AocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yKTtcbn1cbnZhciBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgc2hlbGxCb3VuZGFyeSA9IG51bGw7XG5mdW5jdGlvbiBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIoaGFuZGxlcikge1xuICB2YXIgY3VycmVudCA9IGhhbmRsZXIuYWx0ZXJuYXRlO1xuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBoYW5kbGVyKTtcbiAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSAmJlxuICAgIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgIT09IGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgPyAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpXG4gICAgICA6IG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJiAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpKTtcbn1cbmZ1bmN0aW9uIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIoZmliZXIpIHtcbiAgaWYgKDIyID09PSBmaWJlci50YWcpIHtcbiAgICBpZiAoXG4gICAgICAocHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgZmliZXIpLFxuICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSlcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50ID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKHNoZWxsQm91bmRhcnkgPSBmaWJlcik7XG4gICAgfVxuICB9IGVsc2UgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjaygpIHtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcFN1c3BlbnNlSGFuZGxlcihmaWJlcikge1xuICBwb3Aoc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IpO1xuICBzaGVsbEJvdW5kYXJ5ID09PSBmaWJlciAmJiAoc2hlbGxCb3VuZGFyeSA9IG51bGwpO1xuICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG59XG52YXIgc3VzcGVuc2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIGZpbmRGaXJzdFN1c3BlbmRlZChyb3cpIHtcbiAgZm9yICh2YXIgbm9kZSA9IHJvdzsgbnVsbCAhPT0gbm9kZTsgKSB7XG4gICAgaWYgKDEzID09PSBub2RlLnRhZykge1xuICAgICAgdmFyIHN0YXRlID0gbm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBzdGF0ZSAmJlxuICAgICAgICAoKHN0YXRlID0gc3RhdGUuZGVoeWRyYXRlZCksXG4gICAgICAgIG51bGwgPT09IHN0YXRlIHx8IFwiJD9cIiA9PT0gc3RhdGUuZGF0YSB8fCBcIiQhXCIgPT09IHN0YXRlLmRhdGEpXG4gICAgICApXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0gZWxzZSBpZiAoMTkgPT09IG5vZGUudGFnICYmIHZvaWQgMCAhPT0gbm9kZS5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKSB7XG4gICAgICBpZiAoMCAhPT0gKG5vZGUuZmxhZ3MgJiAxMjgpKSByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT09IG5vZGUuY2hpbGQpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSByb3cpIGJyZWFrO1xuICAgIGZvciAoOyBudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSByb3cpIHJldHVybiBudWxsO1xuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBBYm9ydENvbnRyb2xsZXJMb2NhbCA9XG4gICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIEFib3J0Q29udHJvbGxlclxuICAgICAgPyBBYm9ydENvbnRyb2xsZXJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICAgICAgICAgIHNpZ25hbCA9ICh0aGlzLnNpZ25hbCA9IHtcbiAgICAgICAgICAgICAgYWJvcnRlZDogITEsXG4gICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNpZ25hbC5hYm9ydGVkID0gITA7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxpc3RlbmVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICBzY2hlZHVsZUNhbGxiYWNrJDIgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgTm9ybWFsUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIENhY2hlQ29udGV4dCA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIENvbnN1bWVyOiBudWxsLFxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWU6IG51bGwsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IG51bGwsXG4gICAgX3RocmVhZENvdW50OiAwXG4gIH07XG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiBuZXcgQWJvcnRDb250cm9sbGVyTG9jYWwoKSxcbiAgICBkYXRhOiBuZXcgTWFwKCksXG4gICAgcmVmQ291bnQ6IDBcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VDYWNoZShjYWNoZSkge1xuICBjYWNoZS5yZWZDb3VudC0tO1xuICAwID09PSBjYWNoZS5yZWZDb3VudCAmJlxuICAgIHNjaGVkdWxlQ2FsbGJhY2skMihOb3JtYWxQcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FjaGUuY29udHJvbGxlci5hYm9ydCgpO1xuICAgIH0pO1xufVxudmFyIGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBudWxsLFxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwLFxuICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCB0aGVuYWJsZSkge1xuICBpZiAobnVsbCA9PT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycykge1xuICAgIHZhciBlbnRhbmdsZWRMaXN0ZW5lcnMgPSAoY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IFtdKTtcbiAgICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ID0gMDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgZW50YW5nbGVkTGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50Kys7XG4gIHRoZW5hYmxlLnRoZW4ocGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSwgcGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUoKSB7XG4gIGlmIChcbiAgICAwID09PSAtLWN1cnJlbnRFbnRhbmdsZWRQZW5kaW5nQ291bnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzXG4gICkge1xuICAgIG51bGwgIT09IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSAmJlxuICAgICAgKGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVycztcbiAgICBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbDtcbiAgICBjdXJyZW50RW50YW5nbGVkTGFuZSA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkoKTtcbiAgfVxufVxuZnVuY3Rpb24gY2hhaW5UaGVuYWJsZVZhbHVlKHRoZW5hYmxlLCByZXN1bHQpIHtcbiAgdmFyIGxpc3RlbmVycyA9IFtdLFxuICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlID0ge1xuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gocmVzb2x2ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgdGhlbmFibGUudGhlbihcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuYWJsZVdpdGhPdmVycmlkZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUudmFsdWUgPSByZXN1bHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykgKDAsIGxpc3RlbmVyc1tpXSkocmVzdWx0KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUucmVhc29uID0gZXJyb3I7XG4gICAgICBmb3IgKGVycm9yID0gMDsgZXJyb3IgPCBsaXN0ZW5lcnMubGVuZ3RoOyBlcnJvcisrKVxuICAgICAgICAoMCwgbGlzdGVuZXJzW2Vycm9yXSkodm9pZCAwKTtcbiAgICB9XG4gICk7XG4gIHJldHVybiB0aGVuYWJsZVdpdGhPdmVycmlkZTtcbn1cbnZhciBwcmV2T25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuUmVhY3RTaGFyZWRJbnRlcm5hbHMuUyA9IGZ1bmN0aW9uICh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSkge1xuICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICBlbnRhbmdsZUFzeW5jQWN0aW9uKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgbnVsbCAhPT0gcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKHRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbn07XG52YXIgcmVzdW1lZENhY2hlID0gY3JlYXRlQ3Vyc29yKG51bGwpO1xuZnVuY3Rpb24gcGVla0NhY2hlRnJvbVBvb2woKSB7XG4gIHZhciBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXIgPSByZXN1bWVkQ2FjaGUuY3VycmVudDtcbiAgcmV0dXJuIG51bGwgIT09IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgID8gY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3QucG9vbGVkQ2FjaGU7XG59XG5mdW5jdGlvbiBwdXNoVHJhbnNpdGlvbihvZmZzY3JlZW5Xb3JrSW5Qcm9ncmVzcywgcHJldkNhY2hlUG9vbCkge1xuICBudWxsID09PSBwcmV2Q2FjaGVQb29sXG4gICAgPyBwdXNoKHJlc3VtZWRDYWNoZSwgcmVzdW1lZENhY2hlLmN1cnJlbnQpXG4gICAgOiBwdXNoKHJlc3VtZWRDYWNoZSwgcHJldkNhY2hlUG9vbC5wb29sKTtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbmRlZENhY2hlKCkge1xuICB2YXIgY2FjaGVGcm9tUG9vbCA9IHBlZWtDYWNoZUZyb21Qb29sKCk7XG4gIHJldHVybiBudWxsID09PSBjYWNoZUZyb21Qb29sXG4gICAgPyBudWxsXG4gICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IGNhY2hlRnJvbVBvb2wgfTtcbn1cbnZhciByZW5kZXJMYW5lcyA9IDAsXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsLFxuICBjdXJyZW50SG9vayA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGwsXG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSAhMSxcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITEsXG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITEsXG4gIGxvY2FsSWRDb3VudGVyID0gMCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwLFxuICB0aGVuYWJsZVN0YXRlID0gbnVsbCxcbiAgZ2xvYmFsQ2xpZW50SWRDb3VudGVyID0gMDtcbmZ1bmN0aW9uIHRocm93SW52YWxpZEhvb2tFcnJvcigpIHtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjEpKTtcbn1cbmZ1bmN0aW9uIGFyZUhvb2tJbnB1dHNFcXVhbChuZXh0RGVwcywgcHJldkRlcHMpIHtcbiAgaWYgKG51bGwgPT09IHByZXZEZXBzKSByZXR1cm4gITE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldkRlcHMubGVuZ3RoICYmIGkgPCBuZXh0RGVwcy5sZW5ndGg7IGkrKylcbiAgICBpZiAoIW9iamVjdElzKG5leHREZXBzW2ldLCBwcmV2RGVwc1tpXSkpIHJldHVybiAhMTtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBwcm9wcyxcbiAgc2Vjb25kQXJnLFxuICBuZXh0UmVuZGVyTGFuZXNcbikge1xuICByZW5kZXJMYW5lcyA9IG5leHRSZW5kZXJMYW5lcztcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IHdvcmtJblByb2dyZXNzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDA7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPVxuICAgIG51bGwgPT09IGN1cnJlbnQgfHwgbnVsbCA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICA/IEhvb2tzRGlzcGF0Y2hlck9uTW91bnRcbiAgICAgIDogSG9va3NEaXNwYXRjaGVyT25VcGRhdGU7XG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITE7XG4gIG5leHRSZW5kZXJMYW5lcyA9IENvbXBvbmVudChwcm9wcywgc2Vjb25kQXJnKTtcbiAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgPSAhMTtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzICYmXG4gICAgKG5leHRSZW5kZXJMYW5lcyA9IHJlbmRlcldpdGhIb29rc0FnYWluKFxuICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICBDb21wb25lbnQsXG4gICAgICBwcm9wcyxcbiAgICAgIHNlY29uZEFyZ1xuICAgICkpO1xuICBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KTtcbiAgcmV0dXJuIG5leHRSZW5kZXJMYW5lcztcbn1cbmZ1bmN0aW9uIGZpbmlzaFJlbmRlcmluZ0hvb2tzKGN1cnJlbnQpIHtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgdmFyIGRpZFJlbmRlclRvb0Zld0hvb2tzID0gbnVsbCAhPT0gY3VycmVudEhvb2sgJiYgbnVsbCAhPT0gY3VycmVudEhvb2submV4dDtcbiAgcmVuZGVyTGFuZXMgPSAwO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgdGhlbmFibGVTdGF0ZSA9IG51bGw7XG4gIGlmIChkaWRSZW5kZXJUb29GZXdIb29rcykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMDApKTtcbiAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgIGRpZFJlY2VpdmVVcGRhdGUgfHxcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQpICYmXG4gICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG59XG5mdW5jdGlvbiByZW5kZXJXaXRoSG9va3NBZ2Fpbih3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBwcm9wcywgc2Vjb25kQXJnKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIG51bWJlck9mUmVSZW5kZXJzID0gMDtcbiAgZG8ge1xuICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyAmJiAodGhlbmFibGVTdGF0ZSA9IG51bGwpO1xuICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgICBpZiAoMjUgPD0gbnVtYmVyT2ZSZVJlbmRlcnMpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAxKSk7XG4gICAgbnVtYmVyT2ZSZVJlbmRlcnMgKz0gMTtcbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IG51bGw7XG4gICAgaWYgKG51bGwgIT0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgY2hpbGRyZW4ubGFzdEVmZmVjdCA9IG51bGw7XG4gICAgICBjaGlsZHJlbi5ldmVudHMgPSBudWxsO1xuICAgICAgY2hpbGRyZW4uc3RvcmVzID0gbnVsbDtcbiAgICAgIG51bGwgIT0gY2hpbGRyZW4ubWVtb0NhY2hlICYmIChjaGlsZHJlbi5tZW1vQ2FjaGUuaW5kZXggPSAwKTtcbiAgICB9XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXI7XG4gICAgY2hpbGRyZW4gPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIH0gd2hpbGUgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIFRyYW5zaXRpb25Bd2FyZUhvc3RDb21wb25lbnQoKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCxcbiAgICBtYXliZVRoZW5hYmxlID0gZGlzcGF0Y2hlci51c2VTdGF0ZSgpWzBdO1xuICBtYXliZVRoZW5hYmxlID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZVRoZW5hYmxlLnRoZW5cbiAgICAgID8gdXNlVGhlbmFibGUobWF5YmVUaGVuYWJsZSlcbiAgICAgIDogbWF5YmVUaGVuYWJsZTtcbiAgZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXIudXNlU3RhdGUoKVswXTtcbiAgKG51bGwgIT09IGN1cnJlbnRIb29rID8gY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGwpICE9PSBkaXNwYXRjaGVyICYmXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gMTAyNCk7XG4gIHJldHVybiBtYXliZVRoZW5hYmxlO1xufVxuZnVuY3Rpb24gY2hlY2tEaWRSZW5kZXJJZEhvb2soKSB7XG4gIHZhciBkaWRSZW5kZXJJZEhvb2sgPSAwICE9PSBsb2NhbElkQ291bnRlcjtcbiAgbG9jYWxJZENvdW50ZXIgPSAwO1xuICByZXR1cm4gZGlkUmVuZGVySWRIb29rO1xufVxuZnVuY3Rpb24gYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0yMDUzO1xuICBjdXJyZW50LmxhbmVzICY9IH5sYW5lcztcbn1cbmZ1bmN0aW9uIHJlc2V0SG9va3NPblVud2luZCh3b3JrSW5Qcm9ncmVzcykge1xuICBpZiAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIGZvciAoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcztcblxuICAgICkge1xuICAgICAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MucXVldWU7XG4gICAgICBudWxsICE9PSBxdWV1ZSAmJiAocXVldWUucGVuZGluZyA9IG51bGwpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5uZXh0O1xuICAgIH1cbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIH1cbiAgcmVuZGVyTGFuZXMgPSAwO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSBsb2NhbElkQ291bnRlciA9IDA7XG4gIHRoZW5hYmxlU3RhdGUgPSBudWxsO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIHZhciBob29rID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IG51bGwsXG4gICAgYmFzZVN0YXRlOiBudWxsLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9IGhvb2spXG4gICAgOiAod29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBob29rKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRIb29rKSB7XG4gICAgdmFyIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlO1xuICAgIG5leHRDdXJyZW50SG9vayA9XG4gICAgICBudWxsICE9PSBuZXh0Q3VycmVudEhvb2sgPyBuZXh0Q3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gIH0gZWxzZSBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50SG9vay5uZXh0O1xuICB2YXIgbmV4dFdvcmtJblByb2dyZXNzSG9vayA9XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgICA/IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dDtcbiAgaWYgKG51bGwgIT09IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spXG4gICAgKHdvcmtJblByb2dyZXNzSG9vayA9IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spLFxuICAgICAgKGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgZWxzZSB7XG4gICAgaWYgKG51bGwgPT09IG5leHRDdXJyZW50SG9vaykge1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlKVxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2NykpO1xuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTApKTtcbiAgICB9XG4gICAgY3VycmVudEhvb2sgPSBuZXh0Q3VycmVudEhvb2s7XG4gICAgbmV4dEN1cnJlbnRIb29rID0ge1xuICAgICAgbWVtb2l6ZWRTdGF0ZTogY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudEhvb2suYmFzZVN0YXRlLFxuICAgICAgYmFzZVF1ZXVlOiBjdXJyZW50SG9vay5iYXNlUXVldWUsXG4gICAgICBxdWV1ZTogY3VycmVudEhvb2sucXVldWUsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9XG4gICAgICAgICAgbmV4dEN1cnJlbnRIb29rKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBuZXh0Q3VycmVudEhvb2spO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG52YXIgY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZTtcbmNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7IGxhc3RFZmZlY3Q6IG51bGwsIGV2ZW50czogbnVsbCwgc3RvcmVzOiBudWxsLCBtZW1vQ2FjaGU6IG51bGwgfTtcbn07XG5mdW5jdGlvbiB1c2VUaGVuYWJsZSh0aGVuYWJsZSkge1xuICB2YXIgaW5kZXggPSB0aGVuYWJsZUluZGV4Q291bnRlcjtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgKz0gMTtcbiAgbnVsbCA9PT0gdGhlbmFibGVTdGF0ZSAmJiAodGhlbmFibGVTdGF0ZSA9IFtdKTtcbiAgdGhlbmFibGUgPSB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlLCB0aGVuYWJsZSwgaW5kZXgpO1xuICBpbmRleCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG4gIG51bGwgPT09XG4gICAgKG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgICAgPyBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICA6IHdvcmtJblByb2dyZXNzSG9vay5uZXh0KSAmJlxuICAgICgoaW5kZXggPSBpbmRleC5hbHRlcm5hdGUpLFxuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5IID1cbiAgICAgIG51bGwgPT09IGluZGV4IHx8IG51bGwgPT09IGluZGV4Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBIb29rc0Rpc3BhdGNoZXJPbk1vdW50XG4gICAgICAgIDogSG9va3NEaXNwYXRjaGVyT25VcGRhdGUpKTtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gdXNlKHVzYWJsZSkge1xuICBpZiAobnVsbCAhPT0gdXNhYmxlICYmIFwib2JqZWN0XCIgPT09IHR5cGVvZiB1c2FibGUpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdXNhYmxlLnRoZW4pIHJldHVybiB1c2VUaGVuYWJsZSh1c2FibGUpO1xuICAgIGlmICh1c2FibGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSkgcmV0dXJuIHJlYWRDb250ZXh0KHVzYWJsZSk7XG4gIH1cbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzgsIFN0cmluZyh1c2FibGUpKSk7XG59XG5mdW5jdGlvbiB1c2VNZW1vQ2FjaGUoc2l6ZSkge1xuICB2YXIgbWVtb0NhY2hlID0gbnVsbCxcbiAgICB1cGRhdGVRdWV1ZSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgIT09IHVwZGF0ZVF1ZXVlICYmIChtZW1vQ2FjaGUgPSB1cGRhdGVRdWV1ZS5tZW1vQ2FjaGUpO1xuICBpZiAobnVsbCA9PSBtZW1vQ2FjaGUpIHtcbiAgICB2YXIgY3VycmVudCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICgoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAoKGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9DYWNoZSksXG4gICAgICAgIG51bGwgIT0gY3VycmVudCAmJlxuICAgICAgICAgIChtZW1vQ2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBjdXJyZW50LmRhdGEubWFwKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICB9KSkpO1xuICB9XG4gIG51bGwgPT0gbWVtb0NhY2hlICYmIChtZW1vQ2FjaGUgPSB7IGRhdGE6IFtdLCBpbmRleDogMCB9KTtcbiAgbnVsbCA9PT0gdXBkYXRlUXVldWUgJiZcbiAgICAoKHVwZGF0ZVF1ZXVlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlKSk7XG4gIHVwZGF0ZVF1ZXVlLm1lbW9DYWNoZSA9IG1lbW9DYWNoZTtcbiAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdO1xuICBpZiAodm9pZCAwID09PSB1cGRhdGVRdWV1ZSlcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUgPSBtZW1vQ2FjaGUuZGF0YVttZW1vQ2FjaGUuaW5kZXhdID0gQXJyYXkoc2l6ZSksIGN1cnJlbnQgPSAwO1xuICAgICAgY3VycmVudCA8IHNpemU7XG4gICAgICBjdXJyZW50KytcbiAgICApXG4gICAgICB1cGRhdGVRdWV1ZVtjdXJyZW50XSA9IFJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUw7XG4gIG1lbW9DYWNoZS5pbmRleCsrO1xuICByZXR1cm4gdXBkYXRlUXVldWU7XG59XG5mdW5jdGlvbiBiYXNpY1N0YXRlUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb24gPyBhY3Rpb24oc3RhdGUpIDogYWN0aW9uO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50SG9vaywgcmVkdWNlcik7XG59XG5mdW5jdGlvbiB1cGRhdGVSZWR1Y2VySW1wbChob29rLCBjdXJyZW50LCByZWR1Y2VyKSB7XG4gIHZhciBxdWV1ZSA9IGhvb2sucXVldWU7XG4gIGlmIChudWxsID09PSBxdWV1ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTEpKTtcbiAgcXVldWUubGFzdFJlbmRlcmVkUmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBiYXNlUXVldWUgPSBob29rLmJhc2VRdWV1ZSxcbiAgICBwZW5kaW5nUXVldWUgPSBxdWV1ZS5wZW5kaW5nO1xuICBpZiAobnVsbCAhPT0gcGVuZGluZ1F1ZXVlKSB7XG4gICAgaWYgKG51bGwgIT09IGJhc2VRdWV1ZSkge1xuICAgICAgdmFyIGJhc2VGaXJzdCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgICAgYmFzZVF1ZXVlLm5leHQgPSBwZW5kaW5nUXVldWUubmV4dDtcbiAgICAgIHBlbmRpbmdRdWV1ZS5uZXh0ID0gYmFzZUZpcnN0O1xuICAgIH1cbiAgICBjdXJyZW50LmJhc2VRdWV1ZSA9IGJhc2VRdWV1ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICBxdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgfVxuICBwZW5kaW5nUXVldWUgPSBob29rLmJhc2VTdGF0ZTtcbiAgaWYgKG51bGwgPT09IGJhc2VRdWV1ZSkgaG9vay5tZW1vaXplZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICBlbHNlIHtcbiAgICBjdXJyZW50ID0gYmFzZVF1ZXVlLm5leHQ7XG4gICAgdmFyIG5ld0Jhc2VRdWV1ZUZpcnN0ID0gKGJhc2VGaXJzdCA9IG51bGwpLFxuICAgICAgbmV3QmFzZVF1ZXVlTGFzdCA9IG51bGwsXG4gICAgICB1cGRhdGUgPSBjdXJyZW50LFxuICAgICAgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQ1NCA9ICExO1xuICAgIGRvIHtcbiAgICAgIHZhciB1cGRhdGVMYW5lID0gdXBkYXRlLmxhbmUgJiAtNTM2ODcwOTEzO1xuICAgICAgaWYgKFxuICAgICAgICB1cGRhdGVMYW5lICE9PSB1cGRhdGUubGFuZVxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgdXBkYXRlTGFuZSkgPT09IHVwZGF0ZUxhbmVcbiAgICAgICAgICA6IChyZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJldmVydExhbmUgPSB1cGRhdGUucmV2ZXJ0TGFuZTtcbiAgICAgICAgaWYgKDAgPT09IHJldmVydExhbmUpXG4gICAgICAgICAgbnVsbCAhPT0gbmV3QmFzZVF1ZXVlTGFzdCAmJlxuICAgICAgICAgICAgKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPVxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGFuZTogMCxcbiAgICAgICAgICAgICAgICByZXZlcnRMYW5lOiAwLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBlYWdlclN0YXRlOiB1cGRhdGUuZWFnZXJTdGF0ZSxcbiAgICAgICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdXBkYXRlTGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgICAgKGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgPSAhMCk7XG4gICAgICAgIGVsc2UgaWYgKChyZW5kZXJMYW5lcyAmIHJldmVydExhbmUpID09PSByZXZlcnRMYW5lKSB7XG4gICAgICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgICAgICAgcmV2ZXJ0TGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0ID0gITApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAodXBkYXRlTGFuZSA9IHtcbiAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICByZXZlcnRMYW5lOiB1cGRhdGUucmV2ZXJ0TGFuZSxcbiAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgICBudWxsID09PSBuZXdCYXNlUXVldWVMYXN0XG4gICAgICAgICAgICAgID8gKChuZXdCYXNlUXVldWVGaXJzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgICAgICAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IHVwZGF0ZUxhbmUpLFxuICAgICAgICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHJldmVydExhbmUpO1xuICAgICAgICB1cGRhdGVMYW5lID0gdXBkYXRlLmFjdGlvbjtcbiAgICAgICAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgJiZcbiAgICAgICAgICByZWR1Y2VyKHBlbmRpbmdRdWV1ZSwgdXBkYXRlTGFuZSk7XG4gICAgICAgIHBlbmRpbmdRdWV1ZSA9IHVwZGF0ZS5oYXNFYWdlclN0YXRlXG4gICAgICAgICAgPyB1cGRhdGUuZWFnZXJTdGF0ZVxuICAgICAgICAgIDogcmVkdWNlcihwZW5kaW5nUXVldWUsIHVwZGF0ZUxhbmUpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChyZXZlcnRMYW5lID0ge1xuICAgICAgICAgIGxhbmU6IHVwZGF0ZUxhbmUsXG4gICAgICAgICAgcmV2ZXJ0TGFuZTogdXBkYXRlLnJldmVydExhbmUsXG4gICAgICAgICAgYWN0aW9uOiB1cGRhdGUuYWN0aW9uLFxuICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgICAgICAgPyAoKG5ld0Jhc2VRdWV1ZUZpcnN0ID0gbmV3QmFzZVF1ZXVlTGFzdCA9IHJldmVydExhbmUpLFxuICAgICAgICAgICAgICAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKSlcbiAgICAgICAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcyB8PSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgfSB3aGlsZSAobnVsbCAhPT0gdXBkYXRlICYmIHVwZGF0ZSAhPT0gY3VycmVudCk7XG4gICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgPyAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKVxuICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gbmV3QmFzZVF1ZXVlRmlyc3QpO1xuICAgIGlmIChcbiAgICAgICFvYmplY3RJcyhwZW5kaW5nUXVldWUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICgoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgJiZcbiAgICAgICAgKChyZWR1Y2VyID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlKSwgbnVsbCAhPT0gcmVkdWNlcikpXG4gICAgKVxuICAgICAgdGhyb3cgcmVkdWNlcjtcbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBwZW5kaW5nUXVldWU7XG4gICAgaG9vay5iYXNlU3RhdGUgPSBiYXNlRmlyc3Q7XG4gICAgaG9vay5iYXNlUXVldWUgPSBuZXdCYXNlUXVldWVMYXN0O1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICB9XG4gIG51bGwgPT09IGJhc2VRdWV1ZSAmJiAocXVldWUubGFuZXMgPSAwKTtcbiAgcmV0dXJuIFtob29rLm1lbW9pemVkU3RhdGUsIHF1ZXVlLmRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgZGlzcGF0Y2ggPSBxdWV1ZS5kaXNwYXRjaCxcbiAgICBsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBxdWV1ZS5wZW5kaW5nLFxuICAgIG5ld1N0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gbGFzdFJlbmRlclBoYXNlVXBkYXRlKSB7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IChsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUubmV4dCk7XG4gICAgZG8gKG5ld1N0YXRlID0gcmVkdWNlcihuZXdTdGF0ZSwgdXBkYXRlLmFjdGlvbikpLCAodXBkYXRlID0gdXBkYXRlLm5leHQpO1xuICAgIHdoaWxlICh1cGRhdGUgIT09IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSk7XG4gICAgb2JqZWN0SXMobmV3U3RhdGUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgfHwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gICAgbnVsbCA9PT0gaG9vay5iYXNlUXVldWUgJiYgKGhvb2suYmFzZVN0YXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbiAgcmV0dXJuIFtuZXdTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuZnVuY3Rpb24gdXBkYXRlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgPSBpc0h5ZHJhdGluZztcbiAgaWYgKGlzSHlkcmF0aW5nJGpzY29tcCQwKSB7XG4gICAgaWYgKHZvaWQgMCA9PT0gZ2V0U2VydmVyU25hcHNob3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTZXJ2ZXJTbmFwc2hvdCgpO1xuICB9IGVsc2UgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICB2YXIgc25hcHNob3RDaGFuZ2VkID0gIW9iamVjdElzKFxuICAgIChjdXJyZW50SG9vayB8fCBob29rKS5tZW1vaXplZFN0YXRlLFxuICAgIGdldFNlcnZlclNuYXBzaG90XG4gICk7XG4gIHNuYXBzaG90Q2hhbmdlZCAmJlxuICAgICgoaG9vay5tZW1vaXplZFN0YXRlID0gZ2V0U2VydmVyU25hcHNob3QpLCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSk7XG4gIGhvb2sgPSBob29rLnF1ZXVlO1xuICB1cGRhdGVFZmZlY3Qoc3Vic2NyaWJlVG9TdG9yZS5iaW5kKG51bGwsIGZpYmVyLCBob29rLCBzdWJzY3JpYmUpLCBbXG4gICAgc3Vic2NyaWJlXG4gIF0pO1xuICBpZiAoXG4gICAgaG9vay5nZXRTbmFwc2hvdCAhPT0gZ2V0U25hcHNob3QgfHxcbiAgICBzbmFwc2hvdENoYW5nZWQgfHxcbiAgICAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3NIb29rICYmIHdvcmtJblByb2dyZXNzSG9vay5tZW1vaXplZFN0YXRlLnRhZyAmIDEpXG4gICkge1xuICAgIGZpYmVyLmZsYWdzIHw9IDIwNDg7XG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBob29rLFxuICAgICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCxcbiAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDkpKTtcbiAgICBpc0h5ZHJhdGluZyRqc2NvbXAkMCB8fFxuICAgICAgMCAhPT0gKHJlbmRlckxhbmVzICYgNjApIHx8XG4gICAgICBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICB9XG4gIHJldHVybiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbn1cbmZ1bmN0aW9uIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCByZW5kZXJlZFNuYXBzaG90KSB7XG4gIGZpYmVyLmZsYWdzIHw9IDE2Mzg0O1xuICBmaWJlciA9IHsgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90LCB2YWx1ZTogcmVuZGVyZWRTbmFwc2hvdCB9O1xuICBnZXRTbmFwc2hvdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGdldFNuYXBzaG90XG4gICAgPyAoKGdldFNuYXBzaG90ID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlID0gZ2V0U25hcHNob3QpLFxuICAgICAgKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pKVxuICAgIDogKChyZW5kZXJlZFNuYXBzaG90ID0gZ2V0U25hcHNob3Quc3RvcmVzKSxcbiAgICAgIG51bGwgPT09IHJlbmRlcmVkU25hcHNob3RcbiAgICAgICAgPyAoZ2V0U25hcHNob3Quc3RvcmVzID0gW2ZpYmVyXSlcbiAgICAgICAgOiByZW5kZXJlZFNuYXBzaG90LnB1c2goZmliZXIpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0b3JlSW5zdGFuY2UoZmliZXIsIGluc3QsIG5leHRTbmFwc2hvdCwgZ2V0U25hcHNob3QpIHtcbiAgaW5zdC52YWx1ZSA9IG5leHRTbmFwc2hvdDtcbiAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90O1xuICBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpICYmIGZvcmNlU3RvcmVSZXJlbmRlcihmaWJlcik7XG59XG5mdW5jdGlvbiBzdWJzY3JpYmVUb1N0b3JlKGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpIHtcbiAgcmV0dXJuIHN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkge1xuICB2YXIgbGF0ZXN0R2V0U25hcHNob3QgPSBpbnN0LmdldFNuYXBzaG90O1xuICBpbnN0ID0gaW5zdC52YWx1ZTtcbiAgdHJ5IHtcbiAgICB2YXIgbmV4dFZhbHVlID0gbGF0ZXN0R2V0U25hcHNob3QoKTtcbiAgICByZXR1cm4gIW9iamVjdElzKGluc3QsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG59XG5mdW5jdGlvbiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpIHtcbiAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBtb3VudFN0YXRlSW1wbChpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5pdGlhbFN0YXRlKSB7XG4gICAgdmFyIGluaXRpYWxTdGF0ZUluaXRpYWxpemVyID0gaW5pdGlhbFN0YXRlO1xuICAgIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZUluaXRpYWxpemVyKCk7XG4gICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICB0cnkge1xuICAgICAgICBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgaG9vay5xdWV1ZSA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGxhbmVzOiAwLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGJhc2ljU3RhdGVSZWR1Y2VyLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgfTtcbiAgcmV0dXJuIGhvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50LCBwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoXG4gICAgaG9vayxcbiAgICBjdXJyZW50SG9vayxcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWR1Y2VyID8gcmVkdWNlciA6IGJhc2ljU3RhdGVSZWR1Y2VyXG4gICk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEFjdGlvblN0YXRlKFxuICBmaWJlcixcbiAgYWN0aW9uUXVldWUsXG4gIHNldFBlbmRpbmdTdGF0ZSxcbiAgc2V0U3RhdGUsXG4gIHBheWxvYWRcbikge1xuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDg1KSk7XG4gIGZpYmVyID0gYWN0aW9uUXVldWUuYWN0aW9uO1xuICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICB2YXIgYWN0aW9uTm9kZSA9IHtcbiAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICBhY3Rpb246IGZpYmVyLFxuICAgICAgbmV4dDogbnVsbCxcbiAgICAgIGlzVHJhbnNpdGlvbjogITAsXG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICByZWFzb246IG51bGwsXG4gICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgdGhlbjogZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGFjdGlvbk5vZGUubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH07XG4gICAgbnVsbCAhPT0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVFxuICAgICAgPyBzZXRQZW5kaW5nU3RhdGUoITApXG4gICAgICA6IChhY3Rpb25Ob2RlLmlzVHJhbnNpdGlvbiA9ICExKTtcbiAgICBzZXRTdGF0ZShhY3Rpb25Ob2RlKTtcbiAgICBzZXRQZW5kaW5nU3RhdGUgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHNldFBlbmRpbmdTdGF0ZVxuICAgICAgPyAoKGFjdGlvbk5vZGUubmV4dCA9IGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBhY3Rpb25Ob2RlKSxcbiAgICAgICAgcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIGFjdGlvbk5vZGUpKVxuICAgICAgOiAoKGFjdGlvbk5vZGUubmV4dCA9IHNldFBlbmRpbmdTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCA9IGFjdGlvbk5vZGUpKTtcbiAgfVxufVxuZnVuY3Rpb24gcnVuQWN0aW9uU3RhdGVBY3Rpb24oYWN0aW9uUXVldWUsIG5vZGUpIHtcbiAgdmFyIGFjdGlvbiA9IG5vZGUuYWN0aW9uLFxuICAgIHBheWxvYWQgPSBub2RlLnBheWxvYWQsXG4gICAgcHJldlN0YXRlID0gYWN0aW9uUXVldWUuc3RhdGU7XG4gIGlmIChub2RlLmlzVHJhbnNpdGlvbikge1xuICAgIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgICB0cnkge1xuICAgICAgdmFyIHJldHVyblZhbHVlID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCksXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKGN1cnJlbnRUcmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbjtcbiAgICB9XG4gIH0gZWxzZVxuICAgIHRyeSB7XG4gICAgICAocHJldlRyYW5zaXRpb24gPSBhY3Rpb24ocHJldlN0YXRlLCBwYXlsb2FkKSksXG4gICAgICAgIGhhbmRsZUFjdGlvblJldHVyblZhbHVlKGFjdGlvblF1ZXVlLCBub2RlLCBwcmV2VHJhbnNpdGlvbik7XG4gICAgfSBjYXRjaCAoZXJyb3IkNjApIHtcbiAgICAgIG9uQWN0aW9uRXJyb3IoYWN0aW9uUXVldWUsIG5vZGUsIGVycm9yJDYwKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpIHtcbiAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW5cbiAgICA/IHJldHVyblZhbHVlLnRoZW4oXG4gICAgICAgIGZ1bmN0aW9uIChuZXh0U3RhdGUpIHtcbiAgICAgICAgICBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIG5leHRTdGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICA6IG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgbm9kZSwgcmV0dXJuVmFsdWUpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBuZXh0U3RhdGUpIHtcbiAgYWN0aW9uTm9kZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICBhY3Rpb25Ob2RlLnZhbHVlID0gbmV4dFN0YXRlO1xuICBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSk7XG4gIGFjdGlvblF1ZXVlLnN0YXRlID0gbmV4dFN0YXRlO1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgbnVsbCAhPT0gYWN0aW9uTm9kZSAmJlxuICAgICgobmV4dFN0YXRlID0gYWN0aW9uTm9kZS5uZXh0KSxcbiAgICBuZXh0U3RhdGUgPT09IGFjdGlvbk5vZGVcbiAgICAgID8gKGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsKVxuICAgICAgOiAoKG5leHRTdGF0ZSA9IG5leHRTdGF0ZS5uZXh0KSxcbiAgICAgICAgKGFjdGlvbk5vZGUubmV4dCA9IG5leHRTdGF0ZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBuZXh0U3RhdGUpKSk7XG59XG5mdW5jdGlvbiBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlLCBlcnJvcikge1xuICB2YXIgbGFzdCA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIGFjdGlvblF1ZXVlLnBlbmRpbmcgPSBudWxsO1xuICBpZiAobnVsbCAhPT0gbGFzdCkge1xuICAgIGxhc3QgPSBsYXN0Lm5leHQ7XG4gICAgZG9cbiAgICAgIChhY3Rpb25Ob2RlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiksXG4gICAgICAgIChhY3Rpb25Ob2RlLnJlYXNvbiA9IGVycm9yKSxcbiAgICAgICAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpLFxuICAgICAgICAoYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubmV4dCk7XG4gICAgd2hpbGUgKGFjdGlvbk5vZGUgIT09IGxhc3QpO1xuICB9XG4gIGFjdGlvblF1ZXVlLmFjdGlvbiA9IG51bGw7XG59XG5mdW5jdGlvbiBub3RpZnlBY3Rpb25MaXN0ZW5lcnMoYWN0aW9uTm9kZSkge1xuICBhY3Rpb25Ob2RlID0gYWN0aW9uTm9kZS5saXN0ZW5lcnM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aW9uTm9kZS5sZW5ndGg7IGkrKykgKDAsIGFjdGlvbk5vZGVbaV0pKCk7XG59XG5mdW5jdGlvbiBhY3Rpb25TdGF0ZVJlZHVjZXIob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gIHJldHVybiBuZXdTdGF0ZTtcbn1cbmZ1bmN0aW9uIG1vdW50QWN0aW9uU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGVQcm9wKSB7XG4gIGlmIChpc0h5ZHJhdGluZykge1xuICAgIHZhciBzc3JGb3JtU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuZm9ybVN0YXRlO1xuICAgIGlmIChudWxsICE9PSBzc3JGb3JtU3RhdGUpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG4gICAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICAgIGlmIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSB7XG4gICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIHZhciBpblJvb3RPclNpbmdsZXRvbiA9IHJvb3RPclNpbmdsZXRvbkNvbnRleHQ7XG4gICAgICAgICAgICAgICAgOCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGlmICghaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCkge1xuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGluUm9vdE9yU2luZ2xldG9uID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRhdGE7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgXCJGIVwiID09PSBpblJvb3RPclNpbmdsZXRvbiB8fCBcIkZcIiA9PT0gaW5Sb290T3JTaW5nbGV0b25cbiAgICAgICAgICAgICAgICAgID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubmV4dFNpYmxpbmdcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICBcIkYhXCIgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kYXRhO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICAgIH1cbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJiAoaW5pdGlhbFN0YXRlUHJvcCA9IHNzckZvcm1TdGF0ZVswXSk7XG4gICAgfVxuICB9XG4gIHNzckZvcm1TdGF0ZSA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHNzckZvcm1TdGF0ZS5tZW1vaXplZFN0YXRlID0gc3NyRm9ybVN0YXRlLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZVByb3A7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGxhbmVzOiAwLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGFjdGlvblN0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlUHJvcFxuICB9O1xuICBzc3JGb3JtU3RhdGUucXVldWUgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gIHNzckZvcm1TdGF0ZSA9IGRpc3BhdGNoU2V0U3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICk7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5kaXNwYXRjaCA9IHNzckZvcm1TdGF0ZTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRTdGF0ZUltcGwoITEpO1xuICBpblJvb3RPclNpbmdsZXRvbiA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICExLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5xdWV1ZVxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSB7XG4gICAgc3RhdGU6IGluaXRpYWxTdGF0ZVByb3AsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgcGVuZGluZzogbnVsbFxuICB9O1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWUgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDA7XG4gIHNzckZvcm1TdGF0ZSA9IGRpc3BhdGNoQWN0aW9uU3RhdGUuYmluZChcbiAgICBudWxsLFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLFxuICAgIGluUm9vdE9yU2luZ2xldG9uLFxuICAgIHNzckZvcm1TdGF0ZVxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGlzcGF0Y2ggPSBzc3JGb3JtU3RhdGU7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5tZW1vaXplZFN0YXRlID0gYWN0aW9uO1xuICByZXR1cm4gW2luaXRpYWxTdGF0ZVByb3AsIHNzckZvcm1TdGF0ZSwgITFdO1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aW9uU3RhdGUoYWN0aW9uKSB7XG4gIHZhciBzdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgcmV0dXJuIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRIb29rLCBhY3Rpb24pO1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudFN0YXRlSG9vaywgYWN0aW9uKSB7XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPSB1cGRhdGVSZWR1Y2VySW1wbChcbiAgICBzdGF0ZUhvb2ssXG4gICAgY3VycmVudFN0YXRlSG9vayxcbiAgICBhY3Rpb25TdGF0ZVJlZHVjZXJcbiAgKVswXTtcbiAgc3RhdGVIb29rID0gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF07XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPVxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjdXJyZW50U3RhdGVIb29rICYmXG4gICAgbnVsbCAhPT0gY3VycmVudFN0YXRlSG9vayAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGN1cnJlbnRTdGF0ZUhvb2sudGhlblxuICAgICAgPyB1c2VUaGVuYWJsZShjdXJyZW50U3RhdGVIb29rKVxuICAgICAgOiBjdXJyZW50U3RhdGVIb29rO1xuICB2YXIgYWN0aW9uUXVldWVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgYWN0aW9uUXVldWUgPSBhY3Rpb25RdWV1ZUhvb2sucXVldWUsXG4gICAgZGlzcGF0Y2ggPSBhY3Rpb25RdWV1ZS5kaXNwYXRjaDtcbiAgYWN0aW9uICE9PSBhY3Rpb25RdWV1ZUhvb2subWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSAyMDQ4KSxcbiAgICBwdXNoRWZmZWN0KFxuICAgICAgOSxcbiAgICAgIGFjdGlvblN0YXRlQWN0aW9uRWZmZWN0LmJpbmQobnVsbCwgYWN0aW9uUXVldWUsIGFjdGlvbiksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICkpO1xuICByZXR1cm4gW2N1cnJlbnRTdGF0ZUhvb2ssIGRpc3BhdGNoLCBzdGF0ZUhvb2tdO1xufVxuZnVuY3Rpb24gYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QoYWN0aW9uUXVldWUsIGFjdGlvbikge1xuICBhY3Rpb25RdWV1ZS5hY3Rpb24gPSBhY3Rpb247XG59XG5mdW5jdGlvbiByZXJlbmRlckFjdGlvblN0YXRlKGFjdGlvbikge1xuICB2YXIgc3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgY3VycmVudFN0YXRlSG9vayA9IGN1cnJlbnRIb29rO1xuICBpZiAobnVsbCAhPT0gY3VycmVudFN0YXRlSG9vaylcbiAgICByZXR1cm4gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudFN0YXRlSG9vaywgYWN0aW9uKTtcbiAgdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHN0YXRlSG9vayA9IHN0YXRlSG9vay5tZW1vaXplZFN0YXRlO1xuICBjdXJyZW50U3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBkaXNwYXRjaCA9IGN1cnJlbnRTdGF0ZUhvb2sucXVldWUuZGlzcGF0Y2g7XG4gIGN1cnJlbnRTdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZSA9IGFjdGlvbjtcbiAgcmV0dXJuIFtzdGF0ZUhvb2ssIGRpc3BhdGNoLCAhMV07XG59XG5mdW5jdGlvbiBwdXNoRWZmZWN0KHRhZywgY3JlYXRlLCBpbnN0LCBkZXBzKSB7XG4gIHRhZyA9IHsgdGFnOiB0YWcsIGNyZWF0ZTogY3JlYXRlLCBpbnN0OiBpbnN0LCBkZXBzOiBkZXBzLCBuZXh0OiBudWxsIH07XG4gIGNyZWF0ZSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGNyZWF0ZSAmJlxuICAgICgoY3JlYXRlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IGNyZWF0ZSkpO1xuICBpbnN0ID0gY3JlYXRlLmxhc3RFZmZlY3Q7XG4gIG51bGwgPT09IGluc3RcbiAgICA/IChjcmVhdGUubGFzdEVmZmVjdCA9IHRhZy5uZXh0ID0gdGFnKVxuICAgIDogKChkZXBzID0gaW5zdC5uZXh0KSxcbiAgICAgIChpbnN0Lm5leHQgPSB0YWcpLFxuICAgICAgKHRhZy5uZXh0ID0gZGVwcyksXG4gICAgICAoY3JlYXRlLmxhc3RFZmZlY3QgPSB0YWcpKTtcbiAgcmV0dXJuIHRhZztcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZigpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdEltcGwoZmliZXJGbGFncywgaG9va0ZsYWdzLCBjcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmZsYWdzIHw9IGZpYmVyRmxhZ3M7XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHB1c2hFZmZlY3QoXG4gICAgMSB8IGhvb2tGbGFncyxcbiAgICBjcmVhdGUsXG4gICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICB2b2lkIDAgPT09IGRlcHMgPyBudWxsIDogZGVwc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlRWZmZWN0SW1wbChmaWJlckZsYWdzLCBob29rRmxhZ3MsIGNyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBpbnN0ID0gaG9vay5tZW1vaXplZFN0YXRlLmluc3Q7XG4gIG51bGwgIT09IGN1cnJlbnRIb29rICYmXG4gIG51bGwgIT09IGRlcHMgJiZcbiAgYXJlSG9va0lucHV0c0VxdWFsKGRlcHMsIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUuZGVwcylcbiAgICA/IChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KGhvb2tGbGFncywgY3JlYXRlLCBpbnN0LCBkZXBzKSlcbiAgICA6ICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSBmaWJlckZsYWdzKSxcbiAgICAgIChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KDEgfCBob29rRmxhZ3MsIGNyZWF0ZSwgaW5zdCwgZGVwcykpKTtcbn1cbmZ1bmN0aW9uIG1vdW50RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICBtb3VudEVmZmVjdEltcGwoODM5MDY1NiwgOCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgdXBkYXRlRWZmZWN0SW1wbCgyMDQ4LCA4LCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCAyLCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXBkYXRlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdChjcmVhdGUsIHJlZikge1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmKSB7XG4gICAgY3JlYXRlID0gY3JlYXRlKCk7XG4gICAgdmFyIHJlZkNsZWFudXAgPSByZWYoY3JlYXRlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cCA/IHJlZkNsZWFudXAoKSA6IHJlZihudWxsKTtcbiAgICB9O1xuICB9XG4gIGlmIChudWxsICE9PSByZWYgJiYgdm9pZCAwICE9PSByZWYpXG4gICAgcmV0dXJuIChcbiAgICAgIChjcmVhdGUgPSBjcmVhdGUoKSksXG4gICAgICAocmVmLmN1cnJlbnQgPSBjcmVhdGUpLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgZGVwcyA9IG51bGwgIT09IGRlcHMgJiYgdm9pZCAwICE9PSBkZXBzID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcbiAgdXBkYXRlRWZmZWN0SW1wbCg0LCA0LCBpbXBlcmF0aXZlSGFuZGxlRWZmZWN0LmJpbmQobnVsbCwgY3JlYXRlLCByZWYpLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIG1vdW50RGVidWdWYWx1ZSgpIHt9XG5mdW5jdGlvbiB1cGRhdGVDYWxsYmFjayhjYWxsYmFjaywgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtjYWxsYmFjaywgZGVwc107XG4gIHJldHVybiBjYWxsYmFjaztcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBkZXBzICYmIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBwcmV2U3RhdGVbMV0pKVxuICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gIHByZXZTdGF0ZSA9IG5leHRDcmVhdGUoKTtcbiAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgIHRyeSB7XG4gICAgICBuZXh0Q3JlYXRlKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW3ByZXZTdGF0ZSwgZGVwc107XG4gIHJldHVybiBwcmV2U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgaWYgKHZvaWQgMCA9PT0gaW5pdGlhbFZhbHVlIHx8IDAgIT09IChyZW5kZXJMYW5lcyAmIDEwNzM3NDE4MjQpKVxuICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gdmFsdWUpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsVmFsdWU7XG4gIGhvb2sgPSByZXF1ZXN0RGVmZXJyZWRMYW5lKCk7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gaG9vaztcbiAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IGhvb2s7XG4gIHJldHVybiBpbml0aWFsVmFsdWU7XG59XG5mdW5jdGlvbiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChob29rLCBwcmV2VmFsdWUsIHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgaWYgKG9iamVjdElzKHZhbHVlLCBwcmV2VmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIGlmIChudWxsICE9PSBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnQpXG4gICAgcmV0dXJuIChcbiAgICAgIChob29rID0gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSksXG4gICAgICBvYmplY3RJcyhob29rLCBwcmV2VmFsdWUpIHx8IChkaWRSZWNlaXZlVXBkYXRlID0gITApLFxuICAgICAgaG9va1xuICAgICk7XG4gIGlmICgwID09PSAocmVuZGVyTGFuZXMgJiA0MikpXG4gICAgcmV0dXJuIChkaWRSZWNlaXZlVXBkYXRlID0gITApLCAoaG9vay5tZW1vaXplZFN0YXRlID0gdmFsdWUpO1xuICBob29rID0gcmVxdWVzdERlZmVycmVkTGFuZSgpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gcHJldlZhbHVlO1xufVxuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uKGZpYmVyLCBxdWV1ZSwgcGVuZGluZ1N0YXRlLCBmaW5pc2hlZFN0YXRlLCBjYWxsYmFjaykge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPVxuICAgIDAgIT09IHByZXZpb3VzUHJpb3JpdHkgJiYgOCA+IHByZXZpb3VzUHJpb3JpdHkgPyBwcmV2aW91c1ByaW9yaXR5IDogODtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlKGZpYmVyLCAhMSwgcXVldWUsIHBlbmRpbmdTdGF0ZSk7XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gY2FsbGJhY2soKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgKSB7XG4gICAgICB2YXIgdGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlID0gY2hhaW5UaGVuYWJsZVZhbHVlKFxuICAgICAgICByZXR1cm5WYWx1ZSxcbiAgICAgICAgZmluaXNoZWRTdGF0ZVxuICAgICAgKTtcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICB0aGVuYWJsZUZvckZpbmlzaGVkU3RhdGUsXG4gICAgICAgIHJlcXVlc3RVcGRhdGVMYW5lKGZpYmVyKVxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICBmaW5pc2hlZFN0YXRlLFxuICAgICAgICByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcilcbiAgICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKFxuICAgICAgZmliZXIsXG4gICAgICBxdWV1ZSxcbiAgICAgIHsgdGhlbjogZnVuY3Rpb24gKCkge30sIHN0YXR1czogXCJyZWplY3RlZFwiLCByZWFzb246IGVycm9yIH0sXG4gICAgICByZXF1ZXN0VXBkYXRlTGFuZSgpXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIG5vb3AkMigpIHt9XG5mdW5jdGlvbiBzdGFydEhvc3RUcmFuc2l0aW9uKGZvcm1GaWJlciwgcGVuZGluZ1N0YXRlLCBhY3Rpb24sIGZvcm1EYXRhKSB7XG4gIGlmICg1ICE9PSBmb3JtRmliZXIudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NikpO1xuICB2YXIgcXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLnF1ZXVlO1xuICBzdGFydFRyYW5zaXRpb24oXG4gICAgZm9ybUZpYmVyLFxuICAgIHF1ZXVlLFxuICAgIHBlbmRpbmdTdGF0ZSxcbiAgICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIG51bGwgPT09IGFjdGlvblxuICAgICAgPyBub29wJDJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtRmliZXIpO1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZm9ybURhdGEpO1xuICAgICAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpIHtcbiAgdmFyIGV4aXN0aW5nU3RhdGVIb29rID0gZm9ybUZpYmVyLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBleGlzdGluZ1N0YXRlSG9vaykgcmV0dXJuIGV4aXN0aW5nU3RhdGVIb29rO1xuICBleGlzdGluZ1N0YXRlSG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIGJhc2VTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYmFzaWNTdGF0ZVJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdFxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICB2YXIgaW5pdGlhbFJlc2V0U3RhdGUgPSB7fTtcbiAgZXhpc3RpbmdTdGF0ZUhvb2submV4dCA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZSxcbiAgICBiYXNlU3RhdGU6IGluaXRpYWxSZXNldFN0YXRlLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZToge1xuICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgIGxhbmVzOiAwLFxuICAgICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZVxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGV4aXN0aW5nU3RhdGVIb29rO1xuICBmb3JtRmliZXIgPSBmb3JtRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmb3JtRmliZXIgJiYgKGZvcm1GaWJlci5tZW1vaXplZFN0YXRlID0gZXhpc3RpbmdTdGF0ZUhvb2spO1xuICByZXR1cm4gZXhpc3RpbmdTdGF0ZUhvb2s7XG59XG5mdW5jdGlvbiByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUZpYmVyKSB7XG4gIHZhciByZXNldFN0YXRlUXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLm5leHQucXVldWU7XG4gIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmb3JtRmliZXIsIHJlc2V0U3RhdGVRdWV1ZSwge30sIHJlcXVlc3RVcGRhdGVMYW5lKCkpO1xufVxuZnVuY3Rpb24gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMoKSB7XG4gIHJldHVybiByZWFkQ29udGV4dChIb3N0VHJhbnNpdGlvbkNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlSWQoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVmcmVzaCgpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiByZWZyZXNoQ2FjaGUoZmliZXIpIHtcbiAgZm9yICh2YXIgcHJvdmlkZXIgPSBmaWJlci5yZXR1cm47IG51bGwgIT09IHByb3ZpZGVyOyApIHtcbiAgICBzd2l0Y2ggKHByb3ZpZGVyLnRhZykge1xuICAgICAgY2FzZSAyNDpcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgICAgICBmaWJlciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICAgICAgdmFyIHJvb3QkNjMgPSBlbnF1ZXVlVXBkYXRlKHByb3ZpZGVyLCBmaWJlciwgbGFuZSk7XG4gICAgICAgIG51bGwgIT09IHJvb3QkNjMgJiZcbiAgICAgICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QkNjMsIHByb3ZpZGVyLCBsYW5lKSxcbiAgICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QkNjMsIHByb3ZpZGVyLCBsYW5lKSk7XG4gICAgICAgIHByb3ZpZGVyID0geyBjYWNoZTogY3JlYXRlQ2FjaGUoKSB9O1xuICAgICAgICBmaWJlci5wYXlsb2FkID0gcHJvdmlkZXI7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvdmlkZXIgPSBwcm92aWRlci5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoUmVkdWNlckFjdGlvbihmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGFjdGlvbiA9IHtcbiAgICBsYW5lOiBsYW5lLFxuICAgIHJldmVydExhbmU6IDAsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpXG4gICAgPyBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIGFjdGlvbilcbiAgICA6ICgoYWN0aW9uID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKSksXG4gICAgICBudWxsICE9PSBhY3Rpb24gJiZcbiAgICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihhY3Rpb24sIGZpYmVyLCBsYW5lKSxcbiAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKGFjdGlvbiwgcXVldWUsIGxhbmUpKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFNldFN0YXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSkge1xuICB2YXIgdXBkYXRlID0ge1xuICAgIGxhbmU6IGxhbmUsXG4gICAgcmV2ZXJ0TGFuZTogMCxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSk7XG4gIGVsc2Uge1xuICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKFxuICAgICAgMCA9PT0gZmliZXIubGFuZXMgJiZcbiAgICAgIChudWxsID09PSBhbHRlcm5hdGUgfHwgMCA9PT0gYWx0ZXJuYXRlLmxhbmVzKSAmJlxuICAgICAgKChhbHRlcm5hdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyKSwgbnVsbCAhPT0gYWx0ZXJuYXRlKVxuICAgIClcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlID0gYWx0ZXJuYXRlKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgdXBkYXRlLmhhc0VhZ2VyU3RhdGUgPSAhMDtcbiAgICAgICAgdXBkYXRlLmVhZ2VyU3RhdGUgPSBlYWdlclN0YXRlO1xuICAgICAgICBpZiAob2JqZWN0SXMoZWFnZXJTdGF0ZSwgY3VycmVudFN0YXRlKSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCAwKSxcbiAgICAgICAgICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgIH1cbiAgICBhY3Rpb24gPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICAgIGlmIChudWxsICE9PSBhY3Rpb24pXG4gICAgICByZXR1cm4gKFxuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIoYWN0aW9uLCBmaWJlciwgbGFuZSksXG4gICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShhY3Rpb24sIHF1ZXVlLCBsYW5lKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUoZmliZXIsIHRocm93SWZEdXJpbmdSZW5kZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uID0ge1xuICAgIGxhbmU6IDIsXG4gICAgcmV2ZXJ0TGFuZTogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCksXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlmIChpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSkge1xuICAgIGlmICh0aHJvd0lmRHVyaW5nUmVuZGVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3OSkpO1xuICB9IGVsc2VcbiAgICAodGhyb3dJZkR1cmluZ1JlbmRlciA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShcbiAgICAgIGZpYmVyLFxuICAgICAgcXVldWUsXG4gICAgICBhY3Rpb24sXG4gICAgICAyXG4gICAgKSksXG4gICAgICBudWxsICE9PSB0aHJvd0lmRHVyaW5nUmVuZGVyICYmXG4gICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcih0aHJvd0lmRHVyaW5nUmVuZGVyLCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIHJldHVybiAoXG4gICAgZmliZXIgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgfHxcbiAgICAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZShxdWV1ZSwgdXBkYXRlKSB7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9IGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPVxuICAgICEwO1xuICB2YXIgcGVuZGluZyA9IHF1ZXVlLnBlbmRpbmc7XG4gIG51bGwgPT09IHBlbmRpbmdcbiAgICA/ICh1cGRhdGUubmV4dCA9IHVwZGF0ZSlcbiAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG59XG5mdW5jdGlvbiBlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUocm9vdCwgcXVldWUsIGxhbmUpIHtcbiAgaWYgKDAgIT09IChsYW5lICYgNDE5NDE3NikpIHtcbiAgICB2YXIgcXVldWVMYW5lcyA9IHF1ZXVlLmxhbmVzO1xuICAgIHF1ZXVlTGFuZXMgJj0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gICAgbGFuZSB8PSBxdWV1ZUxhbmVzO1xuICAgIHF1ZXVlLmxhbmVzID0gbGFuZTtcbiAgICBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBsYW5lKTtcbiAgfVxufVxudmFyIENvbnRleHRPbmx5RGlzcGF0Y2hlciA9IHtcbiAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2U6IHVzZSxcbiAgdXNlQ2FsbGJhY2s6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlQ29udGV4dDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VMYXlvdXRFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZU1lbW86IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlUmVkdWNlcjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VSZWY6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlU3RhdGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRGVidWdWYWx1ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VEZWZlcnJlZFZhbHVlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVRyYW5zaXRpb246IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlSWQ6IHRocm93SW52YWxpZEhvb2tFcnJvclxufTtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VDYWNoZVJlZnJlc2ggPSB0aHJvd0ludmFsaWRIb29rRXJyb3I7XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlTWVtb0NhY2hlID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZUZvcm1TdGF0ZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VBY3Rpb25TdGF0ZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VPcHRpbWlzdGljID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uTW91bnQgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSBbXG4gICAgICBjYWxsYmFjayxcbiAgICAgIHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzXG4gICAgXTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH0sXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IG1vdW50RWZmZWN0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICBkZXBzID0gbnVsbCAhPT0gZGVwcyAmJiB2b2lkIDAgIT09IGRlcHMgPyBkZXBzLmNvbmNhdChbcmVmXSkgOiBudWxsO1xuICAgIG1vdW50RWZmZWN0SW1wbChcbiAgICAgIDQxOTQzMDgsXG4gICAgICA0LFxuICAgICAgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSxcbiAgICAgIGRlcHNcbiAgICApO1xuICB9LFxuICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICByZXR1cm4gbW91bnRFZmZlY3RJbXBsKDQxOTQzMDgsIDQsIGNyZWF0ZSwgZGVwcyk7XG4gIH0sXG4gIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgIG1vdW50RWZmZWN0SW1wbCg0LCAyLCBjcmVhdGUsIGRlcHMpO1xuICB9LFxuICB1c2VNZW1vOiBmdW5jdGlvbiAobmV4dENyZWF0ZSwgZGVwcykge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gICAgdmFyIG5leHRWYWx1ZSA9IG5leHRDcmVhdGUoKTtcbiAgICBpZiAoc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYpIHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5leHRDcmVhdGUoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gW25leHRWYWx1ZSwgZGVwc107XG4gICAgcmV0dXJuIG5leHRWYWx1ZTtcbiAgfSxcbiAgdXNlUmVkdWNlcjogZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgaWYgKHZvaWQgMCAhPT0gaW5pdCkge1xuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICBpZiAoc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYpIHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxBcmc7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgcmVkdWNlciA9IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogcmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVcbiAgICB9O1xuICAgIGhvb2sucXVldWUgPSByZWR1Y2VyO1xuICAgIHJlZHVjZXIgPSByZWR1Y2VyLmRpc3BhdGNoID0gZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uLmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAgIHJlZHVjZXJcbiAgICApO1xuICAgIHJldHVybiBbaG9vay5tZW1vaXplZFN0YXRlLCByZWR1Y2VyXTtcbiAgfSxcbiAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIGluaXRpYWxWYWx1ZSA9IHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH07XG4gICAgcmV0dXJuIChob29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsVmFsdWUpO1xuICB9LFxuICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgIGluaXRpYWxTdGF0ZSA9IG1vdW50U3RhdGVJbXBsKGluaXRpYWxTdGF0ZSk7XG4gICAgdmFyIHF1ZXVlID0gaW5pdGlhbFN0YXRlLnF1ZXVlLFxuICAgICAgZGlzcGF0Y2ggPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQobnVsbCwgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSwgcXVldWUpO1xuICAgIHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gICAgcmV0dXJuIFtpbml0aWFsU3RhdGUubWVtb2l6ZWRTdGF0ZSwgZGlzcGF0Y2hdO1xuICB9LFxuICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpO1xuICB9LFxuICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlSG9vayA9IG1vdW50U3RhdGVJbXBsKCExKTtcbiAgICBzdGF0ZUhvb2sgPSBzdGFydFRyYW5zaXRpb24uYmluZChcbiAgICAgIG51bGwsXG4gICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICAgc3RhdGVIb29rLnF1ZXVlLFxuICAgICAgITAsXG4gICAgICAhMVxuICAgICk7XG4gICAgbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gc3RhdGVIb29rO1xuICAgIHJldHVybiBbITEsIHN0YXRlSG9va107XG4gIH0sXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBmdW5jdGlvbiAoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgICB2YXIgZmliZXIgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICAgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICBpZiAodm9pZCAwID09PSBnZXRTZXJ2ZXJTbmFwc2hvdClcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDcpKTtcbiAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2V0U2VydmVyU25hcHNob3QgPSBnZXRTbmFwc2hvdCgpO1xuICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDkpKTtcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDYwKSB8fFxuICAgICAgICBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICAgIH1cbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgICB2YXIgaW5zdCA9IHsgdmFsdWU6IGdldFNlcnZlclNuYXBzaG90LCBnZXRTbmFwc2hvdDogZ2V0U25hcHNob3QgfTtcbiAgICBob29rLnF1ZXVlID0gaW5zdDtcbiAgICBtb3VudEVmZmVjdChzdWJzY3JpYmVUb1N0b3JlLmJpbmQobnVsbCwgZmliZXIsIGluc3QsIHN1YnNjcmliZSksIFtcbiAgICAgIHN1YnNjcmliZVxuICAgIF0pO1xuICAgIGZpYmVyLmZsYWdzIHw9IDIwNDg7XG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBpbnN0LFxuICAgICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCxcbiAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICksXG4gICAgICB7IGRlc3Ryb3k6IHZvaWQgMCB9LFxuICAgICAgbnVsbFxuICAgICk7XG4gICAgcmV0dXJuIGdldFNlcnZlclNuYXBzaG90O1xuICB9LFxuICB1c2VJZDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSxcbiAgICAgIGlkZW50aWZpZXJQcmVmaXggPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuaWRlbnRpZmllclByZWZpeDtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICAgICAgdmFyIGlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgKFxuICAgICAgICAgIGlkV2l0aExlYWRpbmdCaXQgJiB+KDEgPDwgKDMyIC0gY2x6MzIoaWRXaXRoTGVhZGluZ0JpdCkgLSAxKSlcbiAgICAgICAgKS50b1N0cmluZygzMikgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICBpZGVudGlmaWVyUHJlZml4ID1cbiAgICAgICAgXCI6XCIgKyBpZGVudGlmaWVyUHJlZml4ICsgXCJSXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBsb2NhbElkQ291bnRlcisrO1xuICAgICAgMCA8IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAoaWRlbnRpZmllclByZWZpeCArPSBcIkhcIiArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikpO1xuICAgICAgaWRlbnRpZmllclByZWZpeCArPSBcIjpcIjtcbiAgICB9IGVsc2VcbiAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnbG9iYWxDbGllbnRJZENvdW50ZXIrKyksXG4gICAgICAgIChpZGVudGlmaWVyUHJlZml4ID1cbiAgICAgICAgICBcIjpcIiArXG4gICAgICAgICAgaWRlbnRpZmllclByZWZpeCArXG4gICAgICAgICAgXCJyXCIgK1xuICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikgK1xuICAgICAgICAgIFwiOlwiKTtcbiAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGlkZW50aWZpZXJQcmVmaXgpO1xuICB9LFxuICB1c2VDYWNoZVJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IHJlZnJlc2hDYWNoZS5iaW5kKFxuICAgICAgbnVsbCxcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDFcbiAgICApKTtcbiAgfVxufTtcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlTWVtb0NhY2hlID0gdXNlTWVtb0NhY2hlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VIb3N0VHJhbnNpdGlvblN0YXR1cyA9IHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VGb3JtU3RhdGUgPSBtb3VudEFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VBY3Rpb25TdGF0ZSA9IG1vdW50QWN0aW9uU3RhdGU7XG5Ib29rc0Rpc3BhdGNoZXJPbk1vdW50LnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IHBhc3N0aHJvdWdoO1xuICB2YXIgcXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBudWxsXG4gIH07XG4gIGhvb2sucXVldWUgPSBxdWV1ZTtcbiAgaG9vayA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgICEwLFxuICAgIHF1ZXVlXG4gICk7XG4gIHF1ZXVlLmRpc3BhdGNoID0gaG9vaztcbiAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9va107XG59O1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZTogdXNlLFxuICB1c2VDYWxsYmFjazogdXBkYXRlQ2FsbGJhY2ssXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB1cGRhdGVJbnNlcnRpb25FZmZlY3QsXG4gIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICB1c2VNZW1vOiB1cGRhdGVNZW1vLFxuICB1c2VSZWR1Y2VyOiB1cGRhdGVSZWR1Y2VyLFxuICB1c2VSZWY6IHVwZGF0ZVJlZixcbiAgdXNlU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcik7XG4gIH0sXG4gIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgIGhvb2ssXG4gICAgICBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLFxuICAgICAgdmFsdWUsXG4gICAgICBpbml0aWFsVmFsdWVcbiAgICApO1xuICB9LFxuICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvb2xlYW5PclRoZW5hYmxlID0gdXBkYXRlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF0sXG4gICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgIHN0YXJ0XG4gICAgXTtcbiAgfSxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlLFxuICB1c2VJZDogdXBkYXRlSWRcbn07XG5Ib29rc0Rpc3BhdGNoZXJPblVwZGF0ZS51c2VDYWNoZVJlZnJlc2ggPSB1cGRhdGVSZWZyZXNoO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlTWVtb0NhY2hlID0gdXNlTWVtb0NhY2hlO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZUZvcm1TdGF0ZSA9IHVwZGF0ZUFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlQWN0aW9uU3RhdGUgPSB1cGRhdGVBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgcmV0dXJuIHVwZGF0ZU9wdGltaXN0aWNJbXBsKGhvb2ssIGN1cnJlbnRIb29rLCBwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xudmFyIEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiB1cGRhdGVDYWxsYmFjayxcbiAgdXNlQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZUVmZmVjdDogdXBkYXRlRWZmZWN0LFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlLFxuICB1c2VJbnNlcnRpb25FZmZlY3Q6IHVwZGF0ZUluc2VydGlvbkVmZmVjdCxcbiAgdXNlTGF5b3V0RWZmZWN0OiB1cGRhdGVMYXlvdXRFZmZlY3QsXG4gIHVzZU1lbW86IHVwZGF0ZU1lbW8sXG4gIHVzZVJlZHVjZXI6IHJlcmVuZGVyUmVkdWNlcixcbiAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gIHVzZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlcmVuZGVyUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcik7XG4gIH0sXG4gIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIHJldHVybiBudWxsID09PSBjdXJyZW50SG9va1xuICAgICAgPyBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpXG4gICAgICA6IHVwZGF0ZURlZmVycmVkVmFsdWVJbXBsKFxuICAgICAgICAgIGhvb2ssXG4gICAgICAgICAgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBpbml0aWFsVmFsdWVcbiAgICAgICAgKTtcbiAgfSxcbiAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBib29sZWFuT3JUaGVuYWJsZSA9IHJlcmVuZGVyUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlcilbMF0sXG4gICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgIHN0YXJ0XG4gICAgXTtcbiAgfSxcbiAgdXNlU3luY0V4dGVybmFsU3RvcmU6IHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlLFxuICB1c2VJZDogdXBkYXRlSWRcbn07XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUNhY2hlUmVmcmVzaCA9IHVwZGF0ZVJlZnJlc2g7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZU1lbW9DYWNoZSA9IHVzZU1lbW9DYWNoZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlRm9ybVN0YXRlID0gcmVyZW5kZXJBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlQWN0aW9uU3RhdGUgPSByZXJlbmRlckFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlci51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50SG9vaylcbiAgICByZXR1cm4gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudEhvb2ssIHBhc3N0aHJvdWdoLCByZWR1Y2VyKTtcbiAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9vay5xdWV1ZS5kaXNwYXRjaF07XG59O1xuZnVuY3Rpb24gYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gIHdvcmtJblByb2dyZXNzLFxuICBjdG9yLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gIG5leHRQcm9wc1xuKSB7XG4gIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBjdG9yKTtcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID1cbiAgICBudWxsID09PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHwgdm9pZCAwID09PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcbiAgICAgID8gY3RvclxuICAgICAgOiBhc3NpZ24oe30sIGN0b3IsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzLmxhbmVzICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyk7XG59XG52YXIgY2xhc3NDb21wb25lbnRVcGRhdGVyID0ge1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICByZXR1cm4gKGNvbXBvbmVudCA9IGNvbXBvbmVudC5fcmVhY3RJbnRlcm5hbHMpXG4gICAgICA/IGdldE5lYXJlc3RNb3VudGVkRmliZXIoY29tcG9uZW50KSA9PT0gY29tcG9uZW50XG4gICAgICA6ICExO1xuICB9LFxuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBwYXlsb2FkID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IHBheWxvYWQgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIocGF5bG9hZCwgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHBheWxvYWQsIGluc3QsIGxhbmUpKTtcbiAgfSxcbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKGluc3QsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlYWN0SW50ZXJuYWxzO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICB1cGRhdGUudGFnID0gMTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIHBheWxvYWQgPSBlbnF1ZXVlVXBkYXRlKGluc3QsIHVwZGF0ZSwgbGFuZSk7XG4gICAgbnVsbCAhPT0gcGF5bG9hZCAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihwYXlsb2FkLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMocGF5bG9hZCwgaW5zdCwgbGFuZSkpO1xuICB9LFxuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChpbnN0LCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnRhZyA9IDI7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIGNhbGxiYWNrID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IGNhbGxiYWNrICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGNhbGxiYWNrLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMoY2FsbGJhY2ssIGluc3QsIGxhbmUpKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY3RvcixcbiAgb2xkUHJvcHMsXG4gIG5ld1Byb3BzLFxuICBvbGRTdGF0ZSxcbiAgbmV3U3RhdGUsXG4gIG5leHRDb250ZXh0XG4pIHtcbiAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcy5zaG91bGRDb21wb25lbnRVcGRhdGVcbiAgICA/IHdvcmtJblByb2dyZXNzLnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXdQcm9wcywgbmV3U3RhdGUsIG5leHRDb250ZXh0KVxuICAgIDogY3Rvci5wcm90b3R5cGUgJiYgY3Rvci5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnRcbiAgICAgID8gIXNoYWxsb3dFcXVhbChvbGRQcm9wcywgbmV3UHJvcHMpIHx8ICFzaGFsbG93RXF1YWwob2xkU3RhdGUsIG5ld1N0YXRlKVxuICAgICAgOiAhMDtcbn1cbmZ1bmN0aW9uIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgaW5zdGFuY2UsXG4gIG5ld1Byb3BzLFxuICBuZXh0Q29udGV4dFxuKSB7XG4gIHdvcmtJblByb2dyZXNzID0gaW5zdGFuY2Uuc3RhdGU7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXh0Q29udGV4dCk7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgaW5zdGFuY2Uuc3RhdGUgIT09IHdvcmtJblByb2dyZXNzICYmXG4gICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoaW5zdGFuY2UsIGluc3RhbmNlLnN0YXRlLCBudWxsKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgYmFzZVByb3BzKSB7XG4gIHZhciBuZXdQcm9wcyA9IGJhc2VQcm9wcztcbiAgaWYgKFwicmVmXCIgaW4gYmFzZVByb3BzKSB7XG4gICAgbmV3UHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBiYXNlUHJvcHMpXG4gICAgICBcInJlZlwiICE9PSBwcm9wTmFtZSAmJiAobmV3UHJvcHNbcHJvcE5hbWVdID0gYmFzZVByb3BzW3Byb3BOYW1lXSk7XG4gIH1cbiAgaWYgKChDb21wb25lbnQgPSBDb21wb25lbnQuZGVmYXVsdFByb3BzKSkge1xuICAgIG5ld1Byb3BzID09PSBiYXNlUHJvcHMgJiYgKG5ld1Byb3BzID0gYXNzaWduKHt9LCBuZXdQcm9wcykpO1xuICAgIGZvciAodmFyIHByb3BOYW1lJDY3IGluIENvbXBvbmVudClcbiAgICAgIHZvaWQgMCA9PT0gbmV3UHJvcHNbcHJvcE5hbWUkNjddICYmXG4gICAgICAgIChuZXdQcm9wc1twcm9wTmFtZSQ2N10gPSBDb21wb25lbnRbcHJvcE5hbWUkNjddKTtcbiAgfVxuICByZXR1cm4gbmV3UHJvcHM7XG59XG52YXIgcmVwb3J0R2xvYmFsRXJyb3IgPVxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXBvcnRFcnJvclxuICAgID8gcmVwb3J0RXJyb3JcbiAgICA6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdpbmRvdy5FcnJvckV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBldmVudCA9IG5ldyB3aW5kb3cuRXJyb3JFdmVudChcImVycm9yXCIsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6ICEwLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgZXJyb3IgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZXJyb3IgJiZcbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb2Nlc3MgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcm9jZXNzLmVtaXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZXJyb3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH07XG5mdW5jdGlvbiBkZWZhdWx0T25VbmNhdWdodEVycm9yKGVycm9yKSB7XG4gIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPbkNhdWdodEVycm9yKGVycm9yKSB7XG4gIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvcihlcnJvcikge1xuICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBsb2dVbmNhdWdodEVycm9yKHJvb3QsIGVycm9ySW5mbykge1xuICB0cnkge1xuICAgIHZhciBvblVuY2F1Z2h0RXJyb3IgPSByb290Lm9uVW5jYXVnaHRFcnJvcjtcbiAgICBvblVuY2F1Z2h0RXJyb3IoZXJyb3JJbmZvLnZhbHVlLCB7IGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uc3RhY2sgfSk7XG4gIH0gY2F0Y2ggKGUkNjgpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGUkNjg7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvZ0NhdWdodEVycm9yKHJvb3QsIGJvdW5kYXJ5LCBlcnJvckluZm8pIHtcbiAgdHJ5IHtcbiAgICB2YXIgb25DYXVnaHRFcnJvciA9IHJvb3Qub25DYXVnaHRFcnJvcjtcbiAgICBvbkNhdWdodEVycm9yKGVycm9ySW5mby52YWx1ZSwge1xuICAgICAgY29tcG9uZW50U3RhY2s6IGVycm9ySW5mby5zdGFjayxcbiAgICAgIGVycm9yQm91bmRhcnk6IDEgPT09IGJvdW5kYXJ5LnRhZyA/IGJvdW5kYXJ5LnN0YXRlTm9kZSA6IG51bGxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSQ2OSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZSQ2OTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3QsIGVycm9ySW5mbywgbGFuZSkge1xuICBsYW5lID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICBsYW5lLnRhZyA9IDM7XG4gIGxhbmUucGF5bG9hZCA9IHsgZWxlbWVudDogbnVsbCB9O1xuICBsYW5lLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGxvZ1VuY2F1Z2h0RXJyb3Iocm9vdCwgZXJyb3JJbmZvKTtcbiAgfTtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKGxhbmUpIHtcbiAgbGFuZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgbGFuZS50YWcgPSAzO1xuICByZXR1cm4gbGFuZTtcbn1cbmZ1bmN0aW9uIGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKHVwZGF0ZSwgcm9vdCwgZmliZXIsIGVycm9ySW5mbykge1xuICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID0gZmliZXIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBlcnJvckluZm8udmFsdWU7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NhdWdodEVycm9yKHJvb3QsIGZpYmVyLCBlcnJvckluZm8pO1xuICAgIH07XG4gIH1cbiAgdmFyIGluc3QgPSBmaWJlci5zdGF0ZU5vZGU7XG4gIG51bGwgIT09IGluc3QgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0LmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgKHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NhdWdodEVycm9yKHJvb3QsIGZpYmVyLCBlcnJvckluZm8pO1xuICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICYmXG4gICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZFxuICAgICAgICAgID8gKGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbmV3IFNldChbdGhpc10pKVxuICAgICAgICAgIDogbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuYWRkKHRoaXMpKTtcbiAgICAgIHZhciBzdGFjayA9IGVycm9ySW5mby5zdGFjaztcbiAgICAgIHRoaXMuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3JJbmZvLnZhbHVlLCB7XG4gICAgICAgIGNvbXBvbmVudFN0YWNrOiBudWxsICE9PSBzdGFjayA/IHN0YWNrIDogXCJcIlxuICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0aHJvd0V4Y2VwdGlvbihcbiAgcm9vdCxcbiAgcmV0dXJuRmliZXIsXG4gIHNvdXJjZUZpYmVyLFxuICB2YWx1ZSxcbiAgcm9vdFJlbmRlckxhbmVzXG4pIHtcbiAgc291cmNlRmliZXIuZmxhZ3MgfD0gMzI3Njg7XG4gIGlmIChcbiAgICBudWxsICE9PSB2YWx1ZSAmJlxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlLnRoZW5cbiAgKSB7XG4gICAgcmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci5hbHRlcm5hdGU7XG4gICAgbnVsbCAhPT0gcmV0dXJuRmliZXIgJiZcbiAgICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgIHJvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgc291cmNlRmliZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICAgIGlmIChudWxsICE9PSBzb3VyY2VGaWJlcikge1xuICAgICAgc3dpdGNoIChzb3VyY2VGaWJlci50YWcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICAgICAgICA/IHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKVxuICAgICAgICAgICAgICA6IG51bGwgPT09IHNvdXJjZUZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgIDAgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDMpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzICY9IC0yNTcpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyA9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICB2YWx1ZSA9PT0gbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlXG4gICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDE2Mzg0KVxuICAgICAgICAgICAgICA6ICgocmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSksXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlID0gbmV3IFNldChbdmFsdWVdKSlcbiAgICAgICAgICAgICAgICAgIDogcmV0dXJuRmliZXIuYWRkKHZhbHVlKSxcbiAgICAgICAgICAgICAgICBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgdmFsdWUsIHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgICAgdmFsdWUgPT09IG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZVxuICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci5mbGFncyB8PSAxNjM4NClcbiAgICAgICAgICAgICAgOiAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAgIG51bGwgPT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICA/ICgocmV0dXJuRmliZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbnM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgbWFya2VySW5zdGFuY2VzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIHJldHJ5UXVldWU6IG5ldyBTZXQoW3ZhbHVlXSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIChzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSA9IHJldHVybkZpYmVyKSlcbiAgICAgICAgICAgICAgICAgIDogKChzb3VyY2VGaWJlciA9IHJldHVybkZpYmVyLnJldHJ5UXVldWUpLFxuICAgICAgICAgICAgICAgICAgICBudWxsID09PSBzb3VyY2VGaWJlclxuICAgICAgICAgICAgICAgICAgICAgID8gKHJldHVybkZpYmVyLnJldHJ5UXVldWUgPSBuZXcgU2V0KFt2YWx1ZV0pKVxuICAgICAgICAgICAgICAgICAgICAgIDogc291cmNlRmliZXIuYWRkKHZhbHVlKSksXG4gICAgICAgICAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM1LCBzb3VyY2VGaWJlci50YWcpKTtcbiAgICB9XG4gICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpO1xuICAgIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKTtcbiAgICByZXR1cm4gITE7XG4gIH1cbiAgaWYgKGlzSHlkcmF0aW5nKVxuICAgIHJldHVybiAoXG4gICAgICAocmV0dXJuRmliZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgIG51bGwgIT09IHJldHVybkZpYmVyXG4gICAgICAgID8gKDAgPT09IChyZXR1cm5GaWJlci5mbGFncyAmIDY1NTM2KSAmJiAocmV0dXJuRmliZXIuZmxhZ3MgfD0gMjU2KSxcbiAgICAgICAgICAocmV0dXJuRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyZXR1cm5GaWJlci5sYW5lcyA9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgdmFsdWUgIT09IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uICYmXG4gICAgICAgICAgICAoKHJvb3QgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyMiksIHsgY2F1c2U6IHZhbHVlIH0pKSxcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIocm9vdCwgc291cmNlRmliZXIpKSkpXG4gICAgICAgIDogKHZhbHVlICE9PSBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgKChyZXR1cm5GaWJlciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDIzKSwge1xuICAgICAgICAgICAgICBjYXVzZTogdmFsdWVcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoXG4gICAgICAgICAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHJldHVybkZpYmVyLCBzb3VyY2VGaWJlcilcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIChyb290ID0gcm9vdC5jdXJyZW50LmFsdGVybmF0ZSksXG4gICAgICAgICAgKHJvb3QuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgJj0gLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHJvb3QubGFuZXMgfD0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAodmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlRmliZXIpKSxcbiAgICAgICAgICAocm9vdFJlbmRlckxhbmVzID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKFxuICAgICAgICAgICAgcm9vdC5zdGF0ZU5vZGUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIHJvb3RSZW5kZXJMYW5lc1xuICAgICAgICAgICkpLFxuICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShyb290LCByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIDQgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMikpLFxuICAgICAgITFcbiAgICApO1xuICB2YXIgd3JhcHBlckVycm9yID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjApLCB7IGNhdXNlOiB2YWx1ZSB9KTtcbiAgd3JhcHBlckVycm9yID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIod3JhcHBlckVycm9yLCBzb3VyY2VGaWJlcik7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnNcbiAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID0gW3dyYXBwZXJFcnJvcl0pXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzLnB1c2god3JhcHBlckVycm9yKTtcbiAgNCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDIpO1xuICBpZiAobnVsbCA9PT0gcmV0dXJuRmliZXIpIHJldHVybiAhMDtcbiAgdmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlRmliZXIpO1xuICBzb3VyY2VGaWJlciA9IHJldHVybkZpYmVyO1xuICBkbyB7XG4gICAgc3dpdGNoIChzb3VyY2VGaWJlci50YWcpIHtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgIChyb290ID0gcm9vdFJlbmRlckxhbmVzICYgLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzIHw9IHJvb3QpLFxuICAgICAgICAgIChyb290ID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHNvdXJjZUZpYmVyLnN0YXRlTm9kZSwgdmFsdWUsIHJvb3QpKSxcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUoc291cmNlRmliZXIsIHJvb3QpLFxuICAgICAgICAgICExXG4gICAgICAgICk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudHlwZSksXG4gICAgICAgICAgKHdyYXBwZXJFcnJvciA9IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgMCA9PT0gKHNvdXJjZUZpYmVyLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVybkZpYmVyLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciB8fFxuICAgICAgICAgICAgICAobnVsbCAhPT0gd3JhcHBlckVycm9yICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd3JhcHBlckVycm9yLmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgICAgICAgICAgICAgKG51bGwgPT09IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIHx8XG4gICAgICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKHdyYXBwZXJFcnJvcikpKSkpXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgJj0gLXJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgfD0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUoXG4gICAgICAgICAgICAgIHJvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHNvdXJjZUZpYmVyLCByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgIH1cbiAgICBzb3VyY2VGaWJlciA9IHNvdXJjZUZpYmVyLnJldHVybjtcbiAgfSB3aGlsZSAobnVsbCAhPT0gc291cmNlRmliZXIpO1xuICByZXR1cm4gITE7XG59XG52YXIgU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjEpKSxcbiAgZGlkUmVjZWl2ZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPVxuICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgID8gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcylcbiAgICAgIDogcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgY3VycmVudC5jaGlsZCxcbiAgICAgICAgICBuZXh0Q2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUZvcndhcmRSZWYoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBDb21wb25lbnQgPSBDb21wb25lbnQucmVuZGVyO1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAoXCJyZWZcIiBpbiBuZXh0UHJvcHMpIHtcbiAgICB2YXIgcHJvcHNXaXRob3V0UmVmID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIG5leHRQcm9wcylcbiAgICAgIFwicmVmXCIgIT09IGtleSAmJiAocHJvcHNXaXRob3V0UmVmW2tleV0gPSBuZXh0UHJvcHNba2V5XSk7XG4gIH0gZWxzZSBwcm9wc1dpdGhvdXRSZWYgPSBuZXh0UHJvcHM7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgbmV4dFByb3BzID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIHByb3BzV2l0aG91dFJlZixcbiAgICByZWYsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbiAga2V5ID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYga2V5ICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgIHZhciB0eXBlID0gQ29tcG9uZW50LnR5cGU7XG4gICAgaWYgKFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSAmJlxuICAgICAgIXNob3VsZENvbnN0cnVjdCh0eXBlKSAmJlxuICAgICAgdm9pZCAwID09PSB0eXBlLmRlZmF1bHRQcm9wcyAmJlxuICAgICAgbnVsbCA9PT0gQ29tcG9uZW50LmNvbXBhcmVcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MudGFnID0gMTUpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IHR5cGUpLFxuICAgICAgICB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgQ29tcG9uZW50LnR5cGUsXG4gICAgICBudWxsLFxuICAgICAgbmV4dFByb3BzLFxuICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlLFxuICAgICAgcmVuZGVyTGFuZXNcbiAgICApO1xuICAgIGN1cnJlbnQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICAgIGN1cnJlbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQpO1xuICB9XG4gIHR5cGUgPSBjdXJyZW50LmNoaWxkO1xuICBpZiAoIWNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0eXBlLm1lbW9pemVkUHJvcHM7XG4gICAgQ29tcG9uZW50ID0gQ29tcG9uZW50LmNvbXBhcmU7XG4gICAgQ29tcG9uZW50ID0gbnVsbCAhPT0gQ29tcG9uZW50ID8gQ29tcG9uZW50IDogc2hhbGxvd0VxdWFsO1xuICAgIGlmIChDb21wb25lbnQocHJldlByb3BzLCBuZXh0UHJvcHMpICYmIGN1cnJlbnQucmVmID09PSB3b3JrSW5Qcm9ncmVzcy5yZWYpXG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICB9XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIGN1cnJlbnQgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyh0eXBlLCBuZXh0UHJvcHMpO1xuICBjdXJyZW50LnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgY3VycmVudC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQpO1xufVxuZnVuY3Rpb24gdXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICBpZiAoXG4gICAgICBzaGFsbG93RXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHMpICYmXG4gICAgICBjdXJyZW50LnJlZiA9PT0gd29ya0luUHJvZ3Jlc3MucmVmXG4gICAgKVxuICAgICAgaWYgKFxuICAgICAgICAoKGRpZFJlY2VpdmVVcGRhdGUgPSAhMSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBuZXh0UHJvcHMgPSBwcmV2UHJvcHMpLFxuICAgICAgICBjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykpXG4gICAgICApXG4gICAgICAgIDAgIT09IChjdXJyZW50LmZsYWdzICYgMTMxMDcyKSAmJiAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzKSxcbiAgICAgICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICAgICAgKTtcbiAgfVxuICByZXR1cm4gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHJlbmRlckxhbmVzXG4gICk7XG59XG5mdW5jdGlvbiB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgbmV4dENoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuLFxuICAgIG5leHRJc0RldGFjaGVkID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyKSxcbiAgICBwcmV2U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIGlmIChcImhpZGRlblwiID09PSBuZXh0UHJvcHMubW9kZSB8fCBuZXh0SXNEZXRhY2hlZCkge1xuICAgIGlmICgwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpKSB7XG4gICAgICBuZXh0UHJvcHMgPVxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMgOiByZW5kZXJMYW5lcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICAgIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgICAgICAgZm9yIChuZXh0SXNEZXRhY2hlZCA9IDA7IG51bGwgIT09IG5leHRDaGlsZHJlbjsgKVxuICAgICAgICAgIChuZXh0SXNEZXRhY2hlZCA9XG4gICAgICAgICAgICBuZXh0SXNEZXRhY2hlZCB8IG5leHRDaGlsZHJlbi5sYW5lcyB8IG5leHRDaGlsZHJlbi5jaGlsZExhbmVzKSxcbiAgICAgICAgICAgIChuZXh0Q2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW4uc2libGluZyk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSBuZXh0SXNEZXRhY2hlZCAmIH5uZXh0UHJvcHM7XG4gICAgICB9IGVsc2UgKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCk7XG4gICAgICByZXR1cm4gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoMCAhPT0gKHJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSlcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0geyBiYXNlTGFuZXM6IDAsIGNhY2hlUG9vbDogbnVsbCB9KSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgIHB1c2hUcmFuc2l0aW9uKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuY2FjaGVQb29sIDogbnVsbFxuICAgICAgICAgICksXG4gICAgICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgICAgID8gcHVzaEhpZGRlbkNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZSlcbiAgICAgICAgICA6IHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDUzNjg3MDkxMiksXG4gICAgICAgIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzIDogcmVuZGVyTGFuZXMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgfSBlbHNlXG4gICAgbnVsbCAhPT0gcHJldlN0YXRlXG4gICAgICA/IChwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlLmNhY2hlUG9vbCksXG4gICAgICAgIHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpLFxuICAgICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGwpKVxuICAgICAgOiAobnVsbCAhPT0gY3VycmVudCAmJiBwdXNoVHJhbnNpdGlvbih3b3JrSW5Qcm9ncmVzcywgbnVsbCksXG4gICAgICAgIHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSk7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0QmFzZUxhbmVzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgIG51bGwgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgPyBudWxsXG4gICAgICA6IHsgcGFyZW50OiBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSwgcG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IH07XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgYmFzZUxhbmVzOiBuZXh0QmFzZUxhbmVzLFxuICAgIGNhY2hlUG9vbDogSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gIH07XG4gIG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpO1xuICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCk7XG4gIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLCAhMCk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAobnVsbCA9PT0gcmVmKVxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQucmVmICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA5NzY2NCk7XG4gIGVsc2Uge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiByZWYgJiYgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHJlZilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjg0KSk7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgY3VycmVudC5yZWYgIT09IHJlZilcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwOTc2NjQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBDb21wb25lbnQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHZvaWQgMCxcbiAgICByZW5kZXJMYW5lc1xuICApO1xuICBuZXh0UHJvcHMgPSBjaGVja0RpZFJlbmRlcklkSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAhZGlkUmVjZWl2ZVVwZGF0ZSlcbiAgICByZXR1cm4gKFxuICAgICAgYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyksXG4gICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICApO1xuICBpc0h5ZHJhdGluZyAmJiBuZXh0UHJvcHMgJiYgcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBuZXh0UHJvcHMsXG4gIENvbXBvbmVudCxcbiAgc2Vjb25kQXJnLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuICBuZXh0UHJvcHMgPSByZW5kZXJXaXRoSG9va3NBZ2FpbihcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgbmV4dFByb3BzLFxuICAgIHNlY29uZEFyZ1xuICApO1xuICBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KTtcbiAgQ29tcG9uZW50ID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgQ29tcG9uZW50ICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSBlbXB0eUNvbnRleHRPYmplY3QsXG4gICAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlICYmXG4gICAgICAoY29udGV4dCA9IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKSk7XG4gICAgY29udGV4dCA9IG5ldyBDb21wb25lbnQobmV4dFByb3BzLCBjb250ZXh0KTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID1cbiAgICAgIG51bGwgIT09IGNvbnRleHQuc3RhdGUgJiYgdm9pZCAwICE9PSBjb250ZXh0LnN0YXRlID8gY29udGV4dC5zdGF0ZSA6IG51bGw7XG4gICAgY29udGV4dC51cGRhdGVyID0gY2xhc3NDb21wb25lbnRVcGRhdGVyO1xuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGNvbnRleHQ7XG4gICAgY29udGV4dC5fcmVhY3RJbnRlcm5hbHMgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5yZWZzID0ge307XG4gICAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0LmNvbnRleHQgPVxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmIG51bGwgIT09IGNvbnRleHRUeXBlXG4gICAgICAgID8gcmVhZENvbnRleHQoY29udGV4dFR5cGUpXG4gICAgICAgIDogZW1wdHlDb250ZXh0T2JqZWN0O1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJlxuICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICBjb250ZXh0VHlwZSxcbiAgICAgICAgbmV4dFByb3BzXG4gICAgICApLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICgoY29udGV4dFR5cGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksXG4gICAgICBjb250ZXh0VHlwZSAhPT0gY29udGV4dC5zdGF0ZSAmJlxuICAgICAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShjb250ZXh0LCBjb250ZXh0LnN0YXRlLCBudWxsKSxcbiAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyksXG4gICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCksXG4gICAgICAoY29udGV4dC5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKTtcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCk7XG4gICAgbmV4dFByb3BzID0gITA7XG4gIH0gZWxzZSBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgIGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgdmFyIHVucmVzb2x2ZWRPbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMsXG4gICAgICBvbGRQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgdW5yZXNvbHZlZE9sZFByb3BzKTtcbiAgICBjb250ZXh0LnByb3BzID0gb2xkUHJvcHM7XG4gICAgdmFyIG9sZENvbnRleHQgPSBjb250ZXh0LmNvbnRleHQsXG4gICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBjb250ZXh0VHlwZSA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY29udGV4dFR5cGUkanNjb21wJDAgJiZcbiAgICAgIG51bGwgIT09IGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICAoY29udGV4dFR5cGUgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSRqc2NvbXAkMCkpO1xuICAgIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgIT09IHVucmVzb2x2ZWRPbGRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKCh1bnJlc29sdmVkT2xkUHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gY29udGV4dFR5cGUpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIGNvbnRleHRUeXBlXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgdmFyIG9sZFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0LnN0YXRlID0gb2xkU3RhdGU7XG4gICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIGNvbnRleHQsIHJlbmRlckxhbmVzKTtcbiAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCk7XG4gICAgb2xkQ29udGV4dCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRDb250ZXh0IHx8IGhhc0ZvcmNlVXBkYXRlXG4gICAgICA/IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgJiZcbiAgICAgICAgICAoYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgICAgICAgICAgIG5leHRQcm9wc1xuICAgICAgICAgICksXG4gICAgICAgICAgKG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChvbGRQcm9wcyA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgb2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG9sZENvbnRleHQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICAgICkpXG4gICAgICAgICAgPyAoY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50KSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gb2xkQ29udGV4dCkpLFxuICAgICAgICAoY29udGV4dC5wcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgIChjb250ZXh0LnN0YXRlID0gb2xkQ29udGV4dCksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBjb250ZXh0VHlwZSksXG4gICAgICAgIChuZXh0UHJvcHMgPSBvbGRQcm9wcykpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZE1vdW50ICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIGNvbnRleHRUeXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKENvbXBvbmVudCwgY29udGV4dFR5cGUpO1xuICAgIGNvbnRleHQucHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMDtcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgb2xkU3RhdGUgPSBjb250ZXh0LmNvbnRleHQ7XG4gICAgb2xkQ29udGV4dCA9IENvbXBvbmVudC5jb250ZXh0VHlwZTtcbiAgICBvbGRQcm9wcyA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2xkQ29udGV4dCAmJlxuICAgICAgbnVsbCAhPT0gb2xkQ29udGV4dCAmJlxuICAgICAgKG9sZFByb3BzID0gcmVhZENvbnRleHQob2xkQ29udGV4dCkpO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgKG9sZENvbnRleHQgPVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzIHx8XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKSB8fFxuICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB8fFxuICAgICAgKChjb250ZXh0VHlwZSAhPT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHx8IG9sZFN0YXRlICE9PSBvbGRQcm9wcykgJiZcbiAgICAgICAgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgKSk7XG4gICAgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbiAgICBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIHZhciBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fFxuICAgIG9sZFN0YXRlICE9PSBuZXdTdGF0ZSB8fFxuICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdW5yZXNvbHZlZE9sZFByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICB1bnJlc29sdmVkT2xkUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHRUeXBlJGpzY29tcCQwID1cbiAgICAgICAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgICAgICAgIGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCxcbiAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgIG9sZFN0YXRlLFxuICAgICAgICAgICAgbmV3U3RhdGUsXG4gICAgICAgICAgICBvbGRQcm9wc1xuICAgICAgICAgICkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5kZXBlbmRlbmNpZXMgJiZcbiAgICAgICAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50LmRlcGVuZGVuY2llcykpKVxuICAgICAgICAgID8gKG9sZENvbnRleHQgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUpIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUgJiZcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXdTdGF0ZSwgb2xkUHJvcHMpLFxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgJiZcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpKVxuICAgICAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICAgICAgb2xkU3RhdGUgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgfHxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGUpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG5ld1N0YXRlKSxcbiAgICAgICAgKGNvbnRleHQuY29udGV4dCA9IG9sZFByb3BzKSxcbiAgICAgICAgKG5leHRQcm9wcyA9IGNvbnRleHRUeXBlJGpzY29tcCQwKSlcbiAgICAgIDogKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50RGlkVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpLFxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlIHx8XG4gICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpLFxuICAgICAgICAobmV4dFByb3BzID0gITEpKTtcbiAgfVxuICBjb250ZXh0ID0gbmV4dFByb3BzO1xuICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgbmV4dFByb3BzID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KTtcbiAgY29udGV4dCB8fCBuZXh0UHJvcHNcbiAgICA/ICgoY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSksXG4gICAgICAoQ29tcG9uZW50ID1cbiAgICAgICAgbmV4dFByb3BzICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3JcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IGNvbnRleHQucmVuZGVyKCkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBuZXh0UHJvcHNcbiAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSkpXG4gICAgICAgIDogcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjb250ZXh0LnN0YXRlKSxcbiAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpKVxuICAgIDogKGN1cnJlbnQgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dENoaWxkcmVuLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjU2O1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbnZhciBTVVNQRU5ERURfTUFSS0VSID0geyBkZWh5ZHJhdGVkOiBudWxsLCB0cmVlQ29udGV4dDogbnVsbCwgcmV0cnlMYW5lOiAwIH07XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIHsgYmFzZUxhbmVzOiByZW5kZXJMYW5lcywgY2FjaGVQb29sOiBnZXRTdXNwZW5kZWRDYWNoZSgpIH07XG59XG5mdW5jdGlvbiBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgY3VycmVudCxcbiAgcHJpbWFyeVRyZWVEaWREZWZlcixcbiAgcmVuZGVyTGFuZXNcbikge1xuICBjdXJyZW50ID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuY2hpbGRMYW5lcyAmIH5yZW5kZXJMYW5lcyA6IDA7XG4gIHByaW1hcnlUcmVlRGlkRGVmZXIgJiYgKGN1cnJlbnQgfD0gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUpO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIHNob3dGYWxsYmFjayA9ICExLFxuICAgIGRpZFN1c3BlbmQgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgKEpTQ29tcGlsZXJfdGVtcCA9IGRpZFN1c3BlbmQpIHx8XG4gICAgKEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/ICExXG4gICAgICAgIDogMCAhPT0gKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDIpKTtcbiAgSlNDb21waWxlcl90ZW1wICYmICgoc2hvd0ZhbGxiYWNrID0gITApLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTEyOSkpO1xuICBKU0NvbXBpbGVyX3RlbXAgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAzMik7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0zMztcbiAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICA/IHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlLFxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgaWYgKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UpKSB7XG4gICAgICAgICAgYzoge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlO1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gcm9vdE9yU2luZ2xldG9uQ29udGV4dDtcbiAgICAgICAgICAgICAgOCAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKCFuZXh0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlXG4gICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBkZWh5ZHJhdGVkOiBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgdHJlZUNvbnRleHQ6XG4gICAgICAgICAgICAgICAgICBudWxsICE9PSB0cmVlQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgID8geyBpZDogdHJlZUNvbnRleHRJZCwgb3ZlcmZsb3c6IHRyZWVDb250ZXh0T3ZlcmZsb3cgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICAgICAgcmV0cnlMYW5lOiA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICAgICAgICAgICAgICAxOCxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5zdGF0ZU5vZGUgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwKSxcbiAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGwpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gITApKVxuICAgICAgICAgICAgOiAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgbmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlICYmXG4gICAgICAgICgobmV4dEluc3RhbmNlID0gbmV4dEluc3RhbmNlLmRlaHlkcmF0ZWQpLCBudWxsICE9PSBuZXh0SW5zdGFuY2UpXG4gICAgICApXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgXCIkIVwiID09PSBuZXh0SW5zdGFuY2UuZGF0YVxuICAgICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSAxNilcbiAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmxhbmVzID0gNTM2ODcwOTEyKSxcbiAgICAgICAgICBudWxsXG4gICAgICAgICk7XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICBuZXh0SW5zdGFuY2UgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgbmV4dFByb3BzID0gbmV4dFByb3BzLmZhbGxiYWNrO1xuICAgIGlmIChzaG93RmFsbGJhY2spXG4gICAgICByZXR1cm4gKFxuICAgICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAgIChuZXh0SW5zdGFuY2UgPSBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIoXG4gICAgICAgICAgeyBtb2RlOiBcImhpZGRlblwiLCBjaGlsZHJlbjogbmV4dEluc3RhbmNlIH0sXG4gICAgICAgICAgc2hvd0ZhbGxiYWNrXG4gICAgICAgICkpLFxuICAgICAgICAobmV4dFByb3BzID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICBudWxsXG4gICAgICAgICkpLFxuICAgICAgICAobmV4dEluc3RhbmNlLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChuZXh0SW5zdGFuY2Uuc2libGluZyA9IG5leHRQcm9wcyksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG5leHRJbnN0YW5jZSksXG4gICAgICAgIChzaG93RmFsbGJhY2sgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgIChzaG93RmFsbGJhY2subWVtb2l6ZWRTdGF0ZSA9IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgICAgbmV4dFByb3BzXG4gICAgICApO1xuICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmV0dXJuIG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4od29ya0luUHJvZ3Jlc3MsIG5leHRJbnN0YW5jZSk7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwICYmXG4gICAgKChuZXh0SW5zdGFuY2UgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuZGVoeWRyYXRlZCksXG4gICAgbnVsbCAhPT0gbmV4dEluc3RhbmNlKVxuICApIHtcbiAgICBpZiAoZGlkU3VzcGVuZClcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMjU2XG4gICAgICAgID8gKHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0yNTcpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApKSlcbiAgICAgICAgOiBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyAocmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBudWxsKSlcbiAgICAgICAgICA6IChyZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjayA9IG5leHRQcm9wcy5mYWxsYmFjayksXG4gICAgICAgICAgICAobmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgICAgICAgICAgICB7IG1vZGU6IFwidmlzaWJsZVwiLCBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuIH0sXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZVxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrLmZsYWdzIHw9IDIpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMuc2libGluZyA9IHNob3dGYWxsYmFjayksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgICAgICAobmV4dFByb3BzLm1lbW9pemVkU3RhdGUgPVxuICAgICAgICAgICAgICBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMuY2hpbGRMYW5lcyA9IGdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gU1VTUEVOREVEX01BUktFUiksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBzaG93RmFsbGJhY2spKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgXCIkIVwiID09PSBuZXh0SW5zdGFuY2UuZGF0YSlcbiAgICApIHtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgIG5leHRJbnN0YW5jZS5uZXh0U2libGluZyAmJiBuZXh0SW5zdGFuY2UubmV4dFNpYmxpbmcuZGF0YXNldDtcbiAgICAgIGlmIChKU0NvbXBpbGVyX3RlbXApIHZhciBkaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXAuZGdzdDtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IGRpZ2VzdDtcbiAgICAgIG5leHRQcm9wcyA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDE5KSk7XG4gICAgICBuZXh0UHJvcHMuc3RhY2sgPSBcIlwiO1xuICAgICAgbmV4dFByb3BzLmRpZ2VzdCA9IEpTQ29tcGlsZXJfdGVtcDtcbiAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IoeyB2YWx1ZTogbmV4dFByb3BzLCBzb3VyY2U6IG51bGwsIHN0YWNrOiBudWxsIH0pO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSB8fFxuICAgICAgICBwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMsICExKSxcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAgPSAwICE9PSAocmVuZGVyTGFuZXMgJiBjdXJyZW50LmNoaWxkTGFuZXMpKSxcbiAgICAgIGRpZFJlY2VpdmVVcGRhdGUgfHwgSlNDb21waWxlcl90ZW1wKVxuICAgICkge1xuICAgICAgSlNDb21waWxlcl90ZW1wID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgaWYgKG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCkge1xuICAgICAgICBuZXh0UHJvcHMgPSByZW5kZXJMYW5lcyAmIC1yZW5kZXJMYW5lcztcbiAgICAgICAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiA0MikpIG5leHRQcm9wcyA9IDE7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzd2l0Y2ggKG5leHRQcm9wcykge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gNDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxNjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyODpcbiAgICAgICAgICAgIGNhc2UgMjU2OlxuICAgICAgICAgICAgY2FzZSA1MTI6XG4gICAgICAgICAgICBjYXNlIDEwMjQ6XG4gICAgICAgICAgICBjYXNlIDIwNDg6XG4gICAgICAgICAgICBjYXNlIDQwOTY6XG4gICAgICAgICAgICBjYXNlIDgxOTI6XG4gICAgICAgICAgICBjYXNlIDE2Mzg0OlxuICAgICAgICAgICAgY2FzZSAzMjc2ODpcbiAgICAgICAgICAgIGNhc2UgNjU1MzY6XG4gICAgICAgICAgICBjYXNlIDEzMTA3MjpcbiAgICAgICAgICAgIGNhc2UgMjYyMTQ0OlxuICAgICAgICAgICAgY2FzZSA1MjQyODg6XG4gICAgICAgICAgICBjYXNlIDEwNDg1NzY6XG4gICAgICAgICAgICBjYXNlIDIwOTcxNTI6XG4gICAgICAgICAgICBjYXNlIDQxOTQzMDQ6XG4gICAgICAgICAgICBjYXNlIDgzODg2MDg6XG4gICAgICAgICAgICBjYXNlIDE2Nzc3MjE2OlxuICAgICAgICAgICAgY2FzZSAzMzU1NDQzMjpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gNjQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgICAgICAgIG5leHRQcm9wcyA9IDEzNDIxNzcyODtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgbmV4dFByb3BzID1cbiAgICAgICAgICAwICE9PSAobmV4dFByb3BzICYgKEpTQ29tcGlsZXJfdGVtcC5zdXNwZW5kZWRMYW5lcyB8IHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiBuZXh0UHJvcHM7XG4gICAgICAgIGlmICgwICE9PSBuZXh0UHJvcHMgJiYgbmV4dFByb3BzICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAucmV0cnlMYW5lKVxuICAgICAgICAgIHRocm93IChcbiAgICAgICAgICAgICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHJ5TGFuZSA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoY3VycmVudCwgbmV4dFByb3BzKSxcbiAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihKU0NvbXBpbGVyX3RlbXAsIGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgICBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24pXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIFwiJD9cIiA9PT0gbmV4dEluc3RhbmNlLmRhdGEgfHwgcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIH0gZWxzZVxuICAgICAgXCIkP1wiID09PSBuZXh0SW5zdGFuY2UuZGF0YVxuICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5LmJpbmQoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY3VycmVudFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChuZXh0SW5zdGFuY2UuX3JlYWN0UmV0cnkgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gbnVsbCkpXG4gICAgICAgIDogKChjdXJyZW50ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnRyZWVDb250ZXh0KSxcbiAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgIChpc0h5ZHJhdGluZyA9ICEwKSxcbiAgICAgICAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCksXG4gICAgICAgICAgKHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0SWQpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRPdmVyZmxvdyksXG4gICAgICAgICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dFByb3ZpZGVyKSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dElkID0gY3VycmVudC5pZCksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRPdmVyZmxvdyA9IGN1cnJlbnQub3ZlcmZsb3cpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG5leHRQcm9wcy5jaGlsZHJlblxuICAgICAgICAgICkpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MDk2KSk7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICB9XG4gIGlmIChzaG93RmFsbGJhY2spXG4gICAgcmV0dXJuIChcbiAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gbmV4dFByb3BzLmZhbGxiYWNrKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgIChkaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuc2libGluZyksXG4gICAgICAobmV4dFByb3BzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLCB7XG4gICAgICAgIG1vZGU6IFwiaGlkZGVuXCIsXG4gICAgICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgIH0pKSxcbiAgICAgIChuZXh0UHJvcHMuc3VidHJlZUZsYWdzID1cbiAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnN1YnRyZWVGbGFncyAmIDMxNDU3MjgwKSxcbiAgICAgIG51bGwgIT09IGRpZ2VzdFxuICAgICAgICA/IChzaG93RmFsbGJhY2sgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhkaWdlc3QsIHNob3dGYWxsYmFjaykpXG4gICAgICAgIDogKChzaG93RmFsbGJhY2sgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgIHNob3dGYWxsYmFjayxcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZSxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICkpLFxuICAgICAgICAgIChzaG93RmFsbGJhY2suZmxhZ3MgfD0gMikpLFxuICAgICAgKHNob3dGYWxsYmFjay5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgIChuZXh0UHJvcHMuc2libGluZyA9IHNob3dGYWxsYmFjayksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0UHJvcHMpLFxuICAgICAgKG5leHRQcm9wcyA9IHNob3dGYWxsYmFjayksXG4gICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgKG5leHRJbnN0YW5jZSA9IGN1cnJlbnQuY2hpbGQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICBudWxsID09PSBuZXh0SW5zdGFuY2VcbiAgICAgICAgPyAobmV4dEluc3RhbmNlID0gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSlcbiAgICAgICAgOiAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZS5jYWNoZVBvb2wpLFxuICAgICAgICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgICAgPyAoKGRpZ2VzdCA9IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnBhcmVudCAhPT0gZGlnZXN0XG4gICAgICAgICAgICAgICAgICA/IHsgcGFyZW50OiBkaWdlc3QsIHBvb2w6IGRpZ2VzdCB9XG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCkpXG4gICAgICAgICAgICA6IChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBnZXRTdXNwZW5kZWRDYWNoZSgpKSxcbiAgICAgICAgICAobmV4dEluc3RhbmNlID0ge1xuICAgICAgICAgICAgYmFzZUxhbmVzOiBuZXh0SW5zdGFuY2UuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMFxuICAgICAgICAgIH0pKSxcbiAgICAgIChzaG93RmFsbGJhY2subWVtb2l6ZWRTdGF0ZSA9IG5leHRJbnN0YW5jZSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgbmV4dFByb3BzXG4gICAgKTtcbiAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgcmVuZGVyTGFuZXMgPSBjdXJyZW50LmNoaWxkO1xuICBjdXJyZW50ID0gcmVuZGVyTGFuZXMuc2libGluZztcbiAgcmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywge1xuICAgIG1vZGU6IFwidmlzaWJsZVwiLFxuICAgIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgfSk7XG4gIHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICByZW5kZXJMYW5lcy5zaWJsaW5nID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICgoSlNDb21waWxlcl90ZW1wID0gd29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zKSxcbiAgICBudWxsID09PSBKU0NvbXBpbGVyX3RlbXBcbiAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBbY3VycmVudF0pLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTYpKVxuICAgICAgOiBKU0NvbXBpbGVyX3RlbXAucHVzaChjdXJyZW50KSk7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICByZXR1cm4gcmVuZGVyTGFuZXM7XG59XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4pIHtcbiAgcHJpbWFyeUNoaWxkcmVuID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgIHsgbW9kZTogXCJ2aXNpYmxlXCIsIGNoaWxkcmVuOiBwcmltYXJ5Q2hpbGRyZW4gfSxcbiAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlXG4gICk7XG4gIHByaW1hcnlDaGlsZHJlbi5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmV0dXJuICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHByaW1hcnlDaGlsZHJlbik7XG59XG5mdW5jdGlvbiBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIob2Zmc2NyZWVuUHJvcHMsIG1vZGUpIHtcbiAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihvZmZzY3JlZW5Qcm9wcywgbW9kZSwgMCwgbnVsbCk7XG59XG5mdW5jdGlvbiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuY2hpbGQsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgY3VycmVudCA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuXG4gICk7XG4gIGN1cnJlbnQuZmxhZ3MgfD0gMjtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHJldHVybiBjdXJyZW50O1xufVxuZnVuY3Rpb24gc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGZpYmVyLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KSB7XG4gIGZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoZmliZXIucmV0dXJuLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KTtcbn1cbmZ1bmN0aW9uIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGlzQmFja3dhcmRzLFxuICB0YWlsLFxuICBsYXN0Q29udGVudFJvdyxcbiAgdGFpbE1vZGVcbikge1xuICB2YXIgcmVuZGVyU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBudWxsID09PSByZW5kZXJTdGF0ZVxuICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgIGlzQmFja3dhcmRzOiBpc0JhY2t3YXJkcyxcbiAgICAgICAgcmVuZGVyaW5nOiBudWxsLFxuICAgICAgICByZW5kZXJpbmdTdGFydFRpbWU6IDAsXG4gICAgICAgIGxhc3Q6IGxhc3RDb250ZW50Um93LFxuICAgICAgICB0YWlsOiB0YWlsLFxuICAgICAgICB0YWlsTW9kZTogdGFpbE1vZGVcbiAgICAgIH0pXG4gICAgOiAoKHJlbmRlclN0YXRlLmlzQmFja3dhcmRzID0gaXNCYWNrd2FyZHMpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZyA9IG51bGwpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IDApLFxuICAgICAgKHJlbmRlclN0YXRlLmxhc3QgPSBsYXN0Q29udGVudFJvdyksXG4gICAgICAocmVuZGVyU3RhdGUudGFpbCA9IHRhaWwpLFxuICAgICAgKHJlbmRlclN0YXRlLnRhaWxNb2RlID0gdGFpbE1vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICByZXZlYWxPcmRlciA9IG5leHRQcm9wcy5yZXZlYWxPcmRlcixcbiAgICB0YWlsTW9kZSA9IG5leHRQcm9wcy50YWlsO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLmNoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIG5leHRQcm9wcyA9IHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiAyKSlcbiAgICAobmV4dFByb3BzID0gKG5leHRQcm9wcyAmIDEpIHwgMiksICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpO1xuICBlbHNlIHtcbiAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAwICE9PSAoY3VycmVudC5mbGFncyAmIDEyOCkpXG4gICAgICBhOiBmb3IgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY3VycmVudDsgKSB7XG4gICAgICAgIGlmICgxMyA9PT0gY3VycmVudC50YWcpXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoY3VycmVudCwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgZWxzZSBpZiAoMTkgPT09IGN1cnJlbnQudGFnKVxuICAgICAgICAgIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihjdXJyZW50LCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBlbHNlIGlmIChudWxsICE9PSBjdXJyZW50LmNoaWxkKSB7XG4gICAgICAgICAgY3VycmVudC5jaGlsZC5yZXR1cm4gPSBjdXJyZW50O1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNoaWxkO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgZm9yICg7IG51bGwgPT09IGN1cnJlbnQuc2libGluZzsgKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQucmV0dXJuIHx8IGN1cnJlbnQucmV0dXJuID09PSB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQuc2libGluZy5yZXR1cm4gPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc2libGluZztcbiAgICAgIH1cbiAgICBuZXh0UHJvcHMgJj0gMTtcbiAgfVxuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5leHRQcm9wcyk7XG4gIHN3aXRjaCAocmV2ZWFsT3JkZXIpIHtcbiAgICBjYXNlIFwiZm9yd2FyZHNcIjpcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBmb3IgKHJldmVhbE9yZGVyID0gbnVsbDsgbnVsbCAhPT0gcmVuZGVyTGFuZXM7IClcbiAgICAgICAgKGN1cnJlbnQgPSByZW5kZXJMYW5lcy5hbHRlcm5hdGUpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSAmJlxuICAgICAgICAgICAgKHJldmVhbE9yZGVyID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgIG51bGwgPT09IHJlbmRlckxhbmVzXG4gICAgICAgID8gKChyZXZlYWxPcmRlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCkpXG4gICAgICAgIDogKChyZXZlYWxPcmRlciA9IHJlbmRlckxhbmVzLnNpYmxpbmcpLCAocmVuZGVyTGFuZXMuc2libGluZyA9IG51bGwpKTtcbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICExLFxuICAgICAgICByZXZlYWxPcmRlcixcbiAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgIHRhaWxNb2RlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJhY2t3YXJkc1wiOlxuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsO1xuICAgICAgcmV2ZWFsT3JkZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIGZvciAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBudWxsOyBudWxsICE9PSByZXZlYWxPcmRlcjsgKSB7XG4gICAgICAgIGN1cnJlbnQgPSByZXZlYWxPcmRlci5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmV2ZWFsT3JkZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHJldmVhbE9yZGVyLnNpYmxpbmc7XG4gICAgICAgIHJldmVhbE9yZGVyLnNpYmxpbmcgPSByZW5kZXJMYW5lcztcbiAgICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgICAgcmV2ZWFsT3JkZXIgPSBjdXJyZW50O1xuICAgICAgfVxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgITAsXG4gICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICBudWxsLFxuICAgICAgICB0YWlsTW9kZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0b2dldGhlclwiOlxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKHdvcmtJblByb2dyZXNzLCAhMSwgbnVsbCwgbnVsbCwgdm9pZCAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBudWxsICE9PSBjdXJyZW50ICYmICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcztcbiAgaWYgKDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmIHdvcmtJblByb2dyZXNzLmNoaWxkICE9PSBjdXJyZW50LmNoaWxkKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUzKSk7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCkge1xuICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICByZW5kZXJMYW5lcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIGN1cnJlbnQucGVuZGluZ1Byb3BzKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICAgIGZvciAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7IG51bGwgIT09IGN1cnJlbnQuc2libGluZzsgKVxuICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmcpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nID1cbiAgICAgICAgICBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBjdXJyZW50LnBlbmRpbmdQcm9wcykpLFxuICAgICAgICAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpO1xuICAgIHJlbmRlckxhbmVzLnNpYmxpbmcgPSBudWxsO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSB7XG4gIGlmICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSkgcmV0dXJuICEwO1xuICBjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHJldHVybiBudWxsICE9PSBjdXJyZW50ICYmIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZShcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHB1c2hQcm92aWRlcihcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMudmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsICE9PSBzdGF0ZSkge1xuICAgICAgICBpZiAobnVsbCAhPT0gc3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIGlmICgwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZC5jaGlsZExhbmVzKSlcbiAgICAgICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgY3VycmVudCA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuc2libGluZyA6IG51bGw7XG4gICAgICB9XG4gICAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciBkaWRTdXNwZW5kQmVmb3JlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpO1xuICAgICAgc3RhdGUgPSAwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKTtcbiAgICAgIHN0YXRlIHx8XG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIChzdGF0ZSA9IDAgIT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKSk7XG4gICAgICBpZiAoZGlkU3VzcGVuZEJlZm9yZSkge1xuICAgICAgICBpZiAoc3RhdGUpXG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgfVxuICAgICAgZGlkU3VzcGVuZEJlZm9yZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSBkaWRTdXNwZW5kQmVmb3JlICYmXG4gICAgICAgICgoZGlkU3VzcGVuZEJlZm9yZS5yZW5kZXJpbmcgPSBudWxsKSxcbiAgICAgICAgKGRpZFN1c3BlbmRCZWZvcmUudGFpbCA9IG51bGwpLFxuICAgICAgICAoZGlkU3VzcGVuZEJlZm9yZS5sYXN0RWZmZWN0ID0gbnVsbCkpO1xuICAgICAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICAgICAgaWYgKHN0YXRlKSBicmVhaztcbiAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMCksXG4gICAgICAgIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgfVxuICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xufVxuZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBpZiAobnVsbCAhPT0gY3VycmVudClcbiAgICBpZiAoY3VycmVudC5tZW1vaXplZFByb3BzICE9PSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gITA7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgICFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykgJiZcbiAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAgIGF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMzEwNzIpID8gITAgOiAhMTtcbiAgICB9XG4gIGVsc2VcbiAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEwNDg1NzYpICYmXG4gICAgICAgIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRyZWVGb3JrQ291bnQsIHdvcmtJblByb2dyZXNzLmluZGV4KTtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTY6XG4gICAgICBhOiB7XG4gICAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBpbml0KGxhenlDb21wb25lbnQuX3BheWxvYWQpO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gbGF6eUNvbXBvbmVudDtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxhenlDb21wb25lbnQpXG4gICAgICAgICAgc2hvdWxkQ29uc3RydWN0KGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICA/ICgoY3VycmVudCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKGxhenlDb21wb25lbnQsIGN1cnJlbnQpKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDEpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzcy50YWcgPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBsYXp5Q29tcG9uZW50ICYmIG51bGwgIT09IGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgoaW5pdCA9IGxhenlDb21wb25lbnQuJCR0eXBlb2YpLCBpbml0ID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDExO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5pdCA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDE0O1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgICBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUobGF6eUNvbXBvbmVudCkgfHwgbGF6eUNvbXBvbmVudDtcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwNiwgd29ya0luUHJvZ3Jlc3MsIFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgKGluaXQgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wc1xuICAgICAgICApKSxcbiAgICAgICAgdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIGluaXQsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjYXNlIDM6XG4gICAgICBhOiB7XG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICk7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICBpbml0ID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgbGF6eUNvbXBvbmVudCA9IGluaXQuZWxlbWVudDtcbiAgICAgICAgY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBudWxsLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICBuZXh0UHJvcHMgPSBuZXh0U3RhdGUuY2FjaGU7XG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBuZXh0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgIT09IGluaXQuY2FjaGUgJiZcbiAgICAgICAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgW0NhY2hlQ29udGV4dF0sXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICEwXG4gICAgICAgICAgKTtcbiAgICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgICAgICBuZXh0UHJvcHMgPSBuZXh0U3RhdGUuZWxlbWVudDtcbiAgICAgICAgaWYgKGluaXQuaXNEZWh5ZHJhdGVkKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoaW5pdCA9IHtcbiAgICAgICAgICAgICAgZWxlbWVudDogbmV4dFByb3BzLFxuICAgICAgICAgICAgICBpc0RlaHlkcmF0ZWQ6ICExLFxuICAgICAgICAgICAgICBjYWNoZTogbmV4dFN0YXRlLmNhY2hlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBpbml0KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gaW5pdCksXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5leHRQcm9wcyAhPT0gbGF6eUNvbXBvbmVudCkge1xuICAgICAgICAgICAgbGF6eUNvbXBvbmVudCA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKFxuICAgICAgICAgICAgICBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyNCkpLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHF1ZXVlSHlkcmF0aW9uRXJyb3IobGF6eUNvbXBvbmVudCk7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgaXNIeWRyYXRpbmcgPSAhMCxcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25FcnJvcnMgPSBudWxsLFxuICAgICAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lcyA9IG1vdW50Q2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXM7XG5cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKHJlbmRlckxhbmVzLmZsYWdzID0gKHJlbmRlckxhbmVzLmZsYWdzICYgLTMpIHwgNDA5NiksXG4gICAgICAgICAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgICAgICAgICBpZiAobmV4dFByb3BzID09PSBsYXp5Q29tcG9uZW50KSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgfVxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMjY6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKHJlbmRlckxhbmVzID0gZ2V0UmVzb3VyY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKSlcbiAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSByZW5kZXJMYW5lcylcbiAgICAgICAgICAgIDogaXNIeWRyYXRpbmcgfHxcbiAgICAgICAgICAgICAgKChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnR5cGUpLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50ID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKFxuICAgICAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICAgICAgKS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudFtpbnRlcm5hbFByb3BzS2V5XSA9IGN1cnJlbnQpLFxuICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhsYXp5Q29tcG9uZW50LCByZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUobGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBsYXp5Q29tcG9uZW50KSlcbiAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gZ2V0UmVzb3VyY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgICAgICkpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjc6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgaXNIeWRyYXRpbmcgJiZcbiAgICAgICAgICAoKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPVxuICAgICAgICAgICAgcmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAocm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICEwKSxcbiAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgbGF6eUNvbXBvbmVudC5maXJzdENoaWxkXG4gICAgICAgICAgKSkpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgfHwgaXNIeWRyYXRpbmdcbiAgICAgICAgICA/IHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA1OlxuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgJiYgaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgaWYgKChpbml0ID0gbGF6eUNvbXBvbmVudCA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChsYXp5Q29tcG9uZW50ID0gY2FuSHlkcmF0ZUluc3RhbmNlKFxuICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0XG4gICAgICAgICAgKSksXG4gICAgICAgICAgICBudWxsICE9PSBsYXp5Q29tcG9uZW50XG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQuZmlyc3RDaGlsZFxuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgICAgICAgIChpbml0ID0gITApKVxuICAgICAgICAgICAgICA6IChpbml0ID0gITEpO1xuICAgICAgICBpbml0IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICBuZXh0U3RhdGUgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogbnVsbDtcbiAgICAgIGxhenlDb21wb25lbnQgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBuZXh0UHJvcHMpXG4gICAgICAgID8gKGxhenlDb21wb25lbnQgPSBudWxsKVxuICAgICAgICA6IG51bGwgIT09IG5leHRTdGF0ZSAmJlxuICAgICAgICAgIHNob3VsZFNldFRleHRDb250ZW50KGluaXQsIG5leHRTdGF0ZSkgJiZcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMzIpO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKGluaXQgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKEhvc3RUcmFuc2l0aW9uQ29udGV4dC5fY3VycmVudFZhbHVlID0gaW5pdCkpO1xuICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGF6eUNvbXBvbmVudCwgcmVuZGVyTGFuZXMpO1xuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoY3VycmVudCA9IHJlbmRlckxhbmVzID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSkpXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgICAoY3VycmVudCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoY3VycmVudCA9ICExKTtcbiAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSlcbiAgICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gdXBkYXRlRm9yd2FyZFJlZihcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSA3OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MudHlwZSwgbGF6eUNvbXBvbmVudC52YWx1ZSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbGF6eUNvbXBvbmVudC5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoaW5pdCA9IHdvcmtJblByb2dyZXNzLnR5cGUuX2NvbnRleHQpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksXG4gICAgICAgIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGluaXQgPSByZWFkQ29udGV4dChpbml0KSksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gbGF6eUNvbXBvbmVudChpbml0KSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE1OlxuICAgICAgcmV0dXJuIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgY2FzZSAyMjpcbiAgICAgIHJldHVybiB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCkpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAoKGluaXQgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IGluaXQgJiZcbiAgICAgICAgICAgICAgKChpbml0ID0gd29ya0luUHJvZ3Jlc3NSb290KSxcbiAgICAgICAgICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZUNhY2hlKCkpLFxuICAgICAgICAgICAgICAoaW5pdC5wb29sZWRDYWNoZSA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAgIG5leHRQcm9wcy5yZWZDb3VudCsrLFxuICAgICAgICAgICAgICBudWxsICE9PSBuZXh0UHJvcHMgJiYgKGluaXQucG9vbGVkQ2FjaGVMYW5lcyB8PSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIChpbml0ID0gbmV4dFByb3BzKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgcGFyZW50OiBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICBjYWNoZTogaW5pdFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpbml0aWFsaXplVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGluaXQpKVxuICAgICAgICAgIDogKDAgIT09IChjdXJyZW50LmxhbmVzICYgcmVuZGVyTGFuZXMpICYmXG4gICAgICAgICAgICAgIChjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBudWxsLCBudWxsLCByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSksXG4gICAgICAgICAgICAoaW5pdCA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgICAgICBpbml0LnBhcmVudCAhPT0gbGF6eUNvbXBvbmVudFxuICAgICAgICAgICAgICA/ICgoaW5pdCA9IHsgcGFyZW50OiBsYXp5Q29tcG9uZW50LCBjYWNoZTogbGF6eUNvbXBvbmVudCB9KSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluaXQpLFxuICAgICAgICAgICAgICAgIDAgPT09IHdvcmtJblByb2dyZXNzLmxhbmVzICYmXG4gICAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgaW5pdCksXG4gICAgICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGxhenlDb21wb25lbnQpKVxuICAgICAgICAgICAgICA6ICgobGF6eUNvbXBvbmVudCA9IG5leHRQcm9wcy5jYWNoZSksXG4gICAgICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGxhenlDb21wb25lbnQpLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQgIT09IGluaXQuY2FjaGUgJiZcbiAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgICAgW0NhY2hlQ29udGV4dF0sXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICAgICAgKSkpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDI5OlxuICAgICAgdGhyb3cgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTU2LCB3b3JrSW5Qcm9ncmVzcy50YWcpKTtcbn1cbnZhciB2YWx1ZUN1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsLFxuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuZnVuY3Rpb24gcHVzaFByb3ZpZGVyKHByb3ZpZGVyRmliZXIsIGNvbnRleHQsIG5leHRWYWx1ZSkge1xuICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUpO1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBuZXh0VmFsdWU7XG59XG5mdW5jdGlvbiBwb3BQcm92aWRlcihjb250ZXh0KSB7XG4gIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IHZhbHVlQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcCh2YWx1ZUN1cnNvcik7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKHBhcmVudCwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCkge1xuICBmb3IgKDsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAocGFyZW50LmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzXG4gICAgICA/ICgocGFyZW50LmNoaWxkTGFuZXMgfD0gcmVuZGVyTGFuZXMpLFxuICAgICAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSlcbiAgICAgIDogbnVsbCAhPT0gYWx0ZXJuYXRlICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyAmIHJlbmRlckxhbmVzKSAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgKGFsdGVybmF0ZS5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICBpZiAocGFyZW50ID09PSBwcm9wYWdhdGlvblJvb3QpIGJyZWFrO1xuICAgIHBhcmVudCA9IHBhcmVudC5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY29udGV4dHMsXG4gIHJlbmRlckxhbmVzLFxuICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWVcbikge1xuICB2YXIgZmliZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgbnVsbCAhPT0gZmliZXIgJiYgKGZpYmVyLnJldHVybiA9IHdvcmtJblByb2dyZXNzKTtcbiAgZm9yICg7IG51bGwgIT09IGZpYmVyOyApIHtcbiAgICB2YXIgbGlzdCA9IGZpYmVyLmRlcGVuZGVuY2llcztcbiAgICBpZiAobnVsbCAhPT0gbGlzdCkge1xuICAgICAgdmFyIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgICAgbGlzdCA9IGxpc3QuZmlyc3RDb250ZXh0O1xuICAgICAgYTogZm9yICg7IG51bGwgIT09IGxpc3Q7ICkge1xuICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IGxpc3Q7XG4gICAgICAgIGxpc3QgPSBmaWJlcjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZXh0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICBpZiAoZGVwZW5kZW5jeS5jb250ZXh0ID09PSBjb250ZXh0c1tpXSkge1xuICAgICAgICAgICAgbGlzdC5sYW5lcyB8PSByZW5kZXJMYW5lcztcbiAgICAgICAgICAgIGRlcGVuZGVuY3kgPSBsaXN0LmFsdGVybmF0ZTtcbiAgICAgICAgICAgIG51bGwgIT09IGRlcGVuZGVuY3kgJiYgKGRlcGVuZGVuY3kubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChcbiAgICAgICAgICAgICAgbGlzdC5yZXR1cm4sXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZSB8fCAobmV4dEZpYmVyID0gbnVsbCk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgbGlzdCA9IGRlcGVuZGVuY3kubmV4dDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKDE4ID09PSBmaWJlci50YWcpIHtcbiAgICAgIG5leHRGaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICAgIGlmIChudWxsID09PSBuZXh0RmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQxKSk7XG4gICAgICBuZXh0RmliZXIubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICBsaXN0ID0gbmV4dEZpYmVyLmFsdGVybmF0ZTtcbiAgICAgIG51bGwgIT09IGxpc3QgJiYgKGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICAgICAgc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChuZXh0RmliZXIsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgIH0gZWxzZSBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gbmV4dEZpYmVyKSBuZXh0RmliZXIucmV0dXJuID0gZmliZXI7XG4gICAgZWxzZVxuICAgICAgZm9yIChuZXh0RmliZXIgPSBmaWJlcjsgbnVsbCAhPT0gbmV4dEZpYmVyOyApIHtcbiAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGZpYmVyID0gbmV4dEZpYmVyLnNpYmxpbmc7XG4gICAgICAgIGlmIChudWxsICE9PSBmaWJlcikge1xuICAgICAgICAgIGZpYmVyLnJldHVybiA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICAgICAgbmV4dEZpYmVyID0gZmliZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEZpYmVyID0gbmV4dEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICBmaWJlciA9IG5leHRGaWJlcjtcbiAgfVxufVxuZnVuY3Rpb24gcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIGZvciAoXG4gICAgdmFyIHBhcmVudCA9IHdvcmtJblByb2dyZXNzLCBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICExO1xuICAgIG51bGwgIT09IHBhcmVudDtcblxuICApIHtcbiAgICBpZiAoIWlzSW5zaWRlUHJvcGFnYXRpb25CYWlsb3V0KVxuICAgICAgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiA1MjQyODgpKSBpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCA9ICEwO1xuICAgICAgZWxzZSBpZiAoMCAhPT0gKHBhcmVudC5mbGFncyAmIDI2MjE0NCkpIGJyZWFrO1xuICAgIGlmICgxMCA9PT0gcGFyZW50LnRhZykge1xuICAgICAgdmFyIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5tZW1vaXplZFByb3BzO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBwYXJlbnQudHlwZTtcbiAgICAgICAgb2JqZWN0SXMocGFyZW50LnBlbmRpbmdQcm9wcy52YWx1ZSwgY3VycmVudFBhcmVudC52YWx1ZSkgfHxcbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQucHVzaChjb250ZXh0KSA6IChjdXJyZW50ID0gW2NvbnRleHRdKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJlbnQgPT09IGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IuY3VycmVudCkge1xuICAgICAgY3VycmVudFBhcmVudCA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudFBhcmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzODcpKTtcbiAgICAgIGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICE9PVxuICAgICAgICBwYXJlbnQubWVtb2l6ZWRTdGF0ZS5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIChudWxsICE9PSBjdXJyZW50XG4gICAgICAgICAgPyBjdXJyZW50LnB1c2goSG9zdFRyYW5zaXRpb25Db250ZXh0KVxuICAgICAgICAgIDogKGN1cnJlbnQgPSBbSG9zdFRyYW5zaXRpb25Db250ZXh0XSkpO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgY3VycmVudCxcbiAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4gICAgKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjYyMTQ0O1xufVxuZnVuY3Rpb24gY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnREZXBlbmRlbmNpZXMpIHtcbiAgZm9yIChcbiAgICBjdXJyZW50RGVwZW5kZW5jaWVzID0gY3VycmVudERlcGVuZGVuY2llcy5maXJzdENvbnRleHQ7XG4gICAgbnVsbCAhPT0gY3VycmVudERlcGVuZGVuY2llcztcblxuICApIHtcbiAgICBpZiAoXG4gICAgICAhb2JqZWN0SXMoXG4gICAgICAgIGN1cnJlbnREZXBlbmRlbmNpZXMuY29udGV4dC5fY3VycmVudFZhbHVlLFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLm1lbW9pemVkVmFsdWVcbiAgICAgIClcbiAgICApXG4gICAgICByZXR1cm4gITA7XG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMubmV4dDtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcztcbiAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgKHdvcmtJblByb2dyZXNzLmZpcnN0Q29udGV4dCA9IG51bGwpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCkge1xuICByZXR1cm4gcmVhZENvbnRleHRGb3JDb25zdW1lcihjdXJyZW50bHlSZW5kZXJpbmdGaWJlciwgY29udGV4dCk7XG59XG5mdW5jdGlvbiByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKGNvbnN1bWVyLCBjb250ZXh0KSB7XG4gIG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyICYmIHByZXBhcmVUb1JlYWRDb250ZXh0KGNvbnN1bWVyKTtcbiAgcmV0dXJuIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHRGb3JDb25zdW1lcihjb25zdW1lciwgY29udGV4dCkge1xuICB2YXIgdmFsdWUgPSBjb250ZXh0Ll9jdXJyZW50VmFsdWU7XG4gIGNvbnRleHQgPSB7IGNvbnRleHQ6IGNvbnRleHQsIG1lbW9pemVkVmFsdWU6IHZhbHVlLCBuZXh0OiBudWxsIH07XG4gIGlmIChudWxsID09PSBsYXN0Q29udGV4dERlcGVuZGVuY3kpIHtcbiAgICBpZiAobnVsbCA9PT0gY29uc3VtZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzA4KSk7XG4gICAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gY29udGV4dDtcbiAgICBjb25zdW1lci5kZXBlbmRlbmNpZXMgPSB7IGxhbmVzOiAwLCBmaXJzdENvbnRleHQ6IGNvbnRleHQgfTtcbiAgICBjb25zdW1lci5mbGFncyB8PSA1MjQyODg7XG4gIH0gZWxzZSBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBsYXN0Q29udGV4dERlcGVuZGVuY3kubmV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiB2YWx1ZTtcbn1cbnZhciBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKGZpYmVyKSB7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0ge1xuICAgIGJhc2VTdGF0ZTogZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICBmaXJzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgbGFzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgc2hhcmVkOiB7IHBlbmRpbmc6IG51bGwsIGxhbmVzOiAwLCBoaWRkZW5DYWxsYmFja3M6IG51bGwgfSxcbiAgICBjYWxsYmFja3M6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID09PSBjdXJyZW50ICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0ge1xuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50LmJhc2VTdGF0ZSxcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZTogY3VycmVudC5maXJzdEJhc2VVcGRhdGUsXG4gICAgICBsYXN0QmFzZVVwZGF0ZTogY3VycmVudC5sYXN0QmFzZVVwZGF0ZSxcbiAgICAgIHNoYXJlZDogY3VycmVudC5zaGFyZWQsXG4gICAgICBjYWxsYmFja3M6IG51bGxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShsYW5lKSB7XG4gIHJldHVybiB7IGxhbmU6IGxhbmUsIHRhZzogMCwgcGF5bG9hZDogbnVsbCwgY2FsbGJhY2s6IG51bGwsIG5leHQ6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgPT09IHVwZGF0ZVF1ZXVlKSByZXR1cm4gbnVsbDtcbiAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5zaGFyZWQ7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpKSB7XG4gICAgdmFyIHBlbmRpbmcgPSB1cGRhdGVRdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICAgIHVwZGF0ZVF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgdXBkYXRlID0gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG4gICAgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIG51bGwsIGxhbmUpO1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH1cbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCB1cGRhdGVRdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBmaWJlciwgbGFuZSkge1xuICBmaWJlciA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgKChmaWJlciA9IGZpYmVyLnNoYXJlZCksIDAgIT09IChsYW5lICYgNDE5NDE3NikpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBmaWJlci5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBmaWJlci5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVDYXB0dXJlZFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY2FwdHVyZWRVcGRhdGUpIHtcbiAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUsXG4gICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSwgcXVldWUgPT09IGN1cnJlbnQpXG4gICkge1xuICAgIHZhciBuZXdGaXJzdCA9IG51bGwsXG4gICAgICBuZXdMYXN0ID0gbnVsbDtcbiAgICBxdWV1ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGNsb25lID0ge1xuICAgICAgICAgIGxhbmU6IHF1ZXVlLmxhbmUsXG4gICAgICAgICAgdGFnOiBxdWV1ZS50YWcsXG4gICAgICAgICAgcGF5bG9hZDogcXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIG51bGwgPT09IG5ld0xhc3RcbiAgICAgICAgICA/IChuZXdGaXJzdCA9IG5ld0xhc3QgPSBjbG9uZSlcbiAgICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2xvbmUpO1xuICAgICAgICBxdWV1ZSA9IHF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlIChudWxsICE9PSBxdWV1ZSk7XG4gICAgICBudWxsID09PSBuZXdMYXN0XG4gICAgICAgID8gKG5ld0ZpcnN0ID0gbmV3TGFzdCA9IGNhcHR1cmVkVXBkYXRlKVxuICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICAgIH0gZWxzZSBuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZTtcbiAgICBxdWV1ZSA9IHtcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudC5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IG5ld0ZpcnN0LFxuICAgICAgbGFzdEJhc2VVcGRhdGU6IG5ld0xhc3QsXG4gICAgICBzaGFyZWQ6IGN1cnJlbnQuc2hhcmVkLFxuICAgICAgY2FsbGJhY2tzOiBjdXJyZW50LmNhbGxiYWNrc1xuICAgIH07XG4gICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBxdWV1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgd29ya0luUHJvZ3Jlc3MgPSBxdWV1ZS5sYXN0QmFzZVVwZGF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/IChxdWV1ZS5maXJzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzcy5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGNhcHR1cmVkVXBkYXRlO1xufVxudmFyIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24gPSAhMTtcbmZ1bmN0aW9uIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSB7XG4gIGlmIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKSB7XG4gICAgdmFyIGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlO1xuICAgIGlmIChudWxsICE9PSBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSkgdGhyb3cgZW50YW5nbGVkQWN0aW9uVGhlbmFibGU7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVRdWV1ZShcbiAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAsXG4gIHByb3BzLFxuICBpbnN0YW5jZSRqc2NvbXAkMCxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITE7XG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLnVwZGF0ZVF1ZXVlO1xuICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICB2YXIgZmlyc3RCYXNlVXBkYXRlID0gcXVldWUuZmlyc3RCYXNlVXBkYXRlLFxuICAgIGxhc3RCYXNlVXBkYXRlID0gcXVldWUubGFzdEJhc2VVcGRhdGUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUuc2hhcmVkLnBlbmRpbmc7XG4gIGlmIChudWxsICE9PSBwZW5kaW5nUXVldWUpIHtcbiAgICBxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIGxhc3RQZW5kaW5nVXBkYXRlID0gcGVuZGluZ1F1ZXVlLFxuICAgICAgZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUubmV4dDtcbiAgICBsYXN0UGVuZGluZ1VwZGF0ZS5uZXh0ID0gbnVsbDtcbiAgICBudWxsID09PSBsYXN0QmFzZVVwZGF0ZVxuICAgICAgPyAoZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgOiAobGFzdEJhc2VVcGRhdGUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSk7XG4gICAgbGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZTtcbiAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgIChwZW5kaW5nUXVldWUgPSBjdXJyZW50Lmxhc3RCYXNlVXBkYXRlKSxcbiAgICAgIHBlbmRpbmdRdWV1ZSAhPT0gbGFzdEJhc2VVcGRhdGUgJiZcbiAgICAgICAgKG51bGwgPT09IHBlbmRpbmdRdWV1ZVxuICAgICAgICAgID8gKGN1cnJlbnQuZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgICAgIDogKHBlbmRpbmdRdWV1ZS5uZXh0ID0gZmlyc3RQZW5kaW5nVXBkYXRlKSxcbiAgICAgICAgKGN1cnJlbnQubGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZSkpKTtcbiAgfVxuICBpZiAobnVsbCAhPT0gZmlyc3RCYXNlVXBkYXRlKSB7XG4gICAgdmFyIG5ld1N0YXRlID0gcXVldWUuYmFzZVN0YXRlO1xuICAgIGxhc3RCYXNlVXBkYXRlID0gMDtcbiAgICBjdXJyZW50ID0gZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUgPSBudWxsO1xuICAgIHBlbmRpbmdRdWV1ZSA9IGZpcnN0QmFzZVVwZGF0ZTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5sYW5lICYgLTUzNjg3MDkxMyxcbiAgICAgICAgaXNIaWRkZW5VcGRhdGUgPSB1cGRhdGVMYW5lICE9PSBwZW5kaW5nUXVldWUubGFuZTtcbiAgICAgIGlmIChcbiAgICAgICAgaXNIaWRkZW5VcGRhdGVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIDAgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAgICAgICB1cGRhdGVMYW5lID09PSBjdXJyZW50RW50YW5nbGVkTGFuZSAmJlxuICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITApO1xuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgICB0YWc6IHBlbmRpbmdRdWV1ZS50YWcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHBlbmRpbmdRdWV1ZS5wYXlsb2FkLFxuICAgICAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICB2YXIgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCxcbiAgICAgICAgICAgIHVwZGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICAgICAgICB1cGRhdGVMYW5lID0gcHJvcHM7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2UkanNjb21wJDA7XG4gICAgICAgICAgc3dpdGNoICh1cGRhdGUudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MuY2FsbChpbnN0YW5jZSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAtNjU1MzcpIHwgMTI4O1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICAgICAgICB1cGRhdGVMYW5lID1cbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgPyB3b3JrSW5Qcm9ncmVzcy5jYWxsKGluc3RhbmNlLCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSlcbiAgICAgICAgICAgICAgICAgIDogd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB1cGRhdGVMYW5lIHx8IHZvaWQgMCA9PT0gdXBkYXRlTGFuZSkgYnJlYWsgYTtcbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSBhc3NpZ24oe30sIG5ld1N0YXRlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgaGFzRm9yY2VVcGRhdGUgPSAhMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5jYWxsYmFjaztcbiAgICAgICAgbnVsbCAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MkanNjb21wJDAuZmxhZ3MgfD0gNjQpLFxuICAgICAgICAgIGlzSGlkZGVuVXBkYXRlICYmICh3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBxdWV1ZS5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgPT09IGlzSGlkZGVuVXBkYXRlXG4gICAgICAgICAgICA/IChxdWV1ZS5jYWxsYmFja3MgPSBbdXBkYXRlTGFuZV0pXG4gICAgICAgICAgICA6IGlzSGlkZGVuVXBkYXRlLnB1c2godXBkYXRlTGFuZSkpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChpc0hpZGRlblVwZGF0ZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHRhZzogcGVuZGluZ1F1ZXVlLnRhZyxcbiAgICAgICAgICBwYXlsb2FkOiBwZW5kaW5nUXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogcGVuZGluZ1F1ZXVlLmNhbGxiYWNrLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgICAgPyAoKGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGN1cnJlbnQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgICAgIChsYXN0UGVuZGluZ1VwZGF0ZSA9IG5ld1N0YXRlKSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgKGxhc3RCYXNlVXBkYXRlIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgcGVuZGluZ1F1ZXVlID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBpZiAobnVsbCA9PT0gcGVuZGluZ1F1ZXVlKVxuICAgICAgICBpZiAoKChwZW5kaW5nUXVldWUgPSBxdWV1ZS5zaGFyZWQucGVuZGluZyksIG51bGwgPT09IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBwZW5kaW5nUXVldWUpLFxuICAgICAgICAgICAgKHBlbmRpbmdRdWV1ZSA9IGlzSGlkZGVuVXBkYXRlLm5leHQpLFxuICAgICAgICAgICAgKGlzSGlkZGVuVXBkYXRlLm5leHQgPSBudWxsKSxcbiAgICAgICAgICAgIChxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGlzSGlkZGVuVXBkYXRlKSxcbiAgICAgICAgICAgIChxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGwpO1xuICAgIH0gd2hpbGUgKDEpO1xuICAgIG51bGwgPT09IGN1cnJlbnQgJiYgKGxhc3RQZW5kaW5nVXBkYXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmJhc2VTdGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlO1xuICAgIHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZTtcbiAgICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGN1cnJlbnQ7XG4gICAgbnVsbCA9PT0gZmlyc3RCYXNlVXBkYXRlICYmIChxdWV1ZS5zaGFyZWQubGFuZXMgPSAwKTtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gbGFzdEJhc2VVcGRhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAubGFuZXMgPSBsYXN0QmFzZVVwZGF0ZTtcbiAgICB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2FsbGJhY2spXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTEsIGNhbGxiYWNrKSk7XG4gIGNhbGxiYWNrLmNhbGwoY29udGV4dCk7XG59XG5mdW5jdGlvbiBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGNvbnRleHQpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IHVwZGF0ZVF1ZXVlLmNhbGxiYWNrcztcbiAgaWYgKG51bGwgIT09IGNhbGxiYWNrcylcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUuY2FsbGJhY2tzID0gbnVsbCwgdXBkYXRlUXVldWUgPSAwO1xuICAgICAgdXBkYXRlUXVldWUgPCBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgdXBkYXRlUXVldWUrK1xuICAgIClcbiAgICAgIGNhbGxDYWxsYmFjayhjYWxsYmFja3NbdXBkYXRlUXVldWVdLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoZmxhZ3MsIGZpbmlzaGVkV29yaykge1xuICB0cnkge1xuICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSxcbiAgICAgIGxhc3RFZmZlY3QgPSBudWxsICE9PSB1cGRhdGVRdWV1ZSA/IHVwZGF0ZVF1ZXVlLmxhc3RFZmZlY3QgOiBudWxsO1xuICAgIGlmIChudWxsICE9PSBsYXN0RWZmZWN0KSB7XG4gICAgICB2YXIgZmlyc3RFZmZlY3QgPSBsYXN0RWZmZWN0Lm5leHQ7XG4gICAgICB1cGRhdGVRdWV1ZSA9IGZpcnN0RWZmZWN0O1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoKHVwZGF0ZVF1ZXVlLnRhZyAmIGZsYWdzKSA9PT0gZmxhZ3MpIHtcbiAgICAgICAgICBsYXN0RWZmZWN0ID0gdm9pZCAwO1xuICAgICAgICAgIHZhciBjcmVhdGUgPSB1cGRhdGVRdWV1ZS5jcmVhdGUsXG4gICAgICAgICAgICBpbnN0ID0gdXBkYXRlUXVldWUuaW5zdDtcbiAgICAgICAgICBsYXN0RWZmZWN0ID0gY3JlYXRlKCk7XG4gICAgICAgICAgaW5zdC5kZXN0cm95ID0gbGFzdEVmZmVjdDtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlICh1cGRhdGVRdWV1ZSAhPT0gZmlyc3RFZmZlY3QpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KFxuICBmbGFncyxcbiAgZmluaXNoZWRXb3JrLFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwXG4pIHtcbiAgdHJ5IHtcbiAgICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUsXG4gICAgICBsYXN0RWZmZWN0ID0gbnVsbCAhPT0gdXBkYXRlUXVldWUgPyB1cGRhdGVRdWV1ZS5sYXN0RWZmZWN0IDogbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gbGFzdEVmZmVjdCkge1xuICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgdXBkYXRlUXVldWUgPSBmaXJzdEVmZmVjdDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCh1cGRhdGVRdWV1ZS50YWcgJiBmbGFncykgPT09IGZsYWdzKSB7XG4gICAgICAgICAgdmFyIGluc3QgPSB1cGRhdGVRdWV1ZS5pbnN0LFxuICAgICAgICAgICAgZGVzdHJveSA9IGluc3QuZGVzdHJveTtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBkZXN0cm95KSB7XG4gICAgICAgICAgICBpbnN0LmRlc3Ryb3kgPSB2b2lkIDA7XG4gICAgICAgICAgICBsYXN0RWZmZWN0ID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgdmFyIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZGVzdHJveSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgICAgbGFzdEVmZmVjdCxcbiAgICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWUubmV4dDtcbiAgICAgIH0gd2hpbGUgKHVwZGF0ZVF1ZXVlICE9PSBmaXJzdEVmZmVjdCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gdXBkYXRlUXVldWUpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHRyeSB7XG4gICAgICBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGluc3RhbmNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gIGN1cnJlbnQsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIGluc3RhbmNlXG4pIHtcbiAgaW5zdGFuY2UucHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICBjdXJyZW50LnR5cGUsXG4gICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICk7XG4gIGluc3RhbmNlLnN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICB0cnkge1xuICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlBdHRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB0cnkge1xuICAgIHZhciByZWYgPSBjdXJyZW50LnJlZjtcbiAgICBpZiAobnVsbCAhPT0gcmVmKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgIHN3aXRjaCAoY3VycmVudC50YWcpIHtcbiAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBpbnN0YW5jZVRvVXNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGluc3RhbmNlO1xuICAgICAgfVxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmXG4gICAgICAgID8gKGN1cnJlbnQucmVmQ2xlYW51cCA9IHJlZihpbnN0YW5jZVRvVXNlKSlcbiAgICAgICAgOiAocmVmLmN1cnJlbnQgPSBpbnN0YW5jZVRvVXNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB2YXIgcmVmID0gY3VycmVudC5yZWYsXG4gICAgcmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgaWYgKG51bGwgIT09IHJlZilcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVmQ2xlYW51cClcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZkNsZWFudXAoKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKSxcbiAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQuYWx0ZXJuYXRlKSxcbiAgICAgICAgICBudWxsICE9IGN1cnJlbnQgJiYgKGN1cnJlbnQucmVmQ2xlYW51cCA9IG51bGwpO1xuICAgICAgfVxuICAgIGVsc2UgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZilcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlZihudWxsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yJDExMikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvciQxMTIpO1xuICAgICAgfVxuICAgIGVsc2UgcmVmLmN1cnJlbnQgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yaykge1xuICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlLFxuICAgIHByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICB0cnkge1xuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgcHJvcHMuYXV0b0ZvY3VzICYmIGluc3RhbmNlLmZvY3VzKCk7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgIHByb3BzLnNyY1xuICAgICAgICAgID8gKGluc3RhbmNlLnNyYyA9IHByb3BzLnNyYylcbiAgICAgICAgICA6IHByb3BzLnNyY1NldCAmJiAoaW5zdGFuY2Uuc3Jjc2V0ID0gcHJvcHMuc3JjU2V0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RVcGRhdGUoZmluaXNoZWRXb3JrLCBuZXdQcm9wcywgb2xkUHJvcHMpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZG9tRWxlbWVudCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCBmaW5pc2hlZFdvcmsudHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzSG9zdFBhcmVudChmaWJlcikge1xuICByZXR1cm4gKFxuICAgIDUgPT09IGZpYmVyLnRhZyB8fFxuICAgIDMgPT09IGZpYmVyLnRhZyB8fFxuICAgIDI2ID09PSBmaWJlci50YWcgfHxcbiAgICAyNyA9PT0gZmliZXIudGFnIHx8XG4gICAgNCA9PT0gZmliZXIudGFnXG4gICk7XG59XG5mdW5jdGlvbiBnZXRIb3N0U2libGluZyhmaWJlcikge1xuICBhOiBmb3IgKDs7KSB7XG4gICAgZm9yICg7IG51bGwgPT09IGZpYmVyLnNpYmxpbmc7ICkge1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyLnJldHVybiB8fCBpc0hvc3RQYXJlbnQoZmliZXIucmV0dXJuKSkgcmV0dXJuIG51bGw7XG4gICAgICBmaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICB9XG4gICAgZmliZXIuc2libGluZy5yZXR1cm4gPSBmaWJlci5yZXR1cm47XG4gICAgZm9yIChcbiAgICAgIGZpYmVyID0gZmliZXIuc2libGluZztcbiAgICAgIDUgIT09IGZpYmVyLnRhZyAmJlxuICAgICAgNiAhPT0gZmliZXIudGFnICYmXG4gICAgICAyNyAhPT0gZmliZXIudGFnICYmXG4gICAgICAxOCAhPT0gZmliZXIudGFnO1xuXG4gICAgKSB7XG4gICAgICBpZiAoZmliZXIuZmxhZ3MgJiAyKSBjb250aW51ZSBhO1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyLmNoaWxkIHx8IDQgPT09IGZpYmVyLnRhZykgY29udGludWUgYTtcbiAgICAgIGVsc2UgKGZpYmVyLmNoaWxkLnJldHVybiA9IGZpYmVyKSwgKGZpYmVyID0gZmliZXIuY2hpbGQpO1xuICAgIH1cbiAgICBpZiAoIShmaWJlci5mbGFncyAmIDIpKSByZXR1cm4gZmliZXIuc3RhdGVOb2RlO1xuICB9XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKG5vZGUsIGJlZm9yZSwgcGFyZW50KSB7XG4gIHZhciB0YWcgPSBub2RlLnRhZztcbiAgaWYgKDUgPT09IHRhZyB8fCA2ID09PSB0YWcpXG4gICAgKG5vZGUgPSBub2RlLnN0YXRlTm9kZSksXG4gICAgICBiZWZvcmVcbiAgICAgICAgPyA4ID09PSBwYXJlbnQubm9kZVR5cGVcbiAgICAgICAgICA/IHBhcmVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpXG4gICAgICAgICAgOiBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGJlZm9yZSlcbiAgICAgICAgOiAoOCA9PT0gcGFyZW50Lm5vZGVUeXBlXG4gICAgICAgICAgICA/ICgoYmVmb3JlID0gcGFyZW50LnBhcmVudE5vZGUpLCBiZWZvcmUuaW5zZXJ0QmVmb3JlKG5vZGUsIHBhcmVudCkpXG4gICAgICAgICAgICA6ICgoYmVmb3JlID0gcGFyZW50KSwgYmVmb3JlLmFwcGVuZENoaWxkKG5vZGUpKSxcbiAgICAgICAgICAocGFyZW50ID0gcGFyZW50Ll9yZWFjdFJvb3RDb250YWluZXIpLFxuICAgICAgICAgIChudWxsICE9PSBwYXJlbnQgJiYgdm9pZCAwICE9PSBwYXJlbnQpIHx8XG4gICAgICAgICAgICBudWxsICE9PSBiZWZvcmUub25jbGljayB8fFxuICAgICAgICAgICAgKGJlZm9yZS5vbmNsaWNrID0gbm9vcCQxKSk7XG4gIGVsc2UgaWYgKDQgIT09IHRhZyAmJiAyNyAhPT0gdGFnICYmICgobm9kZSA9IG5vZGUuY2hpbGQpLCBudWxsICE9PSBub2RlKSlcbiAgICBmb3IgKFxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCksXG4gICAgICAgIChub2RlID0gbm9kZS5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlID8gcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpIDogcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICBlbHNlIGlmICg0ICE9PSB0YWcgJiYgMjcgIT09IHRhZyAmJiAoKG5vZGUgPSBub2RlLmNoaWxkKSwgbnVsbCAhPT0gbm9kZSkpXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCksIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKG5vZGUsIGJlZm9yZSwgcGFyZW50KSwgKG5vZGUgPSBub2RlLnNpYmxpbmcpO1xufVxudmFyIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9ICExLFxuICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gITEsXG4gIG5lZWRzRm9ybVJlc2V0ID0gITEsXG4gIFBvc3NpYmx5V2Vha1NldCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtTZXQgPyBXZWFrU2V0IDogU2V0LFxuICBuZXh0RWZmZWN0ID0gbnVsbCxcbiAgc2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyID0gITE7XG5mdW5jdGlvbiBjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmlyc3RDaGlsZCkge1xuICByb290ID0gcm9vdC5jb250YWluZXJJbmZvO1xuICBldmVudHNFbmFibGVkID0gX2VuYWJsZWQ7XG4gIHJvb3QgPSBnZXRBY3RpdmVFbGVtZW50RGVlcChyb290KTtcbiAgaWYgKGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhyb290KSkge1xuICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gcm9vdClcbiAgICAgIHZhciBKU0NvbXBpbGVyX3RlbXAgPSB7XG4gICAgICAgIHN0YXJ0OiByb290LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IHJvb3Quc2VsZWN0aW9uRW5kXG4gICAgICB9O1xuICAgIGVsc2VcbiAgICAgIGE6IHtcbiAgICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAoKEpTQ29tcGlsZXJfdGVtcCA9IHJvb3Qub3duZXJEb2N1bWVudCkgJiZcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3c7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPVxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5nZXRTZWxlY3Rpb24gJiYgSlNDb21waWxlcl90ZW1wLmdldFNlbGVjdGlvbigpO1xuICAgICAgICBpZiAoc2VsZWN0aW9uICYmIDAgIT09IHNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gc2VsZWN0aW9uLmFuY2hvck5vZGU7XG4gICAgICAgICAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICAgICAgICBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgICAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLm5vZGVUeXBlLCBmb2N1c05vZGUubm9kZVR5cGU7XG4gICAgICAgICAgfSBjYXRjaCAoZSQyMCkge1xuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBsZW5ndGggPSAwLFxuICAgICAgICAgICAgc3RhcnQgPSAtMSxcbiAgICAgICAgICAgIGVuZCA9IC0xLFxuICAgICAgICAgICAgaW5kZXhXaXRoaW5BbmNob3IgPSAwLFxuICAgICAgICAgICAgaW5kZXhXaXRoaW5Gb2N1cyA9IDAsXG4gICAgICAgICAgICBub2RlID0gcm9vdCxcbiAgICAgICAgICAgIHBhcmVudE5vZGUgPSBudWxsO1xuICAgICAgICAgIGI6IGZvciAoOzspIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5leHQ7IDsgKSB7XG4gICAgICAgICAgICAgIG5vZGUgIT09IEpTQ29tcGlsZXJfdGVtcCB8fFxuICAgICAgICAgICAgICAgICgwICE9PSBhbmNob3JPZmZzZXQgJiYgMyAhPT0gbm9kZS5ub2RlVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAoc3RhcnQgPSBsZW5ndGggKyBhbmNob3JPZmZzZXQpO1xuICAgICAgICAgICAgICBub2RlICE9PSBmb2N1c05vZGUgfHxcbiAgICAgICAgICAgICAgICAoMCAhPT0gc2VsZWN0aW9uICYmIDMgIT09IG5vZGUubm9kZVR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKGVuZCA9IGxlbmd0aCArIHNlbGVjdGlvbik7XG4gICAgICAgICAgICAgIDMgPT09IG5vZGUubm9kZVR5cGUgJiYgKGxlbmd0aCArPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gKG5leHQgPSBub2RlLmZpcnN0Q2hpbGQpKSBicmVhaztcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gcm9vdCkgYnJlYWsgYjtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9PT0gSlNDb21waWxlcl90ZW1wICYmXG4gICAgICAgICAgICAgICAgKytpbmRleFdpdGhpbkFuY2hvciA9PT0gYW5jaG9yT2Zmc2V0ICYmXG4gICAgICAgICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoKTtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9PT0gZm9jdXNOb2RlICYmXG4gICAgICAgICAgICAgICAgKytpbmRleFdpdGhpbkZvY3VzID09PSBzZWxlY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAoZW5kID0gbGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT09IChuZXh0ID0gbm9kZS5uZXh0U2libGluZykpIGJyZWFrO1xuICAgICAgICAgICAgICBub2RlID0gcGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICAgLTEgPT09IHN0YXJ0IHx8IC0xID09PSBlbmQgPyBudWxsIDogeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgICAgIH0gZWxzZSBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICAgICAgfVxuICAgIEpTQ29tcGlsZXJfdGVtcCA9IEpTQ29tcGlsZXJfdGVtcCB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTtcbiAgfSBlbHNlIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0geyBmb2N1c2VkRWxlbTogcm9vdCwgc2VsZWN0aW9uUmFuZ2U6IEpTQ29tcGlsZXJfdGVtcCB9O1xuICBfZW5hYmxlZCA9ICExO1xuICBmb3IgKG5leHRFZmZlY3QgPSBmaXJzdENoaWxkOyBudWxsICE9PSBuZXh0RWZmZWN0OyApXG4gICAgaWYgKFxuICAgICAgKChmaXJzdENoaWxkID0gbmV4dEVmZmVjdCksXG4gICAgICAocm9vdCA9IGZpcnN0Q2hpbGQuY2hpbGQpLFxuICAgICAgMCAhPT0gKGZpcnN0Q2hpbGQuc3VidHJlZUZsYWdzICYgMTAyOCkgJiYgbnVsbCAhPT0gcm9vdClcbiAgICApXG4gICAgICAocm9vdC5yZXR1cm4gPSBmaXJzdENoaWxkKSwgKG5leHRFZmZlY3QgPSByb290KTtcbiAgICBlbHNlXG4gICAgICBmb3IgKDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgICAgIGZpcnN0Q2hpbGQgPSBuZXh0RWZmZWN0O1xuICAgICAgICBmb2N1c05vZGUgPSBmaXJzdENoaWxkLmFsdGVybmF0ZTtcbiAgICAgICAgcm9vdCA9IGZpcnN0Q2hpbGQuZmxhZ3M7XG4gICAgICAgIHN3aXRjaCAoZmlyc3RDaGlsZC50YWcpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSAmJiBudWxsICE9PSBmb2N1c05vZGUpIHtcbiAgICAgICAgICAgICAgcm9vdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wID0gZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0ID0gZm9jdXNOb2RlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIGZvY3VzTm9kZSA9IGZvY3VzTm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgICBzZWxlY3Rpb24gPSBKU0NvbXBpbGVyX3RlbXAuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciByZXNvbHZlZFByZXZQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLnR5cGUsXG4gICAgICAgICAgICAgICAgICBhbmNob3JPZmZzZXQsXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZWxlbWVudFR5cGUgPT09IEpTQ29tcGlsZXJfdGVtcC50eXBlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByb290ID0gc2VsZWN0aW9uLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKFxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRQcmV2UHJvcHMsXG4gICAgICAgICAgICAgICAgICBmb2N1c05vZGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IHJvb3Q7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAucmV0dXJuLFxuICAgICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSlcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICgocm9vdCA9IGZpcnN0Q2hpbGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPSByb290Lm5vZGVUeXBlKSxcbiAgICAgICAgICAgICAgICA5ID09PSBKU0NvbXBpbGVyX3RlbXApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShyb290KTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoMSA9PT0gSlNDb21waWxlcl90ZW1wKVxuICAgICAgICAgICAgICAgIHN3aXRjaCAocm9vdC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIkhFQURcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJIVE1MXCI6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiQk9EWVwiOlxuICAgICAgICAgICAgICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShyb290KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByb290LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpZiAoMCAhPT0gKHJvb3QgJiAxMDI0KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjMpKTtcbiAgICAgICAgfVxuICAgICAgICByb290ID0gZmlyc3RDaGlsZC5zaWJsaW5nO1xuICAgICAgICBpZiAobnVsbCAhPT0gcm9vdCkge1xuICAgICAgICAgIHJvb3QucmV0dXJuID0gZmlyc3RDaGlsZC5yZXR1cm47XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IHJvb3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQucmV0dXJuO1xuICAgICAgfVxuICByZXNvbHZlZFByZXZQcm9wcyA9IHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1cjtcbiAgc2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyID0gITE7XG4gIHJldHVybiByZXNvbHZlZFByZXZQcm9wcztcbn1cbmZ1bmN0aW9uIGNvbW1pdExheW91dEVmZmVjdE9uRmliZXIoZmluaXNoZWRSb290LCBjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQpXG4gICAgICAgIGlmICgoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpLCBudWxsID09PSBjdXJyZW50KSlcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZQcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICApO1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRVcGRhdGUoXG4gICAgICAgICAgICAgIHByZXZQcm9wcyxcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yJDExMSkge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgICAgZXJyb3IkMTExXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgZmxhZ3MgJiA2NCAmJiBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA2NCAmJiAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSwgbnVsbCAhPT0gZmxhZ3MpKSB7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IG51bGw7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFdvcmsuY2hpbGQpXG4gICAgICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsuY2hpbGQudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29tbWl0Q2FsbGJhY2tzKGZsYWdzLCBmaW5pc2hlZFJvb3QpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgJiYgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgcHJldlByb3BzID1cbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgfHwgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuO1xuICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICAgIHZhciBwcmV2T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuLFxuICAgICAgICAgIHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldlByb3BzO1xuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IGN1cnJlbnQpICYmICFwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlblxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgfVxuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKFwibWFudWFsXCIgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLm1vZGVcbiAgICAgICAgICA/IHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pXG4gICAgICAgICAgOiBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyhmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiZcbiAgICAoKGZpYmVyLmFsdGVybmF0ZSA9IG51bGwpLCBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyhhbHRlcm5hdGUpKTtcbiAgZmliZXIuY2hpbGQgPSBudWxsO1xuICBmaWJlci5kZWxldGlvbnMgPSBudWxsO1xuICBmaWJlci5zaWJsaW5nID0gbnVsbDtcbiAgNSA9PT0gZmliZXIudGFnICYmXG4gICAgKChhbHRlcm5hdGUgPSBmaWJlci5zdGF0ZU5vZGUpLFxuICAgIG51bGwgIT09IGFsdGVybmF0ZSAmJiBkZXRhY2hEZWxldGVkSW5zdGFuY2UoYWx0ZXJuYXRlKSk7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IG51bGw7XG4gIGZpYmVyLnJldHVybiA9IG51bGw7XG4gIGZpYmVyLmRlcGVuZGVuY2llcyA9IG51bGw7XG4gIGZpYmVyLm1lbW9pemVkUHJvcHMgPSBudWxsO1xuICBmaWJlci5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgZmliZXIucGVuZGluZ1Byb3BzID0gbnVsbDtcbiAgZmliZXIuc3RhdGVOb2RlID0gbnVsbDtcbiAgZmliZXIudXBkYXRlUXVldWUgPSBudWxsO1xufVxudmFyIGhvc3RQYXJlbnQgPSBudWxsLFxuICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMTtcbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgcGFyZW50XG4pIHtcbiAgZm9yIChwYXJlbnQgPSBwYXJlbnQuY2hpbGQ7IG51bGwgIT09IHBhcmVudDsgKVxuICAgIGNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBwYXJlbnQpLFxuICAgICAgKHBhcmVudCA9IHBhcmVudC5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIoXG4gIGZpbmlzaGVkUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgZGVsZXRlZEZpYmVyXG4pIHtcbiAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclVubW91bnQpXG4gICAgdHJ5IHtcbiAgICAgIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudChyZW5kZXJlcklELCBkZWxldGVkRmliZXIpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbiAgc3dpdGNoIChkZWxldGVkRmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGUuY291bnQtLVxuICAgICAgICA6IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUgJiZcbiAgICAgICAgICAoKGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgIGRlbGV0ZWRGaWJlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRlbGV0ZWRGaWJlcikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICB2YXIgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50LFxuICAgICAgICBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyID0gaG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgaG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICBmb3IgKFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gZGVsZXRlZEZpYmVyLmF0dHJpYnV0ZXM7XG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IubGVuZ3RoO1xuXG4gICAgICApXG4gICAgICAgIGRlbGV0ZWRGaWJlci5yZW1vdmVBdHRyaWJ1dGVOb2RlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3JbMF0pO1xuICAgICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlKGRlbGV0ZWRGaWJlcik7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICBjYXNlIDY6XG4gICAgICBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyID0gaG9zdFBhcmVudDtcbiAgICAgIHZhciBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyJDExOSA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBob3N0UGFyZW50ID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXIkMTE5O1xuICAgICAgaWYgKG51bGwgIT09IGhvc3RQYXJlbnQpXG4gICAgICAgIGlmIChob3N0UGFyZW50SXNDb250YWluZXIpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBob3N0UGFyZW50KSxcbiAgICAgICAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgICAgIDggPT09IGZpbmlzaGVkUm9vdC5ub2RlVHlwZVxuICAgICAgICAgICAgICAgID8gZmluaXNoZWRSb290LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHJldkhvc3RQYXJlbnQpXG4gICAgICAgICAgICAgICAgOiBmaW5pc2hlZFJvb3QucmVtb3ZlQ2hpbGQocHJldkhvc3RQYXJlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9zdFBhcmVudC5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODpcbiAgICAgIG51bGwgIT09IGhvc3RQYXJlbnQgJiZcbiAgICAgICAgKGhvc3RQYXJlbnRJc0NvbnRhaW5lclxuICAgICAgICAgID8gKChuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gaG9zdFBhcmVudCksXG4gICAgICAgICAgICAoZGVsZXRlZEZpYmVyID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgICA4ID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLm5vZGVUeXBlXG4gICAgICAgICAgICAgID8gY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KFxuICAgICAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICA6IDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iubm9kZVR5cGUgJiZcbiAgICAgICAgICAgICAgICBjbGVhclN1c3BlbnNlQm91bmRhcnkobmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZGVsZXRlZEZpYmVyKSxcbiAgICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24obmVhcmVzdE1vdW50ZWRBbmNlc3RvcikpXG4gICAgICAgICAgOiBjbGVhclN1c3BlbnNlQm91bmRhcnkoaG9zdFBhcmVudCwgZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDIsIGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIChzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSxcbiAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZIb3N0UGFyZW50LmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgIHByZXZIb3N0UGFyZW50XG4gICAgICAgICAgKSk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9XG4gICAgICAgIChwcmV2SG9zdFBhcmVudCA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pIHx8XG4gICAgICAgIG51bGwgIT09IGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gcHJldkhvc3RQYXJlbnQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKSB7XG4gIGlmIChcbiAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSksXG4gICAgbnVsbCAhPT0gZmluaXNoZWRSb290ICYmXG4gICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5tZW1vaXplZFN0YXRlKSxcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5kZWh5ZHJhdGVkKSwgbnVsbCAhPT0gZmluaXNoZWRSb290KSkpXG4gIClcbiAgICB0cnkge1xuICAgICAgcmV0cnlJZkJsb2NrZWRPbihmaW5pc2hlZFJvb3QpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRSZXRyeUNhY2hlKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgIGNhc2UgMTk6XG4gICAgICB2YXIgcmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBudWxsID09PSByZXRyeUNhY2hlICYmXG4gICAgICAgIChyZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQoKSk7XG4gICAgICByZXR1cm4gcmV0cnlDYWNoZTtcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpLFxuICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5fcmV0cnlDYWNoZSksXG4gICAgICAgIG51bGwgPT09IHJldHJ5Q2FjaGUgJiZcbiAgICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5fcmV0cnlDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtTZXQoKSksXG4gICAgICAgIHJldHJ5Q2FjaGVcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM1LCBmaW5pc2hlZFdvcmsudGFnKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCB3YWtlYWJsZXMpIHtcbiAgdmFyIHJldHJ5Q2FjaGUgPSBnZXRSZXRyeUNhY2hlKGZpbmlzaGVkV29yayk7XG4gIHdha2VhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh3YWtlYWJsZSkge1xuICAgIHZhciByZXRyeSA9IHJlc29sdmVSZXRyeVdha2VhYmxlLmJpbmQobnVsbCwgZmluaXNoZWRXb3JrLCB3YWtlYWJsZSk7XG4gICAgcmV0cnlDYWNoZS5oYXMod2FrZWFibGUpIHx8XG4gICAgICAocmV0cnlDYWNoZS5hZGQod2FrZWFibGUpLCB3YWtlYWJsZS50aGVuKHJldHJ5LCByZXRyeSkpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCRqc2NvbXAkMCwgcGFyZW50RmliZXIpIHtcbiAgdmFyIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyLmRlbGV0aW9ucztcbiAgaWYgKG51bGwgIT09IGRlbGV0aW9ucylcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV0sXG4gICAgICAgIHJvb3QgPSByb290JGpzY29tcCQwLFxuICAgICAgICByZXR1cm5GaWJlciA9IHBhcmVudEZpYmVyLFxuICAgICAgICBwYXJlbnQgPSByZXR1cm5GaWJlcjtcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBwYXJlbnQ7ICkge1xuICAgICAgICBzd2l0Y2ggKHBhcmVudC50YWcpIHtcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICEwO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgPT09IGhvc3RQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYwKSk7XG4gICAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKHJvb3QsIHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG4gICAgICByb290ID0gY2hpbGRUb0RlbGV0ZS5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSByb290ICYmIChyb290LnJldHVybiA9IG51bGwpO1xuICAgICAgY2hpbGRUb0RlbGV0ZS5yZXR1cm4gPSBudWxsO1xuICAgIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEzODc4KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIocGFyZW50RmliZXIsIHJvb3QkanNjb21wJDApLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbnZhciBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IG51bGw7XG5mdW5jdGlvbiBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCkge1xuICB2YXIgY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIChjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoMywgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCgzLCBmaW5pc2hlZFdvcmspLFxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoNSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgZmxhZ3MgJiA2NCAmJlxuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gJiZcbiAgICAgICAgKChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUpLFxuICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsgJiZcbiAgICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLmNhbGxiYWNrcyksXG4gICAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICgoY3VycmVudCA9IGZpbmlzaGVkV29yay5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzKSxcbiAgICAgICAgICAgIChmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9XG4gICAgICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgPyBmbGFncyA6IGN1cnJlbnQuY29uY2F0KGZsYWdzKSkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2OlxuICAgICAgdmFyIGhvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgICAgIHZhciBjdXJyZW50UmVzb3VyY2UgPSBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpXG4gICAgICAgICAgaWYgKG51bGwgPT09IGZsYWdzKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpIHtcbiAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLnR5cGU7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgICAgICAgICAgICBiOiBzd2l0Y2ggKGZsYWdzKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID1cbiAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGl0bGVcIilbMF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAhY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSB8fFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5uYW1lc3BhY2VVUkkgfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIilcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFwiaGVhZCA+IHRpdGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGZsYWdzID0gY3VycmVudFJlc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlTm9kZXMgPSBnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUoXG4gICAgICAgICAgICAgICAgICAgICAgXCJsaW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJocmVmXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmhyZWYgfHwgXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5YmVOb2RlcylcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHJlZiA/IG51bGwgOiBjdXJyZW50LmhyZWYpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcInJlbFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucmVsID8gbnVsbCA6IGN1cnJlbnQucmVsKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQudGl0bGUgPyBudWxsIDogY3VycmVudC50aXRsZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNyb3NzT3JpZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY3Jvc3NPcmlnaW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIChtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgICApLmdldChmbGFncyArIChjdXJyZW50LmNvbnRlbnQgfHwgXCJcIikpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1heWJlTm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0gbWF5YmVOb2Rlc1tpXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCIgKyBjdXJyZW50LmNvbnRlbnQpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lm5hbWUgPyBudWxsIDogY3VycmVudC5uYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJwcm9wZXJ0eVwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQucHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudC5wcm9wZXJ0eSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHR0cC1lcXVpdlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuaHR0cEVxdWl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuaHR0cEVxdWl2KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJjaGFyc2V0XCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jaGFyU2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQuY2hhclNldCkpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5YmVOb2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9IGhvaXN0YWJsZVJvb3QuY3JlYXRlRWxlbWVudChmbGFncyk7XG4gICAgICAgICAgICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnRSZXNvdXJjZSwgZmxhZ3MsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuYXBwZW5kQ2hpbGQoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2OCwgZmxhZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlW2ludGVybmFsSW5zdGFuY2VLZXldID0gZmluaXNoZWRXb3JrO1xuICAgICAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoY3VycmVudFJlc291cmNlKTtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID0gZmxhZ3M7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgY3VycmVudFJlc291cmNlICE9PSBmbGFnc1xuICAgICAgICAgICAgPyAobnVsbCA9PT0gY3VycmVudFJlc291cmNlXG4gICAgICAgICAgICAgICAgPyBudWxsICE9PSBjdXJyZW50LnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICAgICAgKChjdXJyZW50ID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1cnJlbnQpKVxuICAgICAgICAgICAgICAgIDogY3VycmVudFJlc291cmNlLmNvdW50LS0sXG4gICAgICAgICAgICAgIG51bGwgPT09IGZsYWdzXG4gICAgICAgICAgICAgICAgPyBtb3VudEhvaXN0YWJsZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGVcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IGFjcXVpcmVSZXNvdXJjZShcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzXG4gICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiBudWxsID09PSBmbGFncyAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICYmXG4gICAgICAgICAgICAgIGNvbW1pdEhvc3RVcGRhdGUoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICAgIGlmIChmbGFncyAmIDQgJiYgbnVsbCA9PT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSkge1xuICAgICAgICBob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgY3VycmVudFJlc291cmNlID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgbm9kZSA9IGhvaXN0YWJsZVJvb3QuZmlyc3RDaGlsZDsgbm9kZTsgKSB7XG4gICAgICAgICAgICB2YXIgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7XG4gICAgICAgICAgICBub2RlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICAgICAgICBcIkhFQURcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgXCJCT0RZXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiU0NSSVBUXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiU1RZTEVcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgKFwiTElOS1wiID09PSBub2RlTmFtZSAmJlxuICAgICAgICAgICAgICAgIFwic3R5bGVzaGVldFwiID09PSBub2RlLnJlbC50b0xvd2VyQ2FzZSgpKSB8fFxuICAgICAgICAgICAgICBob2lzdGFibGVSb290LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICAgICAgbm9kZSA9IG5leHROb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSwgYXR0cmlidXRlcyA9IGhvaXN0YWJsZVJvb3QuYXR0cmlidXRlcztcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgKVxuICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZXNbMF0pO1xuICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGhvaXN0YWJsZVJvb3QsIHR5cGUsIGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgaG9pc3RhYmxlUm9vdFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICBob2lzdGFibGVSb290W2ludGVybmFsUHJvcHNLZXldID0gY3VycmVudFJlc291cmNlO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgY2FzZSA1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIGlmIChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAzMikge1xuICAgICAgICBob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChob2lzdGFibGVSb290LCBcIlwiKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgIG51bGwgIT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAmJlxuICAgICAgICAoKGhvaXN0YWJsZVJvb3QgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyksXG4gICAgICAgIGNvbW1pdEhvc3RVcGRhdGUoXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IGhvaXN0YWJsZVJvb3RcbiAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDEwMjQgJiYgKG5lZWRzRm9ybVJlc2V0ID0gITApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KSB7XG4gICAgICAgIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYyKSk7XG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGN1cnJlbnQubm9kZVZhbHVlID0gZmxhZ3M7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHRhZ0NhY2hlcyA9IG51bGw7XG4gICAgICBob2lzdGFibGVSb290ID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGdldEhvaXN0YWJsZVJvb3Qocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdDtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNCAmJiBudWxsICE9PSBjdXJyZW50ICYmIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0cnlJZkJsb2NrZWRPbihyb290LmNvbnRhaW5lckluZm8pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICBuZWVkc0Zvcm1SZXNldCAmJlxuICAgICAgICAoKG5lZWRzRm9ybVJlc2V0ID0gITEpLCByZWN1cnNpdmVseVJlc2V0Rm9ybXMoZmluaXNoZWRXb3JrKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBmbGFncyA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KFxuICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZmxhZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmaW5pc2hlZFdvcmsuY2hpbGQuZmxhZ3MgJiA4MTkyICYmXG4gICAgICAgIChudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSkgIT09XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSAmJlxuICAgICAgICAoZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IG5vdygpKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBmbGFncykpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIG5vZGUgPSBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIG5leHROb2RlID0gbnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICBub2RlTmFtZSA9IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgIHR5cGUgPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gbm9kZU5hbWUgfHwgbm9kZTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSB0eXBlIHx8IG5leHROb2RlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHR5cGU7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBub2RlTmFtZTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgcm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICByb290Ll9jdXJyZW50ID0gZmluaXNoZWRXb3JrO1xuICAgICAgcm9vdC5fdmlzaWJpbGl0eSAmPSAtMztcbiAgICAgIHJvb3QuX3Zpc2liaWxpdHkgfD0gcm9vdC5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyO1xuICAgICAgaWYgKFxuICAgICAgICBmbGFncyAmIDgxOTIgJiZcbiAgICAgICAgKChyb290Ll92aXNpYmlsaXR5ID0gbm9kZVxuICAgICAgICAgID8gcm9vdC5fdmlzaWJpbGl0eSAmIC0yXG4gICAgICAgICAgOiByb290Ll92aXNpYmlsaXR5IHwgMSksXG4gICAgICAgIG5vZGUgJiZcbiAgICAgICAgICAoKHJvb3QgPSBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gfHwgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAgbmV4dE5vZGUgfHxcbiAgICAgICAgICAgIHJvb3QgfHxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yaykpLFxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyB8fFxuICAgICAgICAgIFwibWFudWFsXCIgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLm1vZGUpXG4gICAgICApXG4gICAgICAgIGE6IGZvciAoY3VycmVudCA9IG51bGwsIHJvb3QgPSBmaW5pc2hlZFdvcms7IDsgKSB7XG4gICAgICAgICAgaWYgKDUgPT09IHJvb3QudGFnIHx8IDI2ID09PSByb290LnRhZyB8fCAyNyA9PT0gcm9vdC50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5leHROb2RlID0gY3VycmVudCA9IHJvb3Q7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCgoaG9pc3RhYmxlUm9vdCA9IG5leHROb2RlLnN0YXRlTm9kZSksIG5vZGUpKVxuICAgICAgICAgICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IGhvaXN0YWJsZVJvb3Quc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjdXJyZW50UmVzb3VyY2Uuc2V0UHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICA/IGN1cnJlbnRSZXNvdXJjZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibm9uZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImltcG9ydGFudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgOiAoY3VycmVudFJlc291cmNlLmRpc3BsYXkgPSBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBtYXliZU5vZGVzID0gbmV4dE5vZGUuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgICAgaSA9IG5leHROb2RlLm1lbW9pemVkUHJvcHMuc3R5bGU7XG4gICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gaSAmJiBudWxsICE9PSBpICYmIGkuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgPyBpLmRpc3BsYXlcbiAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICBtYXliZU5vZGVzLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICBudWxsID09IGRpc3BsYXkgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGRpc3BsYXkpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IobmV4dE5vZGUsIG5leHROb2RlLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICg2ID09PSByb290LnRhZykge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbmV4dE5vZGUgPSByb290O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG5leHROb2RlLnN0YXRlTm9kZS5ub2RlVmFsdWUgPSBub2RlXG4gICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgIDogbmV4dE5vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihuZXh0Tm9kZSwgbmV4dE5vZGUucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgKCgyMiAhPT0gcm9vdC50YWcgJiYgMjMgIT09IHJvb3QudGFnKSB8fFxuICAgICAgICAgICAgICBudWxsID09PSByb290Lm1lbW9pemVkU3RhdGUgfHxcbiAgICAgICAgICAgICAgcm9vdCA9PT0gZmluaXNoZWRXb3JrKSAmJlxuICAgICAgICAgICAgbnVsbCAhPT0gcm9vdC5jaGlsZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcm9vdC5jaGlsZC5yZXR1cm4gPSByb290O1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QuY2hpbGQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJvb3QgPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICBmb3IgKDsgbnVsbCA9PT0gcm9vdC5zaWJsaW5nOyApIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSByb290LnJldHVybiB8fCByb290LnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSBicmVhayBhO1xuICAgICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgICAgcm9vdCA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ID09PSByb290ICYmIChjdXJyZW50ID0gbnVsbCk7XG4gICAgICAgICAgcm9vdC5zaWJsaW5nLnJldHVybiA9IHJvb3QucmV0dXJuO1xuICAgICAgICAgIHJvb3QgPSByb290LnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGN1cnJlbnQgPSBmbGFncy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICAoKGZsYWdzLnJldHJ5UXVldWUgPSBudWxsKSxcbiAgICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBjdXJyZW50KSkpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoKGZsYWdzID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmxhZ3MgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrLCBmbGFncykpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspLFxuICAgICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yaykge1xuICB2YXIgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gIGlmIChmbGFncyAmIDIpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKDI3ICE9PSBmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICBmb3IgKHZhciBwYXJlbnQgPSBmaW5pc2hlZFdvcmsucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7ICkge1xuICAgICAgICAgICAgaWYgKGlzSG9zdFBhcmVudChwYXJlbnQpKSB7XG4gICAgICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnRhZykge1xuICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICB2YXIgcGFyZW50JGpzY29tcCQwID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZSxcbiAgICAgICAgICAgICAgYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShmaW5pc2hlZFdvcmssIGJlZm9yZSwgcGFyZW50JGpzY29tcCQwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHZhciBwYXJlbnQkMTEzID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZTtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5mbGFncyAmIDMyICYmXG4gICAgICAgICAgICAgIChzZXRUZXh0Q29udGVudChwYXJlbnQkMTEzLCBcIlwiKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5mbGFncyAmPSAtMzMpKTtcbiAgICAgICAgICAgIHZhciBiZWZvcmUkMTE0ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShmaW5pc2hlZFdvcmssIGJlZm9yZSQxMTQsIHBhcmVudCQxMTMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHZhciBwYXJlbnQkMTE1ID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnN0YXRlTm9kZS5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgICBiZWZvcmUkMTE2ID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgYmVmb3JlJDExNixcbiAgICAgICAgICAgICAgcGFyZW50JDExNVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbiAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTM7XG4gIH1cbiAgZmxhZ3MgJiA0MDk2ICYmIChmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gLTQwOTcpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlSZXNldEZvcm1zKHBhcmVudEZpYmVyKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI0KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpYmVyID0gcGFyZW50RmliZXI7XG4gICAgICByZWN1cnNpdmVseVJlc2V0Rm9ybXMoZmliZXIpO1xuICAgICAgNSA9PT0gZmliZXIudGFnICYmIGZpYmVyLmZsYWdzICYgMTAyNCAmJiBmaWJlci5zdGF0ZU5vZGUucmVzZXQoKTtcbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhyb290LCBwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgODc3MilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKHJvb3QsIHBhcmVudEZpYmVyLmFsdGVybmF0ZSwgcGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIHZhciBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcjtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE0OlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDQsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQgJiZcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmsucmV0dXJuLFxuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjY6XG4gICAgICBjYXNlIDI3OlxuICAgICAgY2FzZSA1OlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgY3VycmVudCA9IHBhcmVudEZpYmVyLmFsdGVybmF0ZSxcbiAgICAgIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg0LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBjdXJyZW50LnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgZmluaXNoZWRSb290ID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpbmlzaGVkUm9vdCkge1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaGlkZGVuQ2FsbGJhY2tzID0gZmluaXNoZWRSb290LnNoYXJlZC5oaWRkZW5DYWxsYmFja3M7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gaGlkZGVuQ2FsbGJhY2tzKVxuICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzID0gbnVsbCwgZmluaXNoZWRSb290ID0gMDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QgPCBoaWRkZW5DYWxsYmFja3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCsrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBjYWxsQ2FsbGJhY2soaGlkZGVuQ2FsbGJhY2tzW2ZpbmlzaGVkUm9vdF0sIGluc3RhbmNlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgICBjb21taXRDbGFzc0NhbGxiYWNrcyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSAyNzpcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgICBjb21taXRIb3N0TW91bnQoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMjpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICAgY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgICApO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBwcmV2aW91c0NhY2hlID0gbnVsbDtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAocHJldmlvdXNDYWNoZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgIChjdXJyZW50ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ICE9PSBwcmV2aW91c0NhY2hlICYmXG4gICAgKG51bGwgIT0gY3VycmVudCAmJiBjdXJyZW50LnJlZkNvdW50KyssXG4gICAgbnVsbCAhPSBwcmV2aW91c0NhY2hlICYmIHJlbGVhc2VDYWNoZShwcmV2aW91c0NhY2hlKSk7XG59XG5mdW5jdGlvbiBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChjdXJyZW50LCBmaW5pc2hlZFdvcmspIHtcbiAgY3VycmVudCA9IG51bGw7XG4gIG51bGwgIT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gIGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlO1xuICBmaW5pc2hlZFdvcmsgIT09IGN1cnJlbnQgJiZcbiAgICAoZmluaXNoZWRXb3JrLnJlZkNvdW50KyssIG51bGwgIT0gY3VycmVudCAmJiByZWxlYXNlQ2FjaGUoY3VycmVudCkpO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gIHJvb3QsXG4gIHBhcmVudEZpYmVyLFxuICBjb21taXR0ZWRMYW5lcyxcbiAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcGFyZW50RmliZXIsXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKFxuICBmaW5pc2hlZFJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiYgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg5LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICAoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICBmaW5pc2hlZFdvcmsgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAgIChmaW5pc2hlZFdvcmsucmVmQ291bnQrKyxcbiAgICAgICAgICBudWxsICE9IGZpbmlzaGVkUm9vdCAmJiByZWxlYXNlQ2FjaGUoZmluaXNoZWRSb290KSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIGlmIChmbGFncyAmIDIwNDgpIHtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICApO1xuICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfZmluaXNoZWRXb3JrJG1lbW9pemUyID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICBpZCA9IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuaWQsXG4gICAgICAgICAgICBvblBvc3RDb21taXQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLm9uUG9zdENvbW1pdDtcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvblBvc3RDb21taXQgJiZcbiAgICAgICAgICAgIG9uUG9zdENvbW1pdChcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgPyBcIm1vdW50XCIgOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QucGFzc2l2ZUVmZmVjdER1cmF0aW9uLFxuICAgICAgICAgICAgICAtMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjM6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgX2ZpbmlzaGVkV29yayRtZW1vaXplMiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiA0XG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKVxuICAgICAgICA6IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiA0XG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5IHw9IDQpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgICAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMkanNjb21wJDAsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zJGpzY29tcCQwLFxuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4pIHtcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyA9XG4gICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJiAwICE9PSAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpO1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290JGpzY29tcCQwLFxuICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICBjb21taXR0ZWRMYW5lcyA9IGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMgPSBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCg4LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjM6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGVcbiAgICAgICAgICA/IGluc3RhbmNlLl92aXNpYmlsaXR5ICYgNFxuICAgICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChpbnN0YW5jZS5fdmlzaWJpbGl0eSB8PSA0KSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgKSk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgfVxuICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKFxuICBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gIHBhcmVudEZpYmVyXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgICAgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXIsXG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29ya1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgICAgY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgfVxuICAgICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICAgIH1cbn1cbnZhciBzdXNwZW5zZXlDb21taXRGbGFnID0gODE5MjtcbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZylcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgICAgIGZpYmVyLmZsYWdzICYgc3VzcGVuc2V5Q29tbWl0RmxhZyAmJlxuICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIHN1c3BlbmRSZXNvdXJjZShcbiAgICAgICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFN0YXRlLFxuICAgICAgICAgIGZpYmVyLm1lbW9pemVkUHJvcHNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KGZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IHByZXZpb3VzSG9pc3RhYmxlUm9vdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBudWxsID09PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICgocHJldmlvdXNIb2lzdGFibGVSb290ID0gZmliZXIuYWx0ZXJuYXRlKSxcbiAgICAgICAgbnVsbCAhPT0gcHJldmlvdXNIb2lzdGFibGVSb290ICYmXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IHN1c3BlbnNleUNvbW1pdEZsYWcpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSAxNjc3NzIxNiksXG4gICAgICAgICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpLFxuICAgICAgICAgICAgKHN1c3BlbnNleUNvbW1pdEZsYWcgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3QpKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpIHtcbiAgdmFyIHByZXZpb3VzRmliZXIgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBwcmV2aW91c0ZpYmVyICYmXG4gICAgKChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIuY2hpbGQpLCBudWxsICE9PSBwYXJlbnRGaWJlcilcbiAgKSB7XG4gICAgcHJldmlvdXNGaWJlci5jaGlsZCA9IG51bGw7XG4gICAgZG9cbiAgICAgIChwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyksXG4gICAgICAgIChwYXJlbnRGaWJlci5zaWJsaW5nID0gbnVsbCksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHByZXZpb3VzRmliZXIpO1xuICAgIHdoaWxlIChudWxsICE9PSBwYXJlbnRGaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMocGFyZW50RmliZXIpIHtcbiAgdmFyIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyLmRlbGV0aW9ucztcbiAgaWYgKDAgIT09IChwYXJlbnRGaWJlci5mbGFncyAmIDE2KSkge1xuICAgIGlmIChudWxsICE9PSBkZWxldGlvbnMpXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGRUb0RlbGV0ZSA9IGRlbGV0aW9uc1tpXTtcbiAgICAgICAgbmV4dEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gICAgICAgICAgY2hpbGRUb0RlbGV0ZSxcbiAgICAgICAgICBwYXJlbnRGaWJlclxuICAgICAgICApO1xuICAgICAgfVxuICAgIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKTtcbiAgfVxuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNTYpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudE9uRmliZXIoZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg5LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgIGluc3RhbmNlLl92aXNpYmlsaXR5ICYgNCAmJlxuICAgICAgKG51bGwgPT09IGZpbmlzaGVkV29yay5yZXR1cm4gfHwgMTMgIT09IGZpbmlzaGVkV29yay5yZXR1cm4udGFnKVxuICAgICAgICA/ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgJj0gLTUpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZmluaXNoZWRXb3JrKSlcbiAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgZGVsZXRpb25zID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChkZWxldGlvbnMudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGRlbGV0aW9ucywgZGVsZXRpb25zLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBpID0gZGVsZXRpb25zLnN0YXRlTm9kZTtcbiAgICAgICAgaS5fdmlzaWJpbGl0eSAmIDQgJiZcbiAgICAgICAgICAoKGkuX3Zpc2liaWxpdHkgJj0gLTUpLFxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhkZWxldGlvbnMpO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4oXG4gIGRlbGV0ZWRTdWJ0cmVlUm9vdCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvclxuKSB7XG4gIGZvciAoOyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDgsIGZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG51bGwgIT09IGZpYmVyLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgY2FjaGUgPSBmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sO1xuICAgICAgICAgIG51bGwgIT0gY2FjaGUgJiYgY2FjaGUucmVmQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlbGVhc2VDYWNoZShmaWJlci5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICB9XG4gICAgY2FjaGUgPSBmaWJlci5jaGlsZDtcbiAgICBpZiAobnVsbCAhPT0gY2FjaGUpIChjYWNoZS5yZXR1cm4gPSBmaWJlciksIChuZXh0RWZmZWN0ID0gY2FjaGUpO1xuICAgIGVsc2VcbiAgICAgIGE6IGZvciAoZmliZXIgPSBkZWxldGVkU3VidHJlZVJvb3Q7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICBjYWNoZSA9IG5leHRFZmZlY3Q7XG4gICAgICAgIHZhciBzaWJsaW5nID0gY2FjaGUuc2libGluZyxcbiAgICAgICAgICByZXR1cm5GaWJlciA9IGNhY2hlLnJldHVybjtcbiAgICAgICAgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoY2FjaGUpO1xuICAgICAgICBpZiAoY2FjaGUgPT09IGZpYmVyKSB7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IG51bGw7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVsbCAhPT0gc2libGluZykge1xuICAgICAgICAgIHNpYmxpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgbmV4dEVmZmVjdCA9IHNpYmxpbmc7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0RWZmZWN0ID0gcmV0dXJuRmliZXI7XG4gICAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy5zaWJsaW5nID1cbiAgICB0aGlzLmNoaWxkID1cbiAgICB0aGlzLnJldHVybiA9XG4gICAgdGhpcy5zdGF0ZU5vZGUgPVxuICAgIHRoaXMudHlwZSA9XG4gICAgdGhpcy5lbGVtZW50VHlwZSA9XG4gICAgICBudWxsO1xuICB0aGlzLmluZGV4ID0gMDtcbiAgdGhpcy5yZWZDbGVhbnVwID0gdGhpcy5yZWYgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcbiAgdGhpcy5kZXBlbmRlbmNpZXMgPVxuICAgIHRoaXMubWVtb2l6ZWRTdGF0ZSA9XG4gICAgdGhpcy51cGRhdGVRdWV1ZSA9XG4gICAgdGhpcy5tZW1vaXplZFByb3BzID1cbiAgICAgIG51bGw7XG4gIHRoaXMubW9kZSA9IG1vZGU7XG4gIHRoaXMuc3VidHJlZUZsYWdzID0gdGhpcy5mbGFncyA9IDA7XG4gIHRoaXMuZGVsZXRpb25zID0gbnVsbDtcbiAgdGhpcy5jaGlsZExhbmVzID0gdGhpcy5sYW5lcyA9IDA7XG4gIHRoaXMuYWx0ZXJuYXRlID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVySW1wbENsYXNzKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpIHtcbiAgcmV0dXJuIG5ldyBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG59XG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIENvbXBvbmVudCA9IENvbXBvbmVudC5wcm90b3R5cGU7XG4gIHJldHVybiAhKCFDb21wb25lbnQgfHwgIUNvbXBvbmVudC5pc1JlYWN0Q29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIHBlbmRpbmdQcm9wcykge1xuICB2YXIgd29ya0luUHJvZ3Jlc3MgPSBjdXJyZW50LmFsdGVybmF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICAgICAgY3VycmVudC50YWcsXG4gICAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgICAgY3VycmVudC5rZXksXG4gICAgICAgIGN1cnJlbnQubW9kZVxuICAgICAgKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPSBjdXJyZW50LmVsZW1lbnRUeXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50LnN0YXRlTm9kZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gY3VycmVudCksXG4gICAgICAoY3VycmVudC5hbHRlcm5hdGUgPSB3b3JrSW5Qcm9ncmVzcykpXG4gICAgOiAoKHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBudWxsKSk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzID0gY3VycmVudC5mbGFncyAmIDMxNDU3MjgwO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICBwZW5kaW5nUHJvcHMgPSBjdXJyZW50LmRlcGVuZGVuY2llcztcbiAgd29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICBudWxsID09PSBwZW5kaW5nUHJvcHNcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IGxhbmVzOiBwZW5kaW5nUHJvcHMubGFuZXMsIGZpcnN0Q29udGV4dDogcGVuZGluZ1Byb3BzLmZpcnN0Q29udGV4dCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nID0gY3VycmVudC5zaWJsaW5nO1xuICB3b3JrSW5Qcm9ncmVzcy5pbmRleCA9IGN1cnJlbnQuaW5kZXg7XG4gIHdvcmtJblByb2dyZXNzLnJlZiA9IGN1cnJlbnQucmVmO1xuICB3b3JrSW5Qcm9ncmVzcy5yZWZDbGVhbnVwID0gY3VycmVudC5yZWZDbGVhbnVwO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiByZXNldFdvcmtJblByb2dyZXNzKHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAzMTQ1NzI4MjtcbiAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gIG51bGwgPT09IGN1cnJlbnRcbiAgICA/ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gcmVuZGVyTGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG51bGwpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gY3VycmVudC50eXBlKSxcbiAgICAgIChyZW5kZXJMYW5lcyA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPVxuICAgICAgICBudWxsID09PSByZW5kZXJMYW5lc1xuICAgICAgICAgID8gbnVsbFxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBsYW5lczogcmVuZGVyTGFuZXMubGFuZXMsXG4gICAgICAgICAgICAgIGZpcnN0Q29udGV4dDogcmVuZGVyTGFuZXMuZmlyc3RDb250ZXh0XG4gICAgICAgICAgICB9KSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgdHlwZSxcbiAga2V5LFxuICBwZW5kaW5nUHJvcHMsXG4gIG93bmVyLFxuICBtb2RlLFxuICBsYW5lc1xuKSB7XG4gIHZhciBmaWJlclRhZyA9IDA7XG4gIG93bmVyID0gdHlwZTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUpIHNob3VsZENvbnN0cnVjdCh0eXBlKSAmJiAoZmliZXJUYWcgPSAxKTtcbiAgZWxzZSBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgZmliZXJUYWcgPSBpc0hvc3RIb2lzdGFibGVUeXBlKFxuICAgICAgdHlwZSxcbiAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgIGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50XG4gICAgKVxuICAgICAgPyAyNlxuICAgICAgOiBcImh0bWxcIiA9PT0gdHlwZSB8fCBcImhlYWRcIiA9PT0gdHlwZSB8fCBcImJvZHlcIiA9PT0gdHlwZVxuICAgICAgICA/IDI3XG4gICAgICAgIDogNTtcbiAgZWxzZVxuICAgIGE6IHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQocGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBtb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgZmliZXJUYWcgPSA4O1xuICAgICAgICBtb2RlIHw9IDI0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSB8IDIpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEzLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxOSwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9PRkZTQ1JFRU5fVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB0eXBlICYmIG51bGwgIT09IHR5cGUpXG4gICAgICAgICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSA5O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDExO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxNjtcbiAgICAgICAgICAgICAgb3duZXIgPSBudWxsO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXJUYWcgPSAyOTtcbiAgICAgICAgcGVuZGluZ1Byb3BzID0gRXJyb3IoXG4gICAgICAgICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzAsIG51bGwgPT09IHR5cGUgPyBcIm51bGxcIiA6IHR5cGVvZiB0eXBlLCBcIlwiKVxuICAgICAgICApO1xuICAgICAgICBvd25lciA9IG51bGw7XG4gICAgfVxuICBrZXkgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhmaWJlclRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xuICBrZXkuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBrZXkudHlwZSA9IG93bmVyO1xuICBrZXkubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGVsZW1lbnRzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIGVsZW1lbnRzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNywgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGVsZW1lbnRzLmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBlbGVtZW50cztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpIHtcbiAgcGVuZGluZ1Byb3BzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjIsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAgcGVuZGluZ1Byb3BzLmVsZW1lbnRUeXBlID0gUkVBQ1RfT0ZGU0NSRUVOX1RZUEU7XG4gIHBlbmRpbmdQcm9wcy5sYW5lcyA9IGxhbmVzO1xuICB2YXIgcHJpbWFyeUNoaWxkSW5zdGFuY2UgPSB7XG4gICAgX3Zpc2liaWxpdHk6IDEsXG4gICAgX3BlbmRpbmdWaXNpYmlsaXR5OiAxLFxuICAgIF9wZW5kaW5nTWFya2VyczogbnVsbCxcbiAgICBfcmV0cnlDYWNoZTogbnVsbCxcbiAgICBfdHJhbnNpdGlvbnM6IG51bGwsXG4gICAgX2N1cnJlbnQ6IG51bGwsXG4gICAgZGV0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZmliZXIgPSBwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fY3VycmVudDtcbiAgICAgIGlmIChudWxsID09PSBmaWJlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTYpKTtcbiAgICAgIGlmICgwID09PSAocHJpbWFyeUNoaWxkSW5zdGFuY2UuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMikpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICAgICAgICBudWxsICE9PSByb290ICYmXG4gICAgICAgICAgKChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgfD0gMiksXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCAyKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhdHRhY2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBmaWJlciA9IHByaW1hcnlDaGlsZEluc3RhbmNlLl9jdXJyZW50O1xuICAgICAgaWYgKG51bGwgPT09IGZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1NikpO1xuICAgICAgaWYgKDAgIT09IChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgJiAyKSkge1xuICAgICAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgMik7XG4gICAgICAgIG51bGwgIT09IHJvb3QgJiZcbiAgICAgICAgICAoKHByaW1hcnlDaGlsZEluc3RhbmNlLl9wZW5kaW5nVmlzaWJpbGl0eSAmPSAtMyksXG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCAyKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwZW5kaW5nUHJvcHMuc3RhdGVOb2RlID0gcHJpbWFyeUNoaWxkSW5zdGFuY2U7XG4gIHJldHVybiBwZW5kaW5nUHJvcHM7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UZXh0KGNvbnRlbnQsIG1vZGUsIGxhbmVzKSB7XG4gIGNvbnRlbnQgPSBjcmVhdGVGaWJlckltcGxDbGFzcyg2LCBjb250ZW50LCBudWxsLCBtb2RlKTtcbiAgY29udGVudC5sYW5lcyA9IGxhbmVzO1xuICByZXR1cm4gY29udGVudDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIG1vZGUsIGxhbmVzKSB7XG4gIG1vZGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhcbiAgICA0LFxuICAgIG51bGwgIT09IHBvcnRhbC5jaGlsZHJlbiA/IHBvcnRhbC5jaGlsZHJlbiA6IFtdLFxuICAgIHBvcnRhbC5rZXksXG4gICAgbW9kZVxuICApO1xuICBtb2RlLmxhbmVzID0gbGFuZXM7XG4gIG1vZGUuc3RhdGVOb2RlID0ge1xuICAgIGNvbnRhaW5lckluZm86IHBvcnRhbC5jb250YWluZXJJbmZvLFxuICAgIHBlbmRpbmdDaGlsZHJlbjogbnVsbCxcbiAgICBpbXBsZW1lbnRhdGlvbjogcG9ydGFsLmltcGxlbWVudGF0aW9uXG4gIH07XG4gIHJldHVybiBtb2RlO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0O1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlQW5kU3VzcGVuZElmTmVlZGVkKHdvcmtJblByb2dyZXNzLCByZXNvdXJjZSkge1xuICBpZiAoXCJzdHlsZXNoZWV0XCIgIT09IHJlc291cmNlLnR5cGUgfHwgMCAhPT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSlcbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMTY3NzcyMTc7XG4gIGVsc2UgaWYgKCgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTY3NzcyMTYpLCAhcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSkpIHtcbiAgICByZXNvdXJjZSA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gcmVzb3VyY2UgJiZcbiAgICAgICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA0MTk0MTc2KSA9PT1cbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICAgID8gbnVsbCAhPT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MjkxNDU2MCkgIT09XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSkgfHxcbiAgICAgICAgICByZXNvdXJjZSAhPT0gc2hlbGxCb3VuZGFyeSlcbiAgICApXG4gICAgICB0aHJvdyAoXG4gICAgICAgICgoc3VzcGVuZGVkVGhlbmFibGUgPSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUpLFxuICAgICAgICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24pXG4gICAgICApO1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTI7XG4gIH1cbn1cbmZ1bmN0aW9uIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHJldHJ5UXVldWUpIHtcbiAgbnVsbCAhPT0gcmV0cnlRdWV1ZSAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTYzODQgJiZcbiAgICAoKHJldHJ5UXVldWUgPVxuICAgICAgMjIgIT09IHdvcmtJblByb2dyZXNzLnRhZyA/IGNsYWltTmV4dFJldHJ5TGFuZSgpIDogNTM2ODcwOTEyKSxcbiAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgfD0gcmV0cnlRdWV1ZSksXG4gICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyB8PSByZXRyeVF1ZXVlKSk7XG59XG5mdW5jdGlvbiBjdXRPZmZUYWlsSWZOZWVkZWQocmVuZGVyU3RhdGUsIGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjaykge1xuICBpZiAoIWlzSHlkcmF0aW5nKVxuICAgIHN3aXRjaCAocmVuZGVyU3RhdGUudGFpbE1vZGUpIHtcbiAgICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgICAgaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlID0gbnVsbDsgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrOyApXG4gICAgICAgICAgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayksXG4gICAgICAgICAgICAoaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLnNpYmxpbmcpO1xuICAgICAgICBudWxsID09PSBsYXN0VGFpbE5vZGVcbiAgICAgICAgICA/IChyZW5kZXJTdGF0ZS50YWlsID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUuc2libGluZyA9IG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjb2xsYXBzZWRcIjpcbiAgICAgICAgbGFzdFRhaWxOb2RlID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlJDEzMSA9IG51bGw7IG51bGwgIT09IGxhc3RUYWlsTm9kZTsgKVxuICAgICAgICAgIG51bGwgIT09IGxhc3RUYWlsTm9kZS5hbHRlcm5hdGUgJiYgKGxhc3RUYWlsTm9kZSQxMzEgPSBsYXN0VGFpbE5vZGUpLFxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGxhc3RUYWlsTm9kZS5zaWJsaW5nKTtcbiAgICAgICAgbnVsbCA9PT0gbGFzdFRhaWxOb2RlJDEzMVxuICAgICAgICAgID8gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrIHx8IG51bGwgPT09IHJlbmRlclN0YXRlLnRhaWxcbiAgICAgICAgICAgID8gKHJlbmRlclN0YXRlLnRhaWwgPSBudWxsKVxuICAgICAgICAgICAgOiAocmVuZGVyU3RhdGUudGFpbC5zaWJsaW5nID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUkMTMxLnNpYmxpbmcgPSBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBidWJibGVQcm9wZXJ0aWVzKGNvbXBsZXRlZFdvcmspIHtcbiAgdmFyIGRpZEJhaWxvdXQgPVxuICAgICAgbnVsbCAhPT0gY29tcGxldGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAgIGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlLmNoaWxkID09PSBjb21wbGV0ZWRXb3JrLmNoaWxkLFxuICAgIG5ld0NoaWxkTGFuZXMgPSAwLFxuICAgIHN1YnRyZWVGbGFncyA9IDA7XG4gIGlmIChkaWRCYWlsb3V0KVxuICAgIGZvciAodmFyIGNoaWxkJDEzMiA9IGNvbXBsZXRlZFdvcmsuY2hpbGQ7IG51bGwgIT09IGNoaWxkJDEzMjsgKVxuICAgICAgKG5ld0NoaWxkTGFuZXMgfD0gY2hpbGQkMTMyLmxhbmVzIHwgY2hpbGQkMTMyLmNoaWxkTGFuZXMpLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDEzMi5zdWJ0cmVlRmxhZ3MgJiAzMTQ1NzI4MCksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTMyLmZsYWdzICYgMzE0NTcyODApLFxuICAgICAgICAoY2hpbGQkMTMyLnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTMyID0gY2hpbGQkMTMyLnNpYmxpbmcpO1xuICBlbHNlXG4gICAgZm9yIChjaGlsZCQxMzIgPSBjb21wbGV0ZWRXb3JrLmNoaWxkOyBudWxsICE9PSBjaGlsZCQxMzI7IClcbiAgICAgIChuZXdDaGlsZExhbmVzIHw9IGNoaWxkJDEzMi5sYW5lcyB8IGNoaWxkJDEzMi5jaGlsZExhbmVzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuc3VidHJlZUZsYWdzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuZmxhZ3MpLFxuICAgICAgICAoY2hpbGQkMTMyLnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTMyID0gY2hpbGQkMTMyLnNpYmxpbmcpO1xuICBjb21wbGV0ZWRXb3JrLnN1YnRyZWVGbGFncyB8PSBzdWJ0cmVlRmxhZ3M7XG4gIGNvbXBsZXRlZFdvcmsuY2hpbGRMYW5lcyA9IG5ld0NoaWxkTGFuZXM7XG4gIHJldHVybiBkaWRCYWlsb3V0O1xufVxuZnVuY3Rpb24gY29tcGxldGVXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE2OlxuICAgIGNhc2UgMTU6XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSA3OlxuICAgIGNhc2UgODpcbiAgICBjYXNlIDEyOlxuICAgIGNhc2UgOTpcbiAgICBjYXNlIDE0OlxuICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDM6XG4gICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgIG5ld1Byb3BzID0gbnVsbDtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgKG5ld1Byb3BzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGUgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCk7XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKCk7XG4gICAgICByZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCAmJlxuICAgICAgICAoKHJlbmRlckxhbmVzLmNvbnRleHQgPSByZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCksXG4gICAgICAgIChyZW5kZXJMYW5lcy5wZW5kaW5nQ29udGV4dCA9IG51bGwpKTtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgPT09IGN1cnJlbnQuY2hpbGQpXG4gICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgID8gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICAgIChjdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkICYmXG4gICAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NikpIHx8XG4gICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEwMjQpLFxuICAgICAgICAgICAgbnVsbCAhPT0gaHlkcmF0aW9uRXJyb3JzICYmXG4gICAgICAgICAgICAgIChxdWV1ZVJlY292ZXJhYmxlRXJyb3JzKGh5ZHJhdGlvbkVycm9ycyksXG4gICAgICAgICAgICAgIChoeWRyYXRpb25FcnJvcnMgPSBudWxsKSkpO1xuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDI2OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSkpXG4gICAgICAgICAgOiByZW5kZXJMYW5lc1xuICAgICAgICAgICAgPyByZW5kZXJMYW5lcyAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgICAgID8gKG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgICA6IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3KSksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNzpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgID8gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudClcbiAgICAgICAgICA6ICgoY3VycmVudCA9IHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBuZXdQcm9wcywgcmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpKTtcbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA1OlxuICAgICAgcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFuZXdQcm9wcykge1xuICAgICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2NikpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICAgICAgaWYgKHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKSlcbiAgICAgICAgICBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKHdvcmtJblByb2dyZXNzLCBjdXJyZW50KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdHlwZSA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihcbiAgICAgICAgICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIHN3aXRjaCAoY3VycmVudCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzd2l0Y2ggKHJlbmRlckxhbmVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaW5uZXJIVE1MID0gXCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIjtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnJlbW92ZUNoaWxkKGN1cnJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwgeyBpczogbmV3UHJvcHMuaXMgfSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHR5cGUuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgICAgICAgICAgICAgIG5ld1Byb3BzLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgID8gKGN1cnJlbnQubXVsdGlwbGUgPSAhMClcbiAgICAgICAgICAgICAgICAgICAgOiBuZXdQcm9wcy5zaXplICYmIChjdXJyZW50LnNpemUgPSBuZXdQcm9wcy5zaXplKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld1Byb3BzLmlzXG4gICAgICAgICAgICAgICAgICAgICAgPyB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsUHJvcHNLZXldID0gbmV3UHJvcHM7XG4gICAgICAgICAgYTogZm9yICh0eXBlID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IHR5cGU7ICkge1xuICAgICAgICAgICAgaWYgKDUgPT09IHR5cGUudGFnIHx8IDYgPT09IHR5cGUudGFnKVxuICAgICAgICAgICAgICBjdXJyZW50LmFwcGVuZENoaWxkKHR5cGUuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKDQgIT09IHR5cGUudGFnICYmIDI3ICE9PSB0eXBlLnRhZyAmJiBudWxsICE9PSB0eXBlLmNoaWxkKSB7XG4gICAgICAgICAgICAgIHR5cGUuY2hpbGQucmV0dXJuID0gdHlwZTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUuY2hpbGQ7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IHdvcmtJblByb2dyZXNzKSBicmVhayBhO1xuICAgICAgICAgICAgZm9yICg7IG51bGwgPT09IHR5cGUuc2libGluZzsgKSB7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB0eXBlLnJldHVybiB8fCB0eXBlLnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgdHlwZSA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHlwZS5zaWJsaW5nLnJldHVybiA9IHR5cGUucmV0dXJuO1xuICAgICAgICAgICAgdHlwZSA9IHR5cGUuc2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudDtcbiAgICAgICAgICBhOiBzd2l0Y2ggKFxuICAgICAgICAgICAgKHNldEluaXRpYWxQcm9wZXJ0aWVzKGN1cnJlbnQsIHJlbmRlckxhbmVzLCBuZXdQcm9wcyksIHJlbmRlckxhbmVzKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEhbmV3UHJvcHMuYXV0b0ZvY3VzO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjdXJyZW50ID0gITE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnQgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3O1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA2OlxuICAgICAgaWYgKGN1cnJlbnQgJiYgbnVsbCAhPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gbmV3UHJvcHMgJiYgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBuZXdQcm9wcyAmJiBudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgY3VycmVudCA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpIHtcbiAgICAgICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICBuZXdQcm9wcyA9IG51bGw7XG4gICAgICAgICAgdHlwZSA9IGh5ZHJhdGlvblBhcmVudEZpYmVyO1xuICAgICAgICAgIGlmIChudWxsICE9PSB0eXBlKVxuICAgICAgICAgICAgc3dpdGNoICh0eXBlLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgbmV3UHJvcHMgPSB0eXBlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgICAgY3VycmVudC5ub2RlVmFsdWUgPT09IHJlbmRlckxhbmVzIHx8XG4gICAgICAgICAgICAobnVsbCAhPT0gbmV3UHJvcHMgJiYgITAgPT09IG5ld1Byb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZykgfHxcbiAgICAgICAgICAgIGNoZWNrRm9yVW5tYXRjaGVkVGV4dChjdXJyZW50Lm5vZGVWYWx1ZSwgcmVuZGVyTGFuZXMpXG4gICAgICAgICAgICAgID8gITBcbiAgICAgICAgICAgICAgOiAhMTtcbiAgICAgICAgICBjdXJyZW50IHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIChjdXJyZW50ID1cbiAgICAgICAgICAgIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihjdXJyZW50KS5jcmVhdGVUZXh0Tm9kZShcbiAgICAgICAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKVxuICAgICAgKSB7XG4gICAgICAgIHR5cGUgPSBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGlmIChudWxsICE9PSBuZXdQcm9wcyAmJiBudWxsICE9PSBuZXdQcm9wcy5kZWh5ZHJhdGVkKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTgpKTtcbiAgICAgICAgICAgIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgdHlwZSA9IG51bGwgIT09IHR5cGUgPyB0eXBlLmRlaHlkcmF0ZWQgOiBudWxsO1xuICAgICAgICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgICAgICAgICAgdHlwZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpLFxuICAgICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpO1xuICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHR5cGUgPSAhMTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgbnVsbCAhPT0gaHlkcmF0aW9uRXJyb3JzICYmXG4gICAgICAgICAgICAocXVldWVSZWNvdmVyYWJsZUVycm9ycyhoeWRyYXRpb25FcnJvcnMpLCAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCkpLFxuICAgICAgICAgICAgKHR5cGUgPSAhMCk7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICAgIHJldHVybiBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLCB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkpXG4gICAgICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSByZW5kZXJMYW5lcyksIHdvcmtJblByb2dyZXNzO1xuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsICE9PSBuZXdQcm9wcztcbiAgICAgIGN1cnJlbnQgPSBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChyZW5kZXJMYW5lcykge1xuICAgICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB0eXBlID0gbnVsbDtcbiAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAodHlwZSA9IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgdmFyIGNhY2hlJDE0NCA9IG51bGw7XG4gICAgICAgIG51bGwgIT09IG5ld1Byb3BzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChjYWNoZSQxNDQgPSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgY2FjaGUkMTQ0ICE9PSB0eXBlICYmIChuZXdQcm9wcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIH1cbiAgICAgIHJlbmRlckxhbmVzICE9PSBjdXJyZW50ICYmXG4gICAgICAgIHJlbmRlckxhbmVzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZC5mbGFncyB8PSA4MTkyKTtcbiAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MudHlwZSksIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG4gICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsID09PSB0eXBlKSByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgICBuZXdQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gICAgICBjYWNoZSQxNDQgPSB0eXBlLnJlbmRlcmluZztcbiAgICAgIGlmIChudWxsID09PSBjYWNoZSQxNDQpXG4gICAgICAgIGlmIChuZXdQcm9wcykgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGZvciAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSBjdXJyZW50OyApIHtcbiAgICAgICAgICAgICAgY2FjaGUkMTQ0ID0gZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY2FjaGUkMTQ0KSB7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNhY2hlJDE0NC51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICAgICAgZm9yIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSByZW5kZXJMYW5lczsgKVxuICAgICAgICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHB1c2goXG4gICAgICAgICAgICAgICAgICBzdXNwZW5zZVN0YWNrQ3Vyc29yLFxuICAgICAgICAgICAgICAgICAgKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpIHwgMlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gdHlwZS50YWlsICYmXG4gICAgICAgICAgICBub3coKSA+IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgJiZcbiAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA0MTk0MzA0KSk7XG4gICAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKVxuICAgICAgICAgIGlmICgoKGN1cnJlbnQgPSBmaW5kRmlyc3RTdXNwZW5kZWQoY2FjaGUkMTQ0KSksIG51bGwgIT09IGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMCksXG4gICAgICAgICAgICAgIG51bGwgPT09IHR5cGUudGFpbCAmJlxuICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgPT09IHR5cGUudGFpbE1vZGUgJiZcbiAgICAgICAgICAgICAgICAhY2FjaGUkMTQ0LmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgICFpc0h5ZHJhdGluZylcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgMiAqIG5vdygpIC0gdHlwZS5yZW5kZXJpbmdTdGFydFRpbWUgPlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lICYmXG4gICAgICAgICAgICAgIDUzNjg3MDkxMiAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDQxOTQzMDQpKTtcbiAgICAgICAgdHlwZS5pc0JhY2t3YXJkc1xuICAgICAgICAgID8gKChjYWNoZSQxNDQuc2libGluZyA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNhY2hlJDE0NCkpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSB0eXBlLmxhc3QpLFxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgICAgICA/IChjdXJyZW50LnNpYmxpbmcgPSBjYWNoZSQxNDQpXG4gICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2FjaGUkMTQ0KSxcbiAgICAgICAgICAgICh0eXBlLmxhc3QgPSBjYWNoZSQxNDQpKTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsICE9PSB0eXBlLnRhaWwpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdHlwZS50YWlsKSxcbiAgICAgICAgICAodHlwZS5yZW5kZXJpbmcgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHR5cGUudGFpbCA9IHdvcmtJblByb2dyZXNzLnNpYmxpbmcpLFxuICAgICAgICAgICh0eXBlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IG5vdygpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc2libGluZyA9IG51bGwpLFxuICAgICAgICAgIChjdXJyZW50ID0gc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgICAgICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5ld1Byb3BzID8gKGN1cnJlbnQgJiAxKSB8IDIgOiBjdXJyZW50ICYgMSksXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgcG9wSGlkZGVuQ29udGV4dCgpLFxuICAgICAgICAobmV3UHJvcHMgPSBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MilcbiAgICAgICAgICA6IG5ld1Byb3BzICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICA/IDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikgJiZcbiAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyAmIDYgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpKVxuICAgICAgICAgIDogYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKSxcbiAgICAgICAgKG5ld1Byb3BzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpLFxuICAgICAgICBuZXdQcm9wcyAhPT0gcmVuZGVyTGFuZXMgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmIHBvcChyZXN1bWVkQ2FjaGUpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocmVuZGVyTGFuZXMgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiAocmVuZGVyTGFuZXMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSByZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KSxcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTU2LCB3b3JrSW5Qcm9ncmVzcy50YWcpKTtcbn1cbmZ1bmN0aW9uIHVud2luZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgMCAhPT0gKGN1cnJlbnQgJiA2NTUzNikgJiYgMCA9PT0gKGN1cnJlbnQgJiAxMjgpXG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50LmRlaHlkcmF0ZWQpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MCkpO1xuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3M7XG4gICAgICByZXR1cm4gY3VycmVudCAmIDY1NTM2XG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICA6IG51bGw7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvciksIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250YWluZXIoKSwgbnVsbDtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLnR5cGUpLCBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHBvcEhpZGRlbkNvbnRleHQoKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksIG51bGw7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gdW53aW5kSW50ZXJydXB0ZWRXb3JrKGN1cnJlbnQsIGludGVycnVwdGVkV29yaykge1xuICBwb3BUcmVlQ29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICBzd2l0Y2ggKGludGVycnVwdGVkV29yay50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHBvcFByb3ZpZGVyKGludGVycnVwdGVkV29yay50eXBlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgcG9wSGlkZGVuQ29udGV4dCgpO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICB9XG59XG52YXIgRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciA9IHtcbiAgICBnZXRDYWNoZUZvclR5cGU6IGZ1bmN0aW9uIChyZXNvdXJjZVR5cGUpIHtcbiAgICAgIHZhciBjYWNoZSA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCksXG4gICAgICAgIGNhY2hlRm9yVHlwZSA9IGNhY2hlLmRhdGEuZ2V0KHJlc291cmNlVHlwZSk7XG4gICAgICB2b2lkIDAgPT09IGNhY2hlRm9yVHlwZSAmJlxuICAgICAgICAoKGNhY2hlRm9yVHlwZSA9IHJlc291cmNlVHlwZSgpKSxcbiAgICAgICAgY2FjaGUuZGF0YS5zZXQocmVzb3VyY2VUeXBlLCBjYWNoZUZvclR5cGUpKTtcbiAgICAgIHJldHVybiBjYWNoZUZvclR5cGU7XG4gICAgfVxuICB9LFxuICBQb3NzaWJseVdlYWtNYXAgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBXZWFrTWFwID8gV2Vha01hcCA6IE1hcCxcbiAgZXhlY3V0aW9uQ29udGV4dCA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDAsXG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyID0gITEsXG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMSxcbiAgZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBJbmZpbml0eSxcbiAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwsXG4gIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbCxcbiAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSAhMSxcbiAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsLFxuICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyA9IDAsXG4gIHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gMCxcbiAgcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IG51bGwsXG4gIG5lc3RlZFVwZGF0ZUNvdW50ID0gMCxcbiAgcm9vdFdpdGhOZXN0ZWRVcGRhdGVzID0gbnVsbDtcbmZ1bmN0aW9uIHJlcXVlc3RVcGRhdGVMYW5lKCkge1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJiAwICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcylcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiAtd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIGlmIChudWxsICE9PSBSZWFjdFNoYXJlZEludGVybmFscy5UKSB7XG4gICAgdmFyIGFjdGlvblNjb3BlTGFuZSA9IGN1cnJlbnRFbnRhbmdsZWRMYW5lO1xuICAgIHJldHVybiAwICE9PSBhY3Rpb25TY29wZUxhbmUgPyBhY3Rpb25TY29wZUxhbmUgOiByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCk7XG59XG5mdW5jdGlvbiByZXF1ZXN0RGVmZXJyZWRMYW5lKCkge1xuICAwID09PSB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSAmJlxuICAgICh3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9XG4gICAgICAwID09PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpIHx8IGlzSHlkcmF0aW5nXG4gICAgICAgID8gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKVxuICAgICAgICA6IDUzNjg3MDkxMik7XG4gIHZhciBzdXNwZW5zZUhhbmRsZXIgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICBudWxsICE9PSBzdXNwZW5zZUhhbmRsZXIgJiYgKHN1c3BlbnNlSGFuZGxlci5mbGFncyB8PSAzMik7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgbGFuZSkge1xuICBpZiAoXG4gICAgKHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikgfHxcbiAgICBudWxsICE9PSByb290LmNhbmNlbFBlbmRpbmdDb21taXRcbiAgKVxuICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApLFxuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gIG1hcmtSb290VXBkYXRlZCQxKHJvb3QsIGxhbmUpO1xuICBpZiAoMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSB8fCByb290ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpXG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgICAoMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgfD0gbGFuZSksXG4gICAgICA0ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgITFcbiAgICAgICAgKSksXG4gICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG59XG5mdW5jdGlvbiBwZXJmb3JtV29ya09uUm9vdChyb290JGpzY29tcCQwLCBsYW5lcywgZm9yY2VTeW5jKSB7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyNykpO1xuICB2YXIgc2hvdWxkVGltZVNsaWNlID1cbiAgICAgICghZm9yY2VTeW5jICYmXG4gICAgICAgIDAgPT09IChsYW5lcyAmIDYwKSAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiByb290JGpzY29tcCQwLmV4cGlyZWRMYW5lcykpIHx8XG4gICAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QkanNjb21wJDAsIGxhbmVzKSxcbiAgICBleGl0U3RhdHVzID0gc2hvdWxkVGltZVNsaWNlXG4gICAgICA/IHJlbmRlclJvb3RDb25jdXJyZW50KHJvb3QkanNjb21wJDAsIGxhbmVzKVxuICAgICAgOiByZW5kZXJSb290U3luYyhyb290JGpzY29tcCQwLCBsYW5lcywgITApLFxuICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBzaG91bGRUaW1lU2xpY2U7XG4gIGRvIHtcbiAgICBpZiAoMCA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgIXNob3VsZFRpbWVTbGljZSAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChyb290JGpzY29tcCQwLCBsYW5lcywgMCwgITEpO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmICg2ID09PSBleGl0U3RhdHVzKVxuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgIHJvb3QkanNjb21wJDAsXG4gICAgICAgIGxhbmVzLFxuICAgICAgICAwLFxuICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICApO1xuICAgIGVsc2Uge1xuICAgICAgZm9yY2VTeW5jID0gcm9vdCRqc2NvbXAkMC5jdXJyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAhaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZvcmNlU3luYylcbiAgICAgICkge1xuICAgICAgICBleGl0U3RhdHVzID0gcmVuZGVyUm9vdFN5bmMocm9vdCRqc2NvbXAkMCwgbGFuZXMsICExKTtcbiAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICgyID09PSBleGl0U3RhdHVzKSB7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBsYW5lcztcbiAgICAgICAgaWYgKHJvb3QkanNjb21wJDAuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJiByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAwO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHJvb3QkanNjb21wJDAucGVuZGluZ0xhbmVzICYgLTUzNjg3MDkxMyksXG4gICAgICAgICAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDUzNjg3MDkxMlxuICAgICAgICAgICAgICAgICAgPyA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgIDogMCk7XG4gICAgICAgIGlmICgwICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICBsYW5lcyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycztcbiAgICAgICAgICAgIHZhciB3YXNSb290RGVoeWRyYXRlZCA9IHJvb3QuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZDtcbiAgICAgICAgICAgIHdhc1Jvb3REZWh5ZHJhdGVkICYmXG4gICAgICAgICAgICAgIChwcmVwYXJlRnJlc2hTdGFjayhyb290LCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpLmZsYWdzIHw9IDI1Nik7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByZW5kZXJSb290U3luYyhcbiAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICgyICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciAmJlxuICAgICAgICAgICAgICAgICF3YXNSb290RGVoeWRyYXRlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByb290LmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzIHw9IHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgfD1cbiAgICAgICAgICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnM7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gZXhpdFN0YXR1cztcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVuZGVyV2FzQ29uY3VycmVudCAmJlxuICAgICAgICAgICAgICAgIHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMocmVuZGVyV2FzQ29uY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gITE7XG4gICAgICAgICAgaWYgKDIgIT09IGV4aXRTdGF0dXMpIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoMSA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290JGpzY29tcCQwLCAwKTtcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCRqc2NvbXAkMCwgbGFuZXMsIDAsICEwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHNob3VsZFRpbWVTbGljZSA9IHJvb3QkanNjb21wJDA7XG4gICAgICAgIHN3aXRjaCAoZXhpdFN0YXR1cykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0NSkpO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGlmICgobGFuZXMgJiA0MTk0MTc2KSA9PT0gbGFuZXMpIHtcbiAgICAgICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICAgICF3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3NcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gbnVsbDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjkpKTtcbiAgICAgICAgfVxuICAgICAgICBzaG91bGRUaW1lU2xpY2UuZmluaXNoZWRXb3JrID0gZm9yY2VTeW5jO1xuICAgICAgICBzaG91bGRUaW1lU2xpY2UuZmluaXNoZWRMYW5lcyA9IGxhbmVzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKGxhbmVzICYgNjI5MTQ1NjApID09PSBsYW5lcyAmJlxuICAgICAgICAgICgocmVuZGVyV2FzQ29uY3VycmVudCA9IGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgKyAzMDAgLSBub3coKSksXG4gICAgICAgICAgMTAgPCByZW5kZXJXYXNDb25jdXJyZW50KVxuICAgICAgICApIHtcbiAgICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoMCAhPT0gZ2V0TmV4dExhbmVzKHNob3VsZFRpbWVTbGljZSwgMCkpIGJyZWFrIGE7XG4gICAgICAgICAgc2hvdWxkVGltZVNsaWNlLnRpbWVvdXRIYW5kbGUgPSBzY2hlZHVsZVRpbWVvdXQoXG4gICAgICAgICAgICBjb21taXRSb290V2hlblJlYWR5LmJpbmQoXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgICAgZm9yY2VTeW5jLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSxcbiAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gICAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAgIC0wLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBjb21taXRSb290V2hlblJlYWR5KFxuICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICBmb3JjZVN5bmMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlLFxuICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gICAgICAgICAgMCxcbiAgICAgICAgICAtMCxcbiAgICAgICAgICAwXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrO1xuICB9IHdoaWxlICgxKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QkanNjb21wJDApO1xufVxuZnVuY3Rpb24gcXVldWVSZWNvdmVyYWJsZUVycm9ycyhlcnJvcnMpIHtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnNcbiAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGVycm9ycylcbiAgICA6IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLnB1c2guYXBwbHkoXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICBlcnJvcnNcbiAgICAgICk7XG59XG5mdW5jdGlvbiBjb21taXRSb290V2hlblJlYWR5KFxuICByb290LFxuICBmaW5pc2hlZFdvcmssXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICBsYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIHVwZGF0ZWRMYW5lcyxcbiAgc3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuKSB7XG4gIHZhciBzdWJ0cmVlRmxhZ3MgPSBmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzO1xuICBpZiAoc3VidHJlZUZsYWdzICYgODE5MiB8fCAxNjc4NTQwOCA9PT0gKHN1YnRyZWVGbGFncyAmIDE2Nzg1NDA4KSlcbiAgICBpZiAoXG4gICAgICAoKHN1c3BlbmRlZFN0YXRlID0geyBzdHlsZXNoZWV0czogbnVsbCwgY291bnQ6IDAsIHVuc3VzcGVuZDogbm9vcCB9KSxcbiAgICAgIGFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyKGZpbmlzaGVkV29yayksXG4gICAgICAoZmluaXNoZWRXb3JrID0gd2FpdEZvckNvbW1pdFRvQmVSZWFkeSgpKSxcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yaylcbiAgICApIHtcbiAgICAgIHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IGZpbmlzaGVkV29yayhcbiAgICAgICAgY29tbWl0Um9vdC5iaW5kKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcm9vdCxcbiAgICAgICAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICB0cmFuc2l0aW9ucyxcbiAgICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgICAgc3Bhd25lZExhbmUsXG4gICAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgMSxcbiAgICAgICAgICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gICAgICAgICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCwgbGFuZXMsIHNwYXduZWRMYW5lLCAhZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIGNvbW1pdFJvb3QoXG4gICAgcm9vdCxcbiAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICB0cmFuc2l0aW9ucyxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4gICk7XG59XG5mdW5jdGlvbiBpc1JlbmRlckNvbnNpc3RlbnRXaXRoRXh0ZXJuYWxTdG9yZXMoZmluaXNoZWRXb3JrKSB7XG4gIGZvciAodmFyIG5vZGUgPSBmaW5pc2hlZFdvcms7IDsgKSB7XG4gICAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICAgIGlmIChcbiAgICAgICgwID09PSB0YWcgfHwgMTEgPT09IHRhZyB8fCAxNSA9PT0gdGFnKSAmJlxuICAgICAgbm9kZS5mbGFncyAmIDE2Mzg0ICYmXG4gICAgICAoKHRhZyA9IG5vZGUudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gdGFnICYmICgodGFnID0gdGFnLnN0b3JlcyksIG51bGwgIT09IHRhZykpXG4gICAgKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrID0gdGFnW2ldLFxuICAgICAgICAgIGdldFNuYXBzaG90ID0gY2hlY2suZ2V0U25hcHNob3Q7XG4gICAgICAgIGNoZWNrID0gY2hlY2sudmFsdWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKCFvYmplY3RJcyhnZXRTbmFwc2hvdCgpLCBjaGVjaykpIHJldHVybiAhMTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB0YWcgPSBub2RlLmNoaWxkO1xuICAgIGlmIChub2RlLnN1YnRyZWVGbGFncyAmIDE2Mzg0ICYmIG51bGwgIT09IHRhZylcbiAgICAgICh0YWcucmV0dXJuID0gbm9kZSksIChub2RlID0gdGFnKTtcbiAgICBlbHNlIHtcbiAgICAgIGlmIChub2RlID09PSBmaW5pc2hlZFdvcmspIGJyZWFrO1xuICAgICAgZm9yICg7IG51bGwgPT09IG5vZGUuc2libGluZzsgKSB7XG4gICAgICAgIGlmIChudWxsID09PSBub2RlLnJldHVybiB8fCBub2RlLnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSByZXR1cm4gITA7XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIG1hcmtSb290U3VzcGVuZGVkKFxuICByb290LFxuICBzdXNwZW5kZWRMYW5lcyxcbiAgc3Bhd25lZExhbmUsXG4gIGRpZEF0dGVtcHRFbnRpcmVUcmVlXG4pIHtcbiAgc3VzcGVuZGVkTGFuZXMgJj0gfndvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzO1xuICBzdXNwZW5kZWRMYW5lcyAmPSB+d29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXM7XG4gIHJvb3Quc3VzcGVuZGVkTGFuZXMgfD0gc3VzcGVuZGVkTGFuZXM7XG4gIHJvb3QucGluZ2VkTGFuZXMgJj0gfnN1c3BlbmRlZExhbmVzO1xuICBkaWRBdHRlbXB0RW50aXJlVHJlZSAmJiAocm9vdC53YXJtTGFuZXMgfD0gc3VzcGVuZGVkTGFuZXMpO1xuICBkaWRBdHRlbXB0RW50aXJlVHJlZSA9IHJvb3QuZXhwaXJhdGlvblRpbWVzO1xuICBmb3IgKHZhciBsYW5lcyA9IHN1c3BlbmRlZExhbmVzOyAwIDwgbGFuZXM7ICkge1xuICAgIHZhciBpbmRleCQ2ID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ2O1xuICAgIGRpZEF0dGVtcHRFbnRpcmVUcmVlW2luZGV4JDZdID0gLTE7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgMCAhPT0gc3Bhd25lZExhbmUgJiZcbiAgICBtYXJrU3Bhd25lZERlZmVycmVkTGFuZShyb290LCBzcGF3bmVkTGFuZSwgc3VzcGVuZGVkTGFuZXMpO1xufVxuZnVuY3Rpb24gZmx1c2hTeW5jV29yayQxKCkge1xuICByZXR1cm4gMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KVxuICAgID8gKGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSwgITEpXG4gICAgOiAhMDtcbn1cbmZ1bmN0aW9uIHJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjaygpIHtcbiAgaWYgKG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgaWYgKDAgPT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKVxuICAgICAgdmFyIGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICBlbHNlXG4gICAgICAoaW50ZXJydXB0ZWRXb3JrID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobGFzdENvbnRleHREZXBlbmRlbmN5ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsKSxcbiAgICAgICAgcmVzZXRIb29rc09uVW53aW5kKGludGVycnVwdGVkV29yayksXG4gICAgICAgICh0aGVuYWJsZVN0YXRlJDEgPSBudWxsKSxcbiAgICAgICAgKHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKTtcbiAgICBmb3IgKDsgbnVsbCAhPT0gaW50ZXJydXB0ZWRXb3JrOyApXG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoaW50ZXJydXB0ZWRXb3JrLmFsdGVybmF0ZSwgaW50ZXJydXB0ZWRXb3JrKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IGludGVycnVwdGVkV29yay5yZXR1cm4pO1xuICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpIHtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuICByb290LmZpbmlzaGVkTGFuZXMgPSAwO1xuICB2YXIgdGltZW91dEhhbmRsZSA9IHJvb3QudGltZW91dEhhbmRsZTtcbiAgLTEgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QudGltZW91dEhhbmRsZSA9IC0xKSwgY2FuY2VsVGltZW91dCh0aW1lb3V0SGFuZGxlKSk7XG4gIHRpbWVvdXRIYW5kbGUgPSByb290LmNhbmNlbFBlbmRpbmdDb21taXQ7XG4gIG51bGwgIT09IHRpbWVvdXRIYW5kbGUgJiZcbiAgICAoKHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IG51bGwpLCB0aW1lb3V0SGFuZGxlKCkpO1xuICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gcm9vdDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0aW1lb3V0SGFuZGxlID0gY3JlYXRlV29ya0luUHJvZ3Jlc3Mocm9vdC5jdXJyZW50LCBudWxsKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzID0gITE7XG4gIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCBsYW5lcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9XG4gICAgICAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPVxuICAgIG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMTtcbiAgMCAhPT0gKGxhbmVzICYgOCkgJiYgKGxhbmVzIHw9IGxhbmVzICYgMzIpO1xuICB2YXIgYWxsRW50YW5nbGVkTGFuZXMgPSByb290LmVudGFuZ2xlZExhbmVzO1xuICBpZiAoMCAhPT0gYWxsRW50YW5nbGVkTGFuZXMpXG4gICAgZm9yIChcbiAgICAgIHJvb3QgPSByb290LmVudGFuZ2xlbWVudHMsIGFsbEVudGFuZ2xlZExhbmVzICY9IGxhbmVzO1xuICAgICAgMCA8IGFsbEVudGFuZ2xlZExhbmVzO1xuXG4gICAgKSB7XG4gICAgICB2YXIgaW5kZXgkNCA9IDMxIC0gY2x6MzIoYWxsRW50YW5nbGVkTGFuZXMpLFxuICAgICAgICBsYW5lID0gMSA8PCBpbmRleCQ0O1xuICAgICAgbGFuZXMgfD0gcm9vdFtpbmRleCQ0XTtcbiAgICAgIGFsbEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICAgIH1cbiAgZW50YW5nbGVkUmVuZGVyTGFuZXMgPSBsYW5lcztcbiAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpO1xuICByZXR1cm4gdGltZW91dEhhbmRsZTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gQ29udGV4dE9ubHlEaXNwYXRjaGVyO1xuICB0aHJvd25WYWx1ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb25cbiAgICA/ICgodGhyb3duVmFsdWUgPSBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDMpKVxuICAgIDogdGhyb3duVmFsdWUgPT09IFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvblxuICAgICAgPyAoKHRocm93blZhbHVlID0gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDQpKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPVxuICAgICAgICAgIHRocm93blZhbHVlID09PSBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb25cbiAgICAgICAgICAgID8gOFxuICAgICAgICAgICAgOiBudWxsICE9PSB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHRocm93blZhbHVlLnRoZW5cbiAgICAgICAgICAgICAgPyA2XG4gICAgICAgICAgICAgIDogMSk7XG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSB0aHJvd25WYWx1ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxKSxcbiAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgcm9vdCxcbiAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHRocm93blZhbHVlLCByb290LmN1cnJlbnQpXG4gICAgKSk7XG59XG5mdW5jdGlvbiBwdXNoRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIG51bGwgPT09IHByZXZEaXNwYXRjaGVyID8gQ29udGV4dE9ubHlEaXNwYXRjaGVyIDogcHJldkRpc3BhdGNoZXI7XG59XG5mdW5jdGlvbiBwdXNoQXN5bmNEaXNwYXRjaGVyKCkge1xuICB2YXIgcHJldkFzeW5jRGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkE7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBEZWZhdWx0QXN5bmNEaXNwYXRjaGVyO1xuICByZXR1cm4gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKSB7XG4gIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA0O1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgfHxcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNDE5NDE3NikgIT09XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCkgfHxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMCk7XG4gICgwID09PSAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzICYgMTM0MjE3NzI3KSAmJlxuICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyAmIDEzNDIxNzcyNykpIHx8XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290IHx8XG4gICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QsXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgITFcbiAgICApO1xufVxuZnVuY3Rpb24gcmVuZGVyUm9vdFN5bmMocm9vdCwgbGFuZXMsIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gMjtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gcHVzaERpc3BhdGNoZXIoKSxcbiAgICBwcmV2QXN5bmNEaXNwYXRjaGVyID0gcHVzaEFzeW5jRGlzcGF0Y2hlcigpO1xuICBpZiAod29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lcylcbiAgICAod29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwpLCBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcyk7XG4gIGxhbmVzID0gITE7XG4gIHZhciBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHZhciB1bml0T2ZXb3JrID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdGhyb3duVmFsdWUgPSB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBudWxsID09PSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50ICYmIChsYW5lcyA9ICEwKTtcbiAgICAgICAgICAgIHZhciByZWFzb24gPSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbjtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBleGl0U3RhdHVzID0gMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAocmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCB1bml0T2ZXb3JrLCB0aHJvd25WYWx1ZSwgcmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd29ya0xvb3BTeW5jKCk7XG4gICAgICBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgICAgIGJyZWFrO1xuICAgIH0gY2F0Y2ggKHRocm93blZhbHVlJDE2NCkge1xuICAgICAgaGFuZGxlVGhyb3cocm9vdCwgdGhyb3duVmFsdWUkMTY0KTtcbiAgICB9XG4gIHdoaWxlICgxKTtcbiAgbGFuZXMgJiYgcm9vdC5zaGVsbFN1c3BlbmRDb3VudGVyKys7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gcHJldkRpc3BhdGNoZXI7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBwcmV2QXN5bmNEaXNwYXRjaGVyO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgICgod29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbCksXG4gICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCksXG4gICAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpKTtcbiAgcmV0dXJuIGV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcFN5bmMoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzczsgKSBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiByZW5kZXJSb290Q29uY3VycmVudChyb290LCBsYW5lcykge1xuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IDI7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IHB1c2hEaXNwYXRjaGVyKCksXG4gICAgcHJldkFzeW5jRGlzcGF0Y2hlciA9IHB1c2hBc3luY0Rpc3BhdGNoZXIoKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lc1xuICAgID8gKCh3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSA9IG5vdygpICsgNTAwKSxcbiAgICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIGxhbmVzXG4gICAgICApKTtcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIGxhbmVzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIHZhciB0aHJvd25WYWx1ZSA9IHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWU7XG4gICAgICAgIGI6IHN3aXRjaCAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGlmIChpc1RoZW5hYmxlUmVzb2x2ZWQodGhyb3duVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsobGFuZXMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiAmJlxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdCA9PT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDcpO1xuICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhyb3duVmFsdWUudGhlbihsYW5lcywgbGFuZXMpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDc7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgaXNUaGVuYWJsZVJlc29sdmVkKHRocm93blZhbHVlKVxuICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGwpLFxuICAgICAgICAgICAgICAgIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsobGFuZXMpKVxuICAgICAgICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwKSxcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGwpLFxuICAgICAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA3KSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICByZXNvdXJjZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICB2YXIgaG9zdEZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlID8gcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSA6IDEpIHtcbiAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBob3N0RmliZXIuc2libGluZztcbiAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSBzaWJsaW5nKSB3b3JrSW5Qcm9ncmVzcyA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybkZpYmVyID0gaG9zdEZpYmVyLnJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVVuaXRPZldvcmsocmV0dXJuRmliZXIpKVxuICAgICAgICAgICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzID0gbnVsbCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKTtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA2O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd29ya0xvb3BDb25jdXJyZW50KCk7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjYpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2Nik7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IHByZXZEaXNwYXRjaGVyO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHJldHVybiAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDA7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcENvbmN1cnJlbnQoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcyAmJiAhc2hvdWxkWWllbGQoKTsgKVxuICAgIHBlcmZvcm1Vbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKTtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Vbml0T2ZXb3JrKHVuaXRPZldvcmspIHtcbiAgdmFyIG5leHQgPSBiZWdpbldvcmsodW5pdE9mV29yay5hbHRlcm5hdGUsIHVuaXRPZldvcmssIGVudGFuZ2xlZFJlbmRlckxhbmVzKTtcbiAgdW5pdE9mV29yay5tZW1vaXplZFByb3BzID0gdW5pdE9mV29yay5wZW5kaW5nUHJvcHM7XG4gIG51bGwgPT09IG5leHQgPyBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykgOiAod29ya0luUHJvZ3Jlc3MgPSBuZXh0KTtcbn1cbmZ1bmN0aW9uIHJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgbmV4dCA9IHVuaXRPZldvcms7XG4gIHZhciBjdXJyZW50ID0gbmV4dC5hbHRlcm5hdGU7XG4gIHN3aXRjaCAobmV4dC50YWcpIHtcbiAgICBjYXNlIDE1OlxuICAgIGNhc2UgMDpcbiAgICAgIG5leHQgPSByZXBsYXlGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgbmV4dC5wZW5kaW5nUHJvcHMsXG4gICAgICAgIG5leHQudHlwZSxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTE6XG4gICAgICBuZXh0ID0gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIG5leHQucGVuZGluZ1Byb3BzLFxuICAgICAgICBuZXh0LnR5cGUucmVuZGVyLFxuICAgICAgICBuZXh0LnJlZixcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZXNldEhvb2tzT25VbndpbmQobmV4dCk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHVud2luZEludGVycnVwdGVkV29yayhjdXJyZW50LCBuZXh0KSxcbiAgICAgICAgKG5leHQgPSB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhuZXh0LCBlbnRhbmdsZWRSZW5kZXJMYW5lcykpLFxuICAgICAgICAobmV4dCA9IGJlZ2luV29yayhjdXJyZW50LCBuZXh0LCBlbnRhbmdsZWRSZW5kZXJMYW5lcykpO1xuICB9XG4gIHVuaXRPZldvcmsubWVtb2l6ZWRQcm9wcyA9IHVuaXRPZldvcmsucGVuZGluZ1Byb3BzO1xuICBudWxsID09PSBuZXh0ID8gY29tcGxldGVVbml0T2ZXb3JrKHVuaXRPZldvcmspIDogKHdvcmtJblByb2dyZXNzID0gbmV4dCk7XG59XG5mdW5jdGlvbiB0aHJvd0FuZFVud2luZFdvcmtMb29wKFxuICByb290LFxuICB1bml0T2ZXb3JrLFxuICB0aHJvd25WYWx1ZSxcbiAgc3VzcGVuZGVkUmVhc29uXG4pIHtcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xuICByZXNldEhvb2tzT25VbndpbmQodW5pdE9mV29yayk7XG4gIHRoZW5hYmxlU3RhdGUkMSA9IG51bGw7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICB2YXIgcmV0dXJuRmliZXIgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICB0aHJvd0V4Y2VwdGlvbihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHVuaXRPZldvcmssXG4gICAgICAgIHRocm93blZhbHVlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgICByb290LFxuICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICAgKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKG51bGwgIT09IHJldHVybkZpYmVyKSB0aHJvdyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLCBlcnJvcik7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgIHJvb3QsXG4gICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICk7XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW5pdE9mV29yay5mbGFncyAmIDMyNzY4KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nIHx8IDEgPT09IHN1c3BlbmRlZFJlYXNvbikgcm9vdCA9ICEwO1xuICAgIGVsc2UgaWYgKFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgfHxcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMilcbiAgICApXG4gICAgICByb290ID0gITE7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9IHJvb3QgPSAhMCksXG4gICAgICAyID09PSBzdXNwZW5kZWRSZWFzb24gfHwgMyA9PT0gc3VzcGVuZGVkUmVhc29uIHx8IDYgPT09IHN1c3BlbmRlZFJlYXNvbilcbiAgICApXG4gICAgICAoc3VzcGVuZGVkUmVhc29uID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICAgIG51bGwgIT09IHN1c3BlbmRlZFJlYXNvbiAmJlxuICAgICAgICAgIDEzID09PSBzdXNwZW5kZWRSZWFzb24udGFnICYmXG4gICAgICAgICAgKHN1c3BlbmRlZFJlYXNvbi5mbGFncyB8PSAxNjM4NCk7XG4gICAgdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCByb290KTtcbiAgfSBlbHNlIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKTtcbn1cbmZ1bmN0aW9uIGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgZG8ge1xuICAgIGlmICgwICE9PSAoY29tcGxldGVkV29yay5mbGFncyAmIDMyNzY4KSkge1xuICAgICAgdW53aW5kVW5pdE9mV29yayhcbiAgICAgICAgY29tcGxldGVkV29yayxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB1bml0T2ZXb3JrID0gY29tcGxldGVkV29yay5yZXR1cm47XG4gICAgdmFyIG5leHQgPSBjb21wbGV0ZVdvcmsoXG4gICAgICBjb21wbGV0ZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICBlbnRhbmdsZWRSZW5kZXJMYW5lc1xuICAgICk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbmV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29tcGxldGVkV29yayA9IGNvbXBsZXRlZFdvcmsuc2libGluZztcbiAgICBpZiAobnVsbCAhPT0gY29tcGxldGVkV29yaykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IGNvbXBsZXRlZFdvcmsgPSB1bml0T2ZXb3JrO1xuICB9IHdoaWxlIChudWxsICE9PSBjb21wbGV0ZWRXb3JrKTtcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDUpO1xufVxuZnVuY3Rpb24gdW53aW5kVW5pdE9mV29yayh1bml0T2ZXb3JrLCBza2lwU2libGluZ3MpIHtcbiAgZG8ge1xuICAgIHZhciBuZXh0ID0gdW53aW5kV29yayh1bml0T2ZXb3JrLmFsdGVybmF0ZSwgdW5pdE9mV29yayk7XG4gICAgaWYgKG51bGwgIT09IG5leHQpIHtcbiAgICAgIG5leHQuZmxhZ3MgJj0gMzI3Njc7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5leHQgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgICBudWxsICE9PSBuZXh0ICYmXG4gICAgICAoKG5leHQuZmxhZ3MgfD0gMzI3NjgpLCAobmV4dC5zdWJ0cmVlRmxhZ3MgPSAwKSwgKG5leHQuZGVsZXRpb25zID0gbnVsbCkpO1xuICAgIGlmIChcbiAgICAgICFza2lwU2libGluZ3MgJiZcbiAgICAgICgodW5pdE9mV29yayA9IHVuaXRPZldvcmsuc2libGluZyksIG51bGwgIT09IHVuaXRPZldvcmspXG4gICAgKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcms7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzID0gdW5pdE9mV29yayA9IG5leHQ7XG4gIH0gd2hpbGUgKG51bGwgIT09IHVuaXRPZldvcmspO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNjtcbiAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xufVxuZnVuY3Rpb24gY29tbWl0Um9vdChcbiAgcm9vdCxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gIHN1c3BlbmRlZENvbW1pdFJlYXNvbixcbiAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBwcmV2aW91c1VwZGF0ZUxhbmVQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksXG4gICAgICBjb21taXRSb290SW1wbChcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgIHRyYW5zaXRpb25zLFxuICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgIHByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5LFxuICAgICAgICBzcGF3bmVkTGFuZSxcbiAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gICAgICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICAgICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICAgICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRSb290SW1wbChcbiAgcm9vdCxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIHJlbmRlclByaW9yaXR5TGV2ZWwsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICBkbyBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIHdoaWxlIChudWxsICE9PSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyk7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMyNykpO1xuICB2YXIgZmluaXNoZWRXb3JrID0gcm9vdC5maW5pc2hlZFdvcms7XG4gIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSA9IHJvb3QuZmluaXNoZWRMYW5lcztcbiAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yaykgcmV0dXJuIG51bGw7XG4gIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgcm9vdC5maW5pc2hlZExhbmVzID0gMDtcbiAgaWYgKGZpbmlzaGVkV29yayA9PT0gcm9vdC5jdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE3NykpO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDA7XG4gIHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCA9IG51bGw7XG4gIHZhciByZW1haW5pbmdMYW5lcyA9IGZpbmlzaGVkV29yay5sYW5lcyB8IGZpbmlzaGVkV29yay5jaGlsZExhbmVzO1xuICByZW1haW5pbmdMYW5lcyB8PSBjb25jdXJyZW50bHlVcGRhdGVkTGFuZXM7XG4gIG1hcmtSb290RmluaXNoZWQoXG4gICAgcm9vdCxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgcmVtYWluaW5nTGFuZXMsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXNcbiAgKTtcbiAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgKCh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwpLFxuICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDApKTtcbiAgKDAgPT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgMTAyNTYpICYmXG4gICAgMCA9PT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDEwMjU2KSkgfHxcbiAgICByb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cyB8fFxuICAgICgocm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSAhMCksXG4gICAgKHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gcmVtYWluaW5nTGFuZXMpLFxuICAgIChwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnMpLFxuICAgIHNjaGVkdWxlQ2FsbGJhY2skMShOb3JtYWxQcmlvcml0eSQxLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCEwKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pKTtcbiAgdHJhbnNpdGlvbnMgPSAwICE9PSAoZmluaXNoZWRXb3JrLmZsYWdzICYgMTU5OTApO1xuICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDE1OTkwKSB8fCB0cmFuc2l0aW9uc1xuICAgID8gKCh0cmFuc2l0aW9ucyA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsKSxcbiAgICAgIChzcGF3bmVkTGFuZSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnApLFxuICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgICh1cGRhdGVkTGFuZXMgPSBleGVjdXRpb25Db250ZXh0KSxcbiAgICAgIChleGVjdXRpb25Db250ZXh0IHw9IDQpLFxuICAgICAgY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayksXG4gICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkV29yaywgcm9vdCksXG4gICAgICByZXN0b3JlU2VsZWN0aW9uKHNlbGVjdGlvbkluZm9ybWF0aW9uLCByb290LmNvbnRhaW5lckluZm8pLFxuICAgICAgKF9lbmFibGVkID0gISFldmVudHNFbmFibGVkKSxcbiAgICAgIChzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IGV2ZW50c0VuYWJsZWQgPSBudWxsKSxcbiAgICAgIChyb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcmspLFxuICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspLFxuICAgICAgcmVxdWVzdFBhaW50KCksXG4gICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHVwZGF0ZWRMYW5lcyksXG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHNwYXduZWRMYW5lKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gdHJhbnNpdGlvbnMpKVxuICAgIDogKHJvb3QuY3VycmVudCA9IGZpbmlzaGVkV29yayk7XG4gIHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzXG4gICAgPyAoKHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gITEpLFxuICAgICAgKHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzID0gcm9vdCksXG4gICAgICAocGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUpKVxuICAgIDogcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290LCByZW1haW5pbmdMYW5lcyk7XG4gIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIDAgPT09IHJlbWFpbmluZ0xhbmVzICYmIChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGwpO1xuICBvbkNvbW1pdFJvb3QoZmluaXNoZWRXb3JrLnN0YXRlTm9kZSwgcmVuZGVyUHJpb3JpdHlMZXZlbCk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbiAgaWYgKG51bGwgIT09IHJlY292ZXJhYmxlRXJyb3JzKVxuICAgIGZvciAoXG4gICAgICByZW5kZXJQcmlvcml0eUxldmVsID0gcm9vdC5vblJlY292ZXJhYmxlRXJyb3IsIGZpbmlzaGVkV29yayA9IDA7XG4gICAgICBmaW5pc2hlZFdvcmsgPCByZWNvdmVyYWJsZUVycm9ycy5sZW5ndGg7XG4gICAgICBmaW5pc2hlZFdvcmsrK1xuICAgIClcbiAgICAgIChyZW1haW5pbmdMYW5lcyA9IHJlY292ZXJhYmxlRXJyb3JzW2ZpbmlzaGVkV29ya10pLFxuICAgICAgICByZW5kZXJQcmlvcml0eUxldmVsKHJlbWFpbmluZ0xhbmVzLnZhbHVlLCB7XG4gICAgICAgICAgY29tcG9uZW50U3RhY2s6IHJlbWFpbmluZ0xhbmVzLnN0YWNrXG4gICAgICAgIH0pO1xuICAwICE9PSAocGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgJiAzKSAmJiBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gIDAgIT09IChkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgJiA0MTk0MjE4KSAmJiAwICE9PSAocmVtYWluaW5nTGFuZXMgJiA0MilcbiAgICA/IHJvb3QgPT09IHJvb3RXaXRoTmVzdGVkVXBkYXRlc1xuICAgICAgPyBuZXN0ZWRVcGRhdGVDb3VudCsrXG4gICAgICA6ICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSwgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IHJvb3QpKVxuICAgIDogKG5lc3RlZFVwZGF0ZUNvdW50ID0gMCk7XG4gIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiByZWxlYXNlUm9vdFBvb2xlZENhY2hlKHJvb3QsIHJlbWFpbmluZ0xhbmVzKSB7XG4gIDAgPT09IChyb290LnBvb2xlZENhY2hlTGFuZXMgJj0gcmVtYWluaW5nTGFuZXMpICYmXG4gICAgKChyZW1haW5pbmdMYW5lcyA9IHJvb3QucG9vbGVkQ2FjaGUpLFxuICAgIG51bGwgIT0gcmVtYWluaW5nTGFuZXMgJiZcbiAgICAgICgocm9vdC5wb29sZWRDYWNoZSA9IG51bGwpLCByZWxlYXNlQ2FjaGUocmVtYWluaW5nTGFuZXMpKSk7XG59XG5mdW5jdGlvbiBmbHVzaFBhc3NpdmVFZmZlY3RzKCkge1xuICBpZiAobnVsbCAhPT0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMpIHtcbiAgICB2YXIgcm9vdCQxNzAgPSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyxcbiAgICAgIHJlbWFpbmluZ0xhbmVzID0gcGVuZGluZ1Bhc3NpdmVFZmZlY3RzUmVtYWluaW5nTGFuZXM7XG4gICAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzUmVtYWluaW5nTGFuZXMgPSAwO1xuICAgIHZhciByZW5kZXJQcmlvcml0eSA9IGxhbmVzVG9FdmVudFByaW9yaXR5KHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzKSxcbiAgICAgIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICAgIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgIHRyeSB7XG4gICAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMzIgPiByZW5kZXJQcmlvcml0eSA/IDMyIDogcmVuZGVyUHJpb3JpdHk7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbDtcbiAgICAgIGlmIChudWxsID09PSByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cylcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbmRlclByaW9yaXR5ID0gcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucztcbiAgICAgICAgcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IG51bGw7XG4gICAgICAgIHZhciByb290ID0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMsXG4gICAgICAgICAgbGFuZXMgPSBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcztcbiAgICAgICAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsO1xuICAgICAgICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyA9IDA7XG4gICAgICAgIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzMxKSk7XG4gICAgICAgIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICAgIGV4ZWN1dGlvbkNvbnRleHQgfD0gNDtcbiAgICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHJvb3QuY3VycmVudCk7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIocm9vdCwgcm9vdC5jdXJyZW50LCBsYW5lcywgcmVuZGVyUHJpb3JpdHkpO1xuICAgICAgICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGluamVjdGVkSG9vayAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vblBvc3RDb21taXRGaWJlclJvb3RcbiAgICAgICAgKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbmplY3RlZEhvb2sub25Qb3N0Q29tbWl0RmliZXJSb290KHJlbmRlcmVySUQsIHJvb3QpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gITA7XG4gICAgICB9XG4gICAgICByZXR1cm4gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgICAgcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290JDE3MCwgcmVtYWluaW5nTGFuZXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChyb290RmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvcikge1xuICBzb3VyY2VGaWJlciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBzb3VyY2VGaWJlcik7XG4gIHNvdXJjZUZpYmVyID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3RGaWJlci5zdGF0ZU5vZGUsIHNvdXJjZUZpYmVyLCAyKTtcbiAgcm9vdEZpYmVyID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIHNvdXJjZUZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdEZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKHJvb3RGaWJlciwgMiksIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290RmliZXIpKTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKHNvdXJjZUZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcikge1xuICBpZiAoMyA9PT0gc291cmNlRmliZXIudGFnKVxuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KHNvdXJjZUZpYmVyLCBzb3VyY2VGaWJlciwgZXJyb3IpO1xuICBlbHNlXG4gICAgZm9yICg7IG51bGwgIT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3I7ICkge1xuICAgICAgaWYgKDMgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KFxuICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PVxuICAgICAgICAgICAgdHlwZW9mIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKGluc3RhbmNlKSkpXG4gICAgICAgICkge1xuICAgICAgICAgIHNvdXJjZUZpYmVyID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICBlcnJvciA9IGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUoMik7XG4gICAgICAgICAgaW5zdGFuY2UgPSBlbnF1ZXVlVXBkYXRlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yLCAyKTtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZSAmJlxuICAgICAgICAgICAgKGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbWFya1Jvb3RVcGRhdGVkJDEoaW5zdGFuY2UsIDIpLFxuICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluc3RhbmNlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnJldHVybjtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgd2FrZWFibGUsIGxhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgaWYgKG51bGwgPT09IHBpbmdDYWNoZSkge1xuICAgIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpO1xuICAgIHZhciB0aHJlYWRJRHMgPSBuZXcgU2V0KCk7XG4gICAgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKTtcbiAgfSBlbHNlXG4gICAgKHRocmVhZElEcyA9IHBpbmdDYWNoZS5nZXQod2FrZWFibGUpKSxcbiAgICAgIHZvaWQgMCA9PT0gdGhyZWFkSURzICYmXG4gICAgICAgICgodGhyZWFkSURzID0gbmV3IFNldCgpKSwgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKSk7XG4gIHRocmVhZElEcy5oYXMobGFuZXMpIHx8XG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMCksXG4gICAgdGhyZWFkSURzLmFkZChsYW5lcyksXG4gICAgKHJvb3QgPSBwaW5nU3VzcGVuZGVkUm9vdC5iaW5kKG51bGwsIHJvb3QsIHdha2VhYmxlLCBsYW5lcykpLFxuICAgIHdha2VhYmxlLnRoZW4ocm9vdCwgcm9vdCkpO1xufVxuZnVuY3Rpb24gcGluZ1N1c3BlbmRlZFJvb3Qocm9vdCwgd2FrZWFibGUsIHBpbmdlZExhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgbnVsbCAhPT0gcGluZ0NhY2hlICYmIHBpbmdDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICByb290LnBpbmdlZExhbmVzIHw9IHJvb3Quc3VzcGVuZGVkTGFuZXMgJiBwaW5nZWRMYW5lcztcbiAgcm9vdC53YXJtTGFuZXMgJj0gfnBpbmdlZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPT09IHJvb3QgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiBwaW5nZWRMYW5lcykgPT09IHBpbmdlZExhbmVzICYmXG4gICAgKDQgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgfHxcbiAgICAoMyA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNjI5MTQ1NjApID09PVxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgMzAwID4gbm93KCkgLSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lKVxuICAgICAgPyAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyB8PSBwaW5nZWRMYW5lcyksXG4gICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDApKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSkge1xuICAwID09PSByZXRyeUxhbmUgJiYgKHJldHJ5TGFuZSA9IGNsYWltTmV4dFJldHJ5TGFuZSgpKTtcbiAgYm91bmRhcnlGaWJlciA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xuICBudWxsICE9PSBib3VuZGFyeUZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSksXG4gICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGJvdW5kYXJ5RmliZXIpKTtcbn1cbmZ1bmN0aW9uIHJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoYm91bmRhcnlGaWJlcikge1xuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICByZXRyeUxhbmUgPSAwO1xuICBudWxsICE9PSBzdXNwZW5zZVN0YXRlICYmIChyZXRyeUxhbmUgPSBzdXNwZW5zZVN0YXRlLnJldHJ5TGFuZSk7XG4gIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVJldHJ5V2FrZWFibGUoYm91bmRhcnlGaWJlciwgd2FrZWFibGUpIHtcbiAgdmFyIHJldHJ5TGFuZSA9IDA7XG4gIHN3aXRjaCAoYm91bmRhcnlGaWJlci50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIHZhciBzdXNwZW5zZVN0YXRlID0gYm91bmRhcnlGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSAmJiAocmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGUuX3JldHJ5Q2FjaGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTQpKTtcbiAgfVxuICBudWxsICE9PSByZXRyeUNhY2hlICYmIHJldHJ5Q2FjaGUuZGVsZXRlKHdha2VhYmxlKTtcbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrJDEocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2skMyhwcmlvcml0eUxldmVsLCBjYWxsYmFjayk7XG59XG52YXIgZmlyc3RTY2hlZHVsZWRSb290ID0gbnVsbCxcbiAgbGFzdFNjaGVkdWxlZFJvb3QgPSBudWxsLFxuICBkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICExLFxuICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSAhMSxcbiAgaXNGbHVzaGluZ1dvcmsgPSAhMSxcbiAgY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSAwO1xuZnVuY3Rpb24gZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpIHtcbiAgcm9vdCAhPT0gbGFzdFNjaGVkdWxlZFJvb3QgJiZcbiAgICBudWxsID09PSByb290Lm5leHQgJiZcbiAgICAobnVsbCA9PT0gbGFzdFNjaGVkdWxlZFJvb3RcbiAgICAgID8gKGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gcm9vdClcbiAgICAgIDogKGxhc3RTY2hlZHVsZWRSb290ID0gbGFzdFNjaGVkdWxlZFJvb3QubmV4dCA9IHJvb3QpKTtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gIGRpZFNjaGVkdWxlTWljcm90YXNrIHx8XG4gICAgKChkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICEwKSxcbiAgICBzY2hlZHVsZUltbWVkaWF0ZVRhc2socHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrKSk7XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbChzeW5jVHJhbnNpdGlvbkxhbmVzLCBvbmx5TGVnYWN5KSB7XG4gIGlmICghaXNGbHVzaGluZ1dvcmsgJiYgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrKSB7XG4gICAgaXNGbHVzaGluZ1dvcmsgPSAhMDtcbiAgICBkbyB7XG4gICAgICB2YXIgZGlkUGVyZm9ybVNvbWVXb3JrID0gITE7XG4gICAgICBmb3IgKHZhciByb290JDE3MiA9IGZpcnN0U2NoZWR1bGVkUm9vdDsgbnVsbCAhPT0gcm9vdCQxNzI7ICkge1xuICAgICAgICBpZiAoIW9ubHlMZWdhY3kpXG4gICAgICAgICAgaWYgKDAgIT09IHN5bmNUcmFuc2l0aW9uTGFuZXMpIHtcbiAgICAgICAgICAgIHZhciBwZW5kaW5nTGFuZXMgPSByb290JDE3Mi5wZW5kaW5nTGFuZXM7XG4gICAgICAgICAgICBpZiAoMCA9PT0gcGVuZGluZ0xhbmVzKSB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc3VzcGVuZGVkTGFuZXMgPSByb290JDE3Mi5zdXNwZW5kZWRMYW5lcyxcbiAgICAgICAgICAgICAgICBwaW5nZWRMYW5lcyA9IHJvb3QkMTcyLnBpbmdlZExhbmVzO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgICAgICgxIDw8ICgzMSAtIGNsejMyKDQyIHwgc3luY1RyYW5zaXRpb25MYW5lcykgKyAxKSkgLSAxO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJj1cbiAgICAgICAgICAgICAgICBwZW5kaW5nTGFuZXMgJiB+KHN1c3BlbmRlZExhbmVzICYgfnBpbmdlZExhbmVzKTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY2NzdcbiAgICAgICAgICAgICAgICAgID8gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDIwMTMyNjY3NykgfCAxXG4gICAgICAgICAgICAgICAgICA6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgICAgICA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB8IDJcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzIsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGdldE5leHRMYW5lcyhcbiAgICAgICAgICAgICAgICByb290JDE3MixcbiAgICAgICAgICAgICAgICByb290JDE3MiA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0IDogMFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgMCA9PT0gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmIDMpIHx8XG4gICAgICAgICAgICAgICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290JDE3MiwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB8fFxuICAgICAgICAgICAgICAgICgoZGlkUGVyZm9ybVNvbWVXb3JrID0gITApLFxuICAgICAgICAgICAgICAgIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290JDE3MiwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSk7XG4gICAgICAgIHJvb3QkMTcyID0gcm9vdCQxNzIubmV4dDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChkaWRQZXJmb3JtU29tZVdvcmspO1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaygpIHtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMTtcbiAgdmFyIHN5bmNUcmFuc2l0aW9uTGFuZXMgPSAwO1xuICAwICE9PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSAmJlxuICAgIChzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uKCkgJiZcbiAgICAgIChzeW5jVHJhbnNpdGlvbkxhbmVzID0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpLFxuICAgIChjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IDApKTtcbiAgZm9yIChcbiAgICB2YXIgY3VycmVudFRpbWUgPSBub3coKSwgcHJldiA9IG51bGwsIHJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgbnVsbCAhPT0gcm9vdDtcblxuICApIHtcbiAgICB2YXIgbmV4dCA9IHJvb3QubmV4dCxcbiAgICAgIG5leHRMYW5lcyA9IHNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2socm9vdCwgY3VycmVudFRpbWUpO1xuICAgIGlmICgwID09PSBuZXh0TGFuZXMpXG4gICAgICAocm9vdC5uZXh0ID0gbnVsbCksXG4gICAgICAgIG51bGwgPT09IHByZXYgPyAoZmlyc3RTY2hlZHVsZWRSb290ID0gbmV4dCkgOiAocHJldi5uZXh0ID0gbmV4dCksXG4gICAgICAgIG51bGwgPT09IG5leHQgJiYgKGxhc3RTY2hlZHVsZWRSb290ID0gcHJldik7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHByZXYgPSByb290KSwgMCAhPT0gc3luY1RyYW5zaXRpb25MYW5lcyB8fCAwICE9PSAobmV4dExhbmVzICYgMykpXG4gICAgKVxuICAgICAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gICAgcm9vdCA9IG5leHQ7XG4gIH1cbiAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgITEpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBjdXJyZW50VGltZSkge1xuICBmb3IgKFxuICAgIHZhciBzdXNwZW5kZWRMYW5lcyA9IHJvb3Quc3VzcGVuZGVkTGFuZXMsXG4gICAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXMsXG4gICAgICBleHBpcmF0aW9uVGltZXMgPSByb290LmV4cGlyYXRpb25UaW1lcyxcbiAgICAgIGxhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXMgJiAtNjI5MTQ1NjE7XG4gICAgMCA8IGxhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQ1ID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQ1LFxuICAgICAgZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV07XG4gICAgaWYgKC0xID09PSBleHBpcmF0aW9uVGltZSkge1xuICAgICAgaWYgKDAgPT09IChsYW5lICYgc3VzcGVuZGVkTGFuZXMpIHx8IDAgIT09IChsYW5lICYgcGluZ2VkTGFuZXMpKVxuICAgICAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV0gPSBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpO1xuICAgIH0gZWxzZSBleHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZSAmJiAocm9vdC5leHBpcmVkTGFuZXMgfD0gbGFuZSk7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgY3VycmVudFRpbWUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gIHN1c3BlbmRlZExhbmVzID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHN1c3BlbmRlZExhbmVzID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gY3VycmVudFRpbWUgPyBzdXNwZW5kZWRMYW5lcyA6IDBcbiAgKTtcbiAgcGluZ2VkTGFuZXMgPSByb290LmNhbGxiYWNrTm9kZTtcbiAgaWYgKFxuICAgIDAgPT09IHN1c3BlbmRlZExhbmVzIHx8XG4gICAgKHJvb3QgPT09IGN1cnJlbnRUaW1lICYmIDIgPT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB8fFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdFxuICApXG4gICAgcmV0dXJuIChcbiAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpLFxuICAgICAgKHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbCksXG4gICAgICAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMClcbiAgICApO1xuICBpZiAoXG4gICAgMCA9PT0gKHN1c3BlbmRlZExhbmVzICYgMykgfHxcbiAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QsIHN1c3BlbmRlZExhbmVzKVxuICApIHtcbiAgICBjdXJyZW50VGltZSA9IHN1c3BlbmRlZExhbmVzICYgLXN1c3BlbmRlZExhbmVzO1xuICAgIGlmIChjdXJyZW50VGltZSA9PT0gcm9vdC5jYWxsYmFja1ByaW9yaXR5KSByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiYgY2FuY2VsQ2FsbGJhY2skMShwaW5nZWRMYW5lcyk7XG4gICAgc3dpdGNoIChsYW5lc1RvRXZlbnRQcmlvcml0eShzdXNwZW5kZWRMYW5lcykpIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgIGNhc2UgODpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBVc2VyQmxvY2tpbmdQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMyOlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IE5vcm1hbFByaW9yaXR5JDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gSWRsZVByaW9yaXR5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gTm9ybWFsUHJpb3JpdHkkMTtcbiAgICB9XG4gICAgcGluZ2VkTGFuZXMgPSBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KTtcbiAgICBzdXNwZW5kZWRMYW5lcyA9IHNjaGVkdWxlQ2FsbGJhY2skMyhzdXNwZW5kZWRMYW5lcywgcGluZ2VkTGFuZXMpO1xuICAgIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IGN1cnJlbnRUaW1lO1xuICAgIHJvb3QuY2FsbGJhY2tOb2RlID0gc3VzcGVuZGVkTGFuZXM7XG4gICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICB9XG4gIG51bGwgIT09IHBpbmdlZExhbmVzICYmIG51bGwgIT09IHBpbmdlZExhbmVzICYmIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpO1xuICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSAyO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJldHVybiAyO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrKHJvb3QsIGRpZFRpbWVvdXQpIHtcbiAgdmFyIG9yaWdpbmFsQ2FsbGJhY2tOb2RlID0gcm9vdC5jYWxsYmFja05vZGU7XG4gIGlmIChmbHVzaFBhc3NpdmVFZmZlY3RzKCkgJiYgcm9vdC5jYWxsYmFja05vZGUgIT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlKVxuICAgIHJldHVybiBudWxsO1xuICB2YXIgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgPSBnZXROZXh0TGFuZXMoXG4gICAgcm9vdCxcbiAgICByb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgPyB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCA6IDBcbiAgKTtcbiAgaWYgKDAgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAsIGRpZFRpbWVvdXQpO1xuICBzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrKHJvb3QsIG5vdygpKTtcbiAgcmV0dXJuIG51bGwgIT0gcm9vdC5jYWxsYmFja05vZGUgJiYgcm9vdC5jYWxsYmFja05vZGUgPT09IG9yaWdpbmFsQ2FsbGJhY2tOb2RlXG4gICAgPyBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290LCBsYW5lcykge1xuICBpZiAoZmx1c2hQYXNzaXZlRWZmZWN0cygpKSByZXR1cm4gbnVsbDtcbiAgcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgbGFuZXMsICEwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlSW1tZWRpYXRlVGFzayhjYikge1xuICBzY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KVxuICAgICAgPyBzY2hlZHVsZUNhbGxiYWNrJDMoSW1tZWRpYXRlUHJpb3JpdHksIGNiKVxuICAgICAgOiBjYigpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpIHtcbiAgMCA9PT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgJiZcbiAgICAoY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSBjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSgpKTtcbiAgcmV0dXJuIGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lO1xufVxuZnVuY3Rpb24gY29lcmNlRm9ybUFjdGlvblByb3AoYWN0aW9uUHJvcCkge1xuICByZXR1cm4gbnVsbCA9PSBhY3Rpb25Qcm9wIHx8XG4gICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIGFjdGlvblByb3AgfHxcbiAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGFjdGlvblByb3BcbiAgICA/IG51bGxcbiAgICA6IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblByb3BcbiAgICAgID8gYWN0aW9uUHJvcFxuICAgICAgOiBzYW5pdGl6ZVVSTChcIlwiICsgYWN0aW9uUHJvcCk7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIoZm9ybSwgc3VibWl0dGVyKSB7XG4gIHZhciB0ZW1wID0gc3VibWl0dGVyLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICB0ZW1wLm5hbWUgPSBzdWJtaXR0ZXIubmFtZTtcbiAgdGVtcC52YWx1ZSA9IHN1Ym1pdHRlci52YWx1ZTtcbiAgZm9ybS5pZCAmJiB0ZW1wLnNldEF0dHJpYnV0ZShcImZvcm1cIiwgZm9ybS5pZCk7XG4gIHN1Ym1pdHRlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZW1wLCBzdWJtaXR0ZXIpO1xuICBmb3JtID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xuICB0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGVtcCk7XG4gIHJldHVybiBmb3JtO1xufVxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50cyQxKFxuICBkaXNwYXRjaFF1ZXVlLFxuICBkb21FdmVudE5hbWUsXG4gIG1heWJlVGFyZ2V0SW5zdCxcbiAgbmF0aXZlRXZlbnQsXG4gIG5hdGl2ZUV2ZW50VGFyZ2V0XG4pIHtcbiAgaWYgKFxuICAgIFwic3VibWl0XCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgIG1heWJlVGFyZ2V0SW5zdCAmJlxuICAgIG1heWJlVGFyZ2V0SW5zdC5zdGF0ZU5vZGUgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICkge1xuICAgIHZhciBhY3Rpb24gPSBjb2VyY2VGb3JtQWN0aW9uUHJvcChcbiAgICAgICAgKG5hdGl2ZUV2ZW50VGFyZ2V0W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpLmFjdGlvblxuICAgICAgKSxcbiAgICAgIHN1Ym1pdHRlciA9IG5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjtcbiAgICBzdWJtaXR0ZXIgJiZcbiAgICAgICgoZG9tRXZlbnROYW1lID0gKGRvbUV2ZW50TmFtZSA9IHN1Ym1pdHRlcltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKVxuICAgICAgICA/IGNvZXJjZUZvcm1BY3Rpb25Qcm9wKGRvbUV2ZW50TmFtZS5mb3JtQWN0aW9uKVxuICAgICAgICA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKSxcbiAgICAgIG51bGwgIT09IGRvbUV2ZW50TmFtZSAmJiAoKGFjdGlvbiA9IGRvbUV2ZW50TmFtZSksIChzdWJtaXR0ZXIgPSBudWxsKSkpO1xuICAgIHZhciBldmVudCA9IG5ldyBTeW50aGV0aWNFdmVudChcbiAgICAgIFwiYWN0aW9uXCIsXG4gICAgICBcImFjdGlvblwiLFxuICAgICAgbnVsbCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICApO1xuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICBsaXN0ZW5lcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgIGxpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgICBpZiAoMCAhPT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBzdWJtaXR0ZXJcbiAgICAgICAgICAgICAgICAgID8gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKG5hdGl2ZUV2ZW50VGFyZ2V0LCBzdWJtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICA6IG5ldyBGb3JtRGF0YShuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgc3RhcnRIb3N0VHJhbnNpdGlvbihcbiAgICAgICAgICAgICAgICAgIG1heWJlVGFyZ2V0SW5zdCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKGV2ZW50LnByZXZlbnREZWZhdWx0KCksXG4gICAgICAgICAgICAgICAgKGZvcm1EYXRhID0gc3VibWl0dGVyXG4gICAgICAgICAgICAgICAgICA/IGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihuYXRpdmVFdmVudFRhcmdldCwgc3VibWl0dGVyKVxuICAgICAgICAgICAgICAgICAgOiBuZXcgRm9ybURhdGEobmF0aXZlRXZlbnRUYXJnZXQpKSxcbiAgICAgICAgICAgICAgICBzdGFydEhvc3RUcmFuc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgbWF5YmVUYXJnZXRJbnN0LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbmF0aXZlRXZlbnRUYXJnZXQubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgICAgICAgIGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0OiBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gIH1cbn1cbmZvciAoXG4gIHZhciBpJGpzY29tcCRpbmxpbmVfMTQzOSA9IDA7XG4gIGkkanNjb21wJGlubGluZV8xNDM5IDwgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHMubGVuZ3RoO1xuICBpJGpzY29tcCRpbmxpbmVfMTQzOSsrXG4pIHtcbiAgdmFyIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAgPVxuICAgICAgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHNbaSRqc2NvbXAkaW5saW5lXzE0MzldLFxuICAgIGRvbUV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDEgPVxuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTQ0MC50b0xvd2VyQ2FzZSgpLFxuICAgIGNhcGl0YWxpemVkRXZlbnQkanNjb21wJGlubGluZV8xNDQyID1cbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDBbMF0udG9VcHBlckNhc2UoKSArXG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwLnNsaWNlKDEpO1xuICByZWdpc3RlclNpbXBsZUV2ZW50KFxuICAgIGRvbUV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDEsXG4gICAgXCJvblwiICsgY2FwaXRhbGl6ZWRFdmVudCRqc2NvbXAkaW5saW5lXzE0NDJcbiAgKTtcbn1cbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX0VORCwgXCJvbkFuaW1hdGlvbkVuZFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX0lURVJBVElPTiwgXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoQU5JTUFUSU9OX1NUQVJULCBcIm9uQW5pbWF0aW9uU3RhcnRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFwiZGJsY2xpY2tcIiwgXCJvbkRvdWJsZUNsaWNrXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImZvY3VzaW5cIiwgXCJvbkZvY3VzXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImZvY3Vzb3V0XCIsIFwib25CbHVyXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX1JVTiwgXCJvblRyYW5zaXRpb25SdW5cIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fU1RBUlQsIFwib25UcmFuc2l0aW9uU3RhcnRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fQ0FOQ0VMLCBcIm9uVHJhbnNpdGlvbkNhbmNlbFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9FTkQsIFwib25UcmFuc2l0aW9uRW5kXCIpO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uTW91c2VFbnRlclwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Nb3VzZUxlYXZlXCIsIFtcIm1vdXNlb3V0XCIsIFwibW91c2VvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvblBvaW50ZXJFbnRlclwiLCBbXCJwb2ludGVyb3V0XCIsIFwicG9pbnRlcm92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uUG9pbnRlckxlYXZlXCIsIFtcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVyb3ZlclwiXSk7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25DaGFuZ2VcIixcbiAgXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvblNlbGVjdFwiLFxuICBcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFxuICAgIFwiIFwiXG4gIClcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXCJvbkJlZm9yZUlucHV0XCIsIFtcbiAgXCJjb21wb3NpdGlvbmVuZFwiLFxuICBcImtleXByZXNzXCIsXG4gIFwidGV4dElucHV0XCIsXG4gIFwicGFzdGVcIlxuXSk7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvbkVuZFwiLFxuICBcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuICBcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFxuICBcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xudmFyIG1lZGlhRXZlbnRUeXBlcyA9XG4gICAgXCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApLFxuICBub25EZWxlZ2F0ZWRFdmVudHMgPSBuZXcgU2V0KFxuICAgIFwiYmVmb3JldG9nZ2xlIGNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHNjcm9sbGVuZCB0b2dnbGVcIlxuICAgICAgLnNwbGl0KFwiIFwiKVxuICAgICAgLmNvbmNhdChtZWRpYUV2ZW50VHlwZXMpXG4gICk7XG5mdW5jdGlvbiBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCBldmVudFN5c3RlbUZsYWdzKSB7XG4gIGV2ZW50U3lzdGVtRmxhZ3MgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2Rpc3BhdGNoUXVldWUkaSA9IGRpc3BhdGNoUXVldWVbaV0sXG4gICAgICBldmVudCA9IF9kaXNwYXRjaFF1ZXVlJGkuZXZlbnQ7XG4gICAgX2Rpc3BhdGNoUXVldWUkaSA9IF9kaXNwYXRjaFF1ZXVlJGkubGlzdGVuZXJzO1xuICAgIGE6IHtcbiAgICAgIHZhciBwcmV2aW91c0luc3RhbmNlID0gdm9pZCAwO1xuICAgICAgaWYgKGV2ZW50U3lzdGVtRmxhZ3MpXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGkkanNjb21wJDAgPSBfZGlzcGF0Y2hRdWV1ZSRpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgMCA8PSBpJGpzY29tcCQwO1xuICAgICAgICAgIGkkanNjb21wJDAtLVxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpW2kkanNjb21wJDBdLFxuICAgICAgICAgICAgaW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5pbnN0YW5jZSxcbiAgICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkubGlzdGVuZXI7XG4gICAgICAgICAgaWYgKGluc3RhbmNlICE9PSBwcmV2aW91c0luc3RhbmNlICYmIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaTtcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJldmlvdXNJbnN0YW5jZShldmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICBlbHNlXG4gICAgICAgIGZvciAoXG4gICAgICAgICAgaSRqc2NvbXAkMCA9IDA7XG4gICAgICAgICAgaSRqc2NvbXAkMCA8IF9kaXNwYXRjaFF1ZXVlJGkubGVuZ3RoO1xuICAgICAgICAgIGkkanNjb21wJDArK1xuICAgICAgICApIHtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaFF1ZXVlJGlbaSRqc2NvbXAkMF07XG4gICAgICAgICAgaW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5pbnN0YW5jZTtcbiAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuY3VycmVudFRhcmdldDtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmxpc3RlbmVyO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gcHJldmlvdXNJbnN0YW5jZSAmJiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UoZXZlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEVsZW1lbnQpIHtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHRhcmdldEVsZW1lbnRbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XTtcbiAgdm9pZCAwID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdGFyZ2V0RWxlbWVudFtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldID1cbiAgICAgIG5ldyBTZXQoKSk7XG4gIHZhciBsaXN0ZW5lclNldEtleSA9IGRvbUV2ZW50TmFtZSArIFwiX19idWJibGVcIjtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LmhhcyhsaXN0ZW5lclNldEtleSkgfHxcbiAgICAoYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIodGFyZ2V0RWxlbWVudCwgZG9tRXZlbnROYW1lLCAyLCAhMSksXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LmFkZChsaXN0ZW5lclNldEtleSkpO1xufVxuZnVuY3Rpb24gbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIsIHRhcmdldCkge1xuICB2YXIgZXZlbnRTeXN0ZW1GbGFncyA9IDA7XG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIgJiYgKGV2ZW50U3lzdGVtRmxhZ3MgfD0gNCk7XG4gIGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKFxuICAgIHRhcmdldCxcbiAgICBkb21FdmVudE5hbWUsXG4gICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4gICk7XG59XG52YXIgbGlzdGVuaW5nTWFya2VyID0gXCJfcmVhY3RMaXN0ZW5pbmdcIiArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuZnVuY3Rpb24gbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgaWYgKCFyb290Q29udGFpbmVyRWxlbWVudFtsaXN0ZW5pbmdNYXJrZXJdKSB7XG4gICAgcm9vdENvbnRhaW5lckVsZW1lbnRbbGlzdGVuaW5nTWFya2VyXSA9ICEwO1xuICAgIGFsbE5hdGl2ZUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChkb21FdmVudE5hbWUpIHtcbiAgICAgIFwic2VsZWN0aW9uY2hhbmdlXCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAobm9uRGVsZWdhdGVkRXZlbnRzLmhhcyhkb21FdmVudE5hbWUpIHx8XG4gICAgICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsICExLCByb290Q29udGFpbmVyRWxlbWVudCksXG4gICAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCAhMCwgcm9vdENvbnRhaW5lckVsZW1lbnQpKTtcbiAgICB9KTtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9XG4gICAgICA5ID09PSByb290Q29udGFpbmVyRWxlbWVudC5ub2RlVHlwZVxuICAgICAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgICAgIDogcm9vdENvbnRhaW5lckVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgICBudWxsID09PSBvd25lckRvY3VtZW50IHx8XG4gICAgICBvd25lckRvY3VtZW50W2xpc3RlbmluZ01hcmtlcl0gfHxcbiAgICAgICgob3duZXJEb2N1bWVudFtsaXN0ZW5pbmdNYXJrZXJdID0gITApLFxuICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChcInNlbGVjdGlvbmNoYW5nZVwiLCAhMSwgb3duZXJEb2N1bWVudCkpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcihcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbikge1xuICBzd2l0Y2ggKGdldEV2ZW50UHJpb3JpdHkoZG9tRXZlbnROYW1lKSkge1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaERpc2NyZXRlRXZlbnQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaENvbnRpbnVvdXNFdmVudDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBsaXN0ZW5lcldyYXBwZXIgPSBkaXNwYXRjaEV2ZW50O1xuICB9XG4gIGV2ZW50U3lzdGVtRmxhZ3MgPSBsaXN0ZW5lcldyYXBwZXIuYmluZChcbiAgICBudWxsLFxuICAgIGRvbUV2ZW50TmFtZSxcbiAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgIHRhcmdldENvbnRhaW5lclxuICApO1xuICBsaXN0ZW5lcldyYXBwZXIgPSB2b2lkIDA7XG4gICFwYXNzaXZlQnJvd3NlckV2ZW50c1N1cHBvcnRlZCB8fFxuICAgIChcInRvdWNoc3RhcnRcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICBcInRvdWNobW92ZVwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgIFwid2hlZWxcIiAhPT0gZG9tRXZlbnROYW1lKSB8fFxuICAgIChsaXN0ZW5lcldyYXBwZXIgPSAhMCk7XG4gIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbiAgICA/IHZvaWQgMCAhPT0gbGlzdGVuZXJXcmFwcGVyXG4gICAgICA/IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywge1xuICAgICAgICAgIGNhcHR1cmU6ICEwLFxuICAgICAgICAgIHBhc3NpdmU6IGxpc3RlbmVyV3JhcHBlclxuICAgICAgICB9KVxuICAgICAgOiB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsICEwKVxuICAgIDogdm9pZCAwICE9PSBsaXN0ZW5lcldyYXBwZXJcbiAgICAgID8gdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB7XG4gICAgICAgICAgcGFzc2l2ZTogbGlzdGVuZXJXcmFwcGVyXG4gICAgICAgIH0pXG4gICAgICA6IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgITEpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIG5hdGl2ZUV2ZW50LFxuICB0YXJnZXRJbnN0JGpzY29tcCQwLFxuICB0YXJnZXRDb250YWluZXJcbikge1xuICB2YXIgYW5jZXN0b3JJbnN0ID0gdGFyZ2V0SW5zdCRqc2NvbXAkMDtcbiAgaWYgKFxuICAgIDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgMSkgJiZcbiAgICAwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDIpICYmXG4gICAgbnVsbCAhPT0gdGFyZ2V0SW5zdCRqc2NvbXAkMFxuICApXG4gICAgYTogZm9yICg7Oykge1xuICAgICAgaWYgKG51bGwgPT09IHRhcmdldEluc3QkanNjb21wJDApIHJldHVybjtcbiAgICAgIHZhciBub2RlVGFnID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC50YWc7XG4gICAgICBpZiAoMyA9PT0gbm9kZVRhZyB8fCA0ID09PSBub2RlVGFnKSB7XG4gICAgICAgIHZhciBjb250YWluZXIgPSB0YXJnZXRJbnN0JGpzY29tcCQwLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY29udGFpbmVyID09PSB0YXJnZXRDb250YWluZXIgfHxcbiAgICAgICAgICAoOCA9PT0gY29udGFpbmVyLm5vZGVUeXBlICYmIGNvbnRhaW5lci5wYXJlbnROb2RlID09PSB0YXJnZXRDb250YWluZXIpXG4gICAgICAgIClcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKDQgPT09IG5vZGVUYWcpXG4gICAgICAgICAgZm9yIChub2RlVGFnID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5yZXR1cm47IG51bGwgIT09IG5vZGVUYWc7ICkge1xuICAgICAgICAgICAgdmFyIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgICBpZiAoMyA9PT0gZ3JhbmRUYWcgfHwgNCA9PT0gZ3JhbmRUYWcpXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKGdyYW5kVGFnID0gbm9kZVRhZy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksXG4gICAgICAgICAgICAgICAgZ3JhbmRUYWcgPT09IHRhcmdldENvbnRhaW5lciB8fFxuICAgICAgICAgICAgICAgICAgKDggPT09IGdyYW5kVGFnLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgICAgICAgIGdyYW5kVGFnLnBhcmVudE5vZGUgPT09IHRhcmdldENvbnRhaW5lcikpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBub2RlVGFnID0gbm9kZVRhZy5yZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICBmb3IgKDsgbnVsbCAhPT0gY29udGFpbmVyOyApIHtcbiAgICAgICAgICBub2RlVGFnID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyKTtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZVRhZykgcmV0dXJuO1xuICAgICAgICAgIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgNSA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDYgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICAyNiA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDI3ID09PSBncmFuZFRhZ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IGFuY2VzdG9ySW5zdCA9IG5vZGVUYWc7XG4gICAgICAgICAgICBjb250aW51ZSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuO1xuICAgIH1cbiAgYmF0Y2hlZFVwZGF0ZXMkMShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBhbmNlc3Rvckluc3QsXG4gICAgICBuYXRpdmVFdmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSxcbiAgICAgIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBhOiB7XG4gICAgICB2YXIgcmVhY3ROYW1lID0gdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuZ2V0KGRvbUV2ZW50TmFtZSk7XG4gICAgICBpZiAodm9pZCAwICE9PSByZWFjdE5hbWUpIHtcbiAgICAgICAgdmFyIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0V2ZW50LFxuICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gZG9tRXZlbnROYW1lO1xuICAgICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgaWYgKDAgPT09IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgY2FzZSBcImtleXVwXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBcImJsdXJcIjtcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgICAgICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICAgICAgICAgIGlmICgyID09PSBuYXRpdmVFdmVudC5idXR0b24pIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSBcImF1eGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcImRibGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZHJhZ1wiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgICAgICAgY2FzZSBcImRyb3BcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b3VjaGNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX0VORDpcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9JVEVSQVRJT046XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fU1RBUlQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNBbmltYXRpb25FdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgVFJBTlNJVElPTl9FTkQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgICAgY2FzZSBcInNjcm9sbGVuZFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ3aGVlbFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgICAgICAgY2FzZSBcImN1dFwiOlxuICAgICAgICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJjYW5jZWxcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1BvaW50ZXJFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICAgICAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUb2dnbGVFdmVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5DYXB0dXJlUGhhc2UgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpLFxuICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICFpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgKFwic2Nyb2xsXCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInNjcm9sbGVuZFwiID09PSBkb21FdmVudE5hbWUpLFxuICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgICAgID8gbnVsbCAhPT0gcmVhY3ROYW1lXG4gICAgICAgICAgICAgID8gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCJcbiAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICA6IHJlYWN0TmFtZTtcbiAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBbXTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0YXJnZXRJbnN0LCBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBfaW5zdGFuY2Uuc3RhdGVOb2RlO1xuICAgICAgICAgIF9pbnN0YW5jZSA9IF9pbnN0YW5jZS50YWc7XG4gICAgICAgICAgKDUgIT09IF9pbnN0YW5jZSAmJiAyNiAhPT0gX2luc3RhbmNlICYmIDI3ICE9PSBfaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICBudWxsID09PSBsYXN0SG9zdENvbXBvbmVudCB8fFxuICAgICAgICAgICAgbnVsbCA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICgoX2luc3RhbmNlID0gZ2V0TGlzdGVuZXIoaW5zdGFuY2UsIHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICBudWxsICE9IF9pbnN0YW5jZSAmJlxuICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZS5wdXNoKFxuICAgICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIoaW5zdGFuY2UsIF9pbnN0YW5jZSwgbGFzdEhvc3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgIGlmIChhY2N1bXVsYXRlVGFyZ2V0T25seSkgYnJlYWs7XG4gICAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5yZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgMCA8IGluQ2FwdHVyZVBoYXNlLmxlbmd0aCAmJlxuICAgICAgICAgICgocmVhY3ROYW1lID0gbmV3IFN5bnRoZXRpY0V2ZW50Q3RvcihcbiAgICAgICAgICAgIHJlYWN0TmFtZSxcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApKSxcbiAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogcmVhY3ROYW1lLCBsaXN0ZW5lcnM6IGluQ2FwdHVyZVBoYXNlIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgNykpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICBcIm1vdXNlb3ZlclwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3ZlclwiID09PSBkb21FdmVudE5hbWU7XG4gICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9XG4gICAgICAgICAgXCJtb3VzZW91dFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3V0XCIgPT09IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlYWN0TmFtZSAmJlxuICAgICAgICAgIG5hdGl2ZUV2ZW50ICE9PSBjdXJyZW50UmVwbGF5aW5nRXZlbnQgJiZcbiAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkgJiZcbiAgICAgICAgICAoZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpIHx8XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgICAgICAgKVxuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgfHwgcmVhY3ROYW1lKSB7XG4gICAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICA6IChyZWFjdE5hbWUgPSBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50KVxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lLmRlZmF1bHRWaWV3IHx8IHJlYWN0TmFtZS5wYXJlbnRXaW5kb3dcbiAgICAgICAgICAgICAgICA6IHdpbmRvdztcbiAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSxcbiAgICAgICAgICAgICAgKFN5bnRoZXRpY0V2ZW50Q3RvciA9IHRhcmdldEluc3QpLFxuICAgICAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPSByZWFjdEV2ZW50VHlwZVxuICAgICAgICAgICAgICAgID8gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpXG4gICAgICAgICAgICAgICAgOiBudWxsKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgICAoKGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICAgICAgIGdldE5lYXJlc3RNb3VudGVkRmliZXIocmVhY3RFdmVudFR5cGUpKSxcbiAgICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSByZWFjdEV2ZW50VHlwZS50YWcpLFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlICE9PSBhY2N1bXVsYXRlVGFyZ2V0T25seSB8fFxuICAgICAgICAgICAgICAgICAgKDUgIT09IGluQ2FwdHVyZVBoYXNlICYmXG4gICAgICAgICAgICAgICAgICAgIDI3ICE9PSBpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgICAgICAgICA2ICE9PSBpbkNhcHR1cmVQaGFzZSkpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIChTeW50aGV0aWNFdmVudEN0b3IgPSBudWxsKSwgKHJlYWN0RXZlbnRUeXBlID0gdGFyZ2V0SW5zdCk7XG4gICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciAhPT0gcmVhY3RFdmVudFR5cGUpIHtcbiAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IFwib25Nb3VzZUxlYXZlXCI7XG4gICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IFwib25Nb3VzZUVudGVyXCI7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IFwibW91c2VcIjtcbiAgICAgICAgICAgIGlmIChcInBvaW50ZXJvdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm92ZXJcIiA9PT0gZG9tRXZlbnROYW1lKVxuICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQpLFxuICAgICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBcIm9uUG9pbnRlckxlYXZlXCIpLFxuICAgICAgICAgICAgICAgIChyZWFjdEV2ZW50TmFtZSA9IFwib25Qb2ludGVyRW50ZXJcIiksXG4gICAgICAgICAgICAgICAgKGluc3RhbmNlID0gXCJwb2ludGVyXCIpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPVxuICAgICAgICAgICAgICBudWxsID09IFN5bnRoZXRpY0V2ZW50Q3RvclxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lXG4gICAgICAgICAgICAgICAgOiBnZXROb2RlRnJvbUluc3RhbmNlKFN5bnRoZXRpY0V2ZW50Q3Rvcik7XG4gICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9XG4gICAgICAgICAgICAgIG51bGwgPT0gcmVhY3RFdmVudFR5cGVcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZVxuICAgICAgICAgICAgICAgIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShyZWFjdEV2ZW50VHlwZSk7XG4gICAgICAgICAgICByZWFjdE5hbWUgPSBuZXcgaW5DYXB0dXJlUGhhc2UoXG4gICAgICAgICAgICAgIF9pbnN0YW5jZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2UgKyBcImxlYXZlXCIsXG4gICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVhY3ROYW1lLnRhcmdldCA9IGFjY3VtdWxhdGVUYXJnZXRPbmx5O1xuICAgICAgICAgICAgcmVhY3ROYW1lLnJlbGF0ZWRUYXJnZXQgPSBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCkgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgICAgICAgKChpbkNhcHR1cmVQaGFzZSA9IG5ldyBpbkNhcHR1cmVQaGFzZShcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSArIFwiZW50ZXJcIixcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnRhcmdldCA9IGxhc3RIb3N0Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnJlbGF0ZWRUYXJnZXQgPSBhY2N1bXVsYXRlVGFyZ2V0T25seSksXG4gICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBpbkNhcHR1cmVQaGFzZSkpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPSBfaW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yICYmIHJlYWN0RXZlbnRUeXBlKVxuICAgICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNFdmVudEN0b3I7XG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSByZWFjdEV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gaW5DYXB0dXJlUGhhc2U7XG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gZ2V0UGFyZW50KGxhc3RIb3N0Q29tcG9uZW50KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGluc3RhbmNlKys7XG4gICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSByZWFjdEV2ZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IGdldFBhcmVudChfaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQrKztcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IGluc3RhbmNlIC0gbGFzdEhvc3RDb21wb25lbnQ7IClcbiAgICAgICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZSA9IGdldFBhcmVudChpbkNhcHR1cmVQaGFzZSkpLCBpbnN0YW5jZS0tO1xuICAgICAgICAgICAgICAgIGZvciAoOyAwIDwgbGFzdEhvc3RDb21wb25lbnQgLSBpbnN0YW5jZTsgKVxuICAgICAgICAgICAgICAgICAgKHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50LS07XG4gICAgICAgICAgICAgICAgZm9yICg7IGluc3RhbmNlLS07ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgKG51bGwgIT09IHJlYWN0RXZlbnROYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPT09IHJlYWN0RXZlbnROYW1lLmFsdGVybmF0ZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gZ2V0UGFyZW50KGluQ2FwdHVyZVBoYXNlKTtcbiAgICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGluQ2FwdHVyZVBoYXNlID0gbnVsbDtcbiAgICAgICAgICAgIG51bGwgIT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJlxuICAgICAgICAgICAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50KFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICAgICAgcmVhY3ROYW1lLFxuICAgICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSxcbiAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gYWNjdW11bGF0ZVRhcmdldE9ubHkgJiZcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5LFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlLFxuICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHJlYWN0TmFtZSA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPVxuICAgICAgICAgIHJlYWN0TmFtZS5ub2RlTmFtZSAmJiByZWFjdE5hbWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwic2VsZWN0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgIChcImlucHV0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJiBcImZpbGVcIiA9PT0gcmVhY3ROYW1lLnR5cGUpXG4gICAgICAgIClcbiAgICAgICAgICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgIGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudChyZWFjdE5hbWUpKVxuICAgICAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpXG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgICAgICB2YXIgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIChTeW50aGV0aWNFdmVudEN0b3IgPSByZWFjdE5hbWUubm9kZU5hbWUpLFxuICAgICAgICAgICAgIVN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgICAgXCJpbnB1dFwiICE9PSBTeW50aGV0aWNFdmVudEN0b3IudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgKFwiY2hlY2tib3hcIiAhPT0gcmVhY3ROYW1lLnR5cGUgJiYgXCJyYWRpb1wiICE9PSByZWFjdE5hbWUudHlwZSlcbiAgICAgICAgICAgICAgPyB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50KHRhcmdldEluc3QuZWxlbWVudFR5cGUpICYmXG4gICAgICAgICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KVxuICAgICAgICAgICAgICA6IChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jICYmXG4gICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZ1bmMoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgJiYgaGFuZGxlRXZlbnRGdW5jKGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lLCB0YXJnZXRJbnN0KTtcbiAgICAgICAgXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgICB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgXCJudW1iZXJcIiA9PT0gcmVhY3ROYW1lLnR5cGUgJiZcbiAgICAgICAgICBudWxsICE9IHRhcmdldEluc3QubWVtb2l6ZWRQcm9wcy52YWx1ZSAmJlxuICAgICAgICAgIHNldERlZmF1bHRWYWx1ZShyZWFjdE5hbWUsIFwibnVtYmVyXCIsIHJlYWN0TmFtZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICBoYW5kbGVFdmVudEZ1bmMgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNUZXh0SW5wdXRFbGVtZW50KGhhbmRsZUV2ZW50RnVuYykgfHxcbiAgICAgICAgICAgIFwidHJ1ZVwiID09PSBoYW5kbGVFdmVudEZ1bmMuY29udGVudEVkaXRhYmxlXG4gICAgICAgICAgKVxuICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnQgPSBoYW5kbGVFdmVudEZ1bmMpLFxuICAgICAgICAgICAgICAoYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0KSxcbiAgICAgICAgICAgICAgKGxhc3RTZWxlY3Rpb24gPSBudWxsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IGFjdGl2ZUVsZW1lbnRJbnN0ID0gYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBtb3VzZURvd24gPSAhMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgbW91c2VEb3duID0gITE7XG4gICAgICAgICAgY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIGJyZWFrO1xuICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgICAgICBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgfVxuICAgICAgdmFyIGZhbGxiYWNrRGF0YTtcbiAgICAgIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KVxuICAgICAgICBiOiB7XG4gICAgICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XG4gICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblVwZGF0ZVwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudFR5cGUgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgaXNDb21wb3NpbmdcbiAgICAgICAgICA/IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSAmJlxuICAgICAgICAgICAgKGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiKVxuICAgICAgICAgIDogXCJrZXlkb3duXCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAgICAgMjI5ID09PSBuYXRpdmVFdmVudC5rZXlDb2RlICYmXG4gICAgICAgICAgICAoZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7XG4gICAgICBldmVudFR5cGUgJiZcbiAgICAgICAgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmXG4gICAgICAgICAgXCJrb1wiICE9PSBuYXRpdmVFdmVudC5sb2NhbGUgJiZcbiAgICAgICAgICAoaXNDb21wb3NpbmcgfHwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiAhPT0gZXZlbnRUeXBlXG4gICAgICAgICAgICA/IFwib25Db21wb3NpdGlvbkVuZFwiID09PSBldmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgaXNDb21wb3NpbmcgJiZcbiAgICAgICAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGdldERhdGEoKSlcbiAgICAgICAgICAgIDogKChyb290ID0gbmF0aXZlRXZlbnRUYXJnZXQpLFxuICAgICAgICAgICAgICAoc3RhcnRUZXh0ID0gXCJ2YWx1ZVwiIGluIHJvb3QgPyByb290LnZhbHVlIDogcm9vdC50ZXh0Q29udGVudCksXG4gICAgICAgICAgICAgIChpc0NvbXBvc2luZyA9ICEwKSkpLFxuICAgICAgICAoaGFuZGxlRXZlbnRGdW5jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEluc3QsIGV2ZW50VHlwZSkpLFxuICAgICAgICAwIDwgaGFuZGxlRXZlbnRGdW5jLmxlbmd0aCAmJlxuICAgICAgICAgICgoZXZlbnRUeXBlID0gbmV3IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICkpLFxuICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudFR5cGUsIGxpc3RlbmVyczogaGFuZGxlRXZlbnRGdW5jIH0pLFxuICAgICAgICAgIGZhbGxiYWNrRGF0YVxuICAgICAgICAgICAgPyAoZXZlbnRUeXBlLmRhdGEgPSBmYWxsYmFja0RhdGEpXG4gICAgICAgICAgICA6ICgoZmFsbGJhY2tEYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkpLFxuICAgICAgICAgICAgICBudWxsICE9PSBmYWxsYmFja0RhdGEgJiYgKGV2ZW50VHlwZS5kYXRhID0gZmFsbGJhY2tEYXRhKSkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGNhblVzZVRleHRJbnB1dEV2ZW50XG4gICAgICAgICAgPyBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpXG4gICAgICAgICAgOiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICApXG4gICAgICAgIChldmVudFR5cGUgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgXCJvbkJlZm9yZUlucHV0XCIpKSxcbiAgICAgICAgICAwIDwgZXZlbnRUeXBlLmxlbmd0aCAmJlxuICAgICAgICAgICAgKChoYW5kbGVFdmVudEZ1bmMgPSBuZXcgU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgICAgICAgICAgICAgXCJvbkJlZm9yZUlucHV0XCIsXG4gICAgICAgICAgICAgIFwiYmVmb3JlaW5wdXRcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiBoYW5kbGVFdmVudEZ1bmMsXG4gICAgICAgICAgICAgIGxpc3RlbmVyczogZXZlbnRUeXBlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChoYW5kbGVFdmVudEZ1bmMuZGF0YSA9IGZhbGxiYWNrRGF0YSkpO1xuICAgICAgZXh0cmFjdEV2ZW50cyQxKFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIHRhcmdldEluc3QsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgKTtcbiAgICB9XG4gICAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncyk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgbGlzdGVuZXIsIGN1cnJlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgIGN1cnJlbnRUYXJnZXQ6IGN1cnJlbnRUYXJnZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRGaWJlciwgcmVhY3ROYW1lKSB7XG4gIGZvciAoXG4gICAgdmFyIGNhcHR1cmVOYW1lID0gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCIsIGxpc3RlbmVycyA9IFtdO1xuICAgIG51bGwgIT09IHRhcmdldEZpYmVyO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UyID0gdGFyZ2V0RmliZXIsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UyLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UyID0gX2luc3RhbmNlMi50YWc7XG4gICAgKDUgIT09IF9pbnN0YW5jZTIgJiYgMjYgIT09IF9pbnN0YW5jZTIgJiYgMjcgIT09IF9pbnN0YW5jZTIpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoX2luc3RhbmNlMiA9IGdldExpc3RlbmVyKHRhcmdldEZpYmVyLCBjYXB0dXJlTmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy51bnNoaWZ0KFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSxcbiAgICAgIChfaW5zdGFuY2UyID0gZ2V0TGlzdGVuZXIodGFyZ2V0RmliZXIsIHJlYWN0TmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSk7XG4gICAgdGFyZ2V0RmliZXIgPSB0YXJnZXRGaWJlci5yZXR1cm47XG4gIH1cbiAgcmV0dXJuIGxpc3RlbmVycztcbn1cbmZ1bmN0aW9uIGdldFBhcmVudChpbnN0KSB7XG4gIGlmIChudWxsID09PSBpbnN0KSByZXR1cm4gbnVsbDtcbiAgZG8gaW5zdCA9IGluc3QucmV0dXJuO1xuICB3aGlsZSAoaW5zdCAmJiA1ICE9PSBpbnN0LnRhZyAmJiAyNyAhPT0gaW5zdC50YWcpO1xuICByZXR1cm4gaW5zdCA/IGluc3QgOiBudWxsO1xufVxuZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgZGlzcGF0Y2hRdWV1ZSxcbiAgZXZlbnQsXG4gIHRhcmdldCxcbiAgY29tbW9uLFxuICBpbkNhcHR1cmVQaGFzZVxuKSB7XG4gIGZvciAoXG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5fcmVhY3ROYW1lLCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBudWxsICE9PSB0YXJnZXQgJiYgdGFyZ2V0ICE9PSBjb21tb247XG5cbiAgKSB7XG4gICAgdmFyIF9pbnN0YW5jZTMgPSB0YXJnZXQsXG4gICAgICBhbHRlcm5hdGUgPSBfaW5zdGFuY2UzLmFsdGVybmF0ZSxcbiAgICAgIHN0YXRlTm9kZSA9IF9pbnN0YW5jZTMuc3RhdGVOb2RlO1xuICAgIF9pbnN0YW5jZTMgPSBfaW5zdGFuY2UzLnRhZztcbiAgICBpZiAobnVsbCAhPT0gYWx0ZXJuYXRlICYmIGFsdGVybmF0ZSA9PT0gY29tbW9uKSBicmVhaztcbiAgICAoNSAhPT0gX2luc3RhbmNlMyAmJiAyNiAhPT0gX2luc3RhbmNlMyAmJiAyNyAhPT0gX2luc3RhbmNlMykgfHxcbiAgICAgIG51bGwgPT09IHN0YXRlTm9kZSB8fFxuICAgICAgKChhbHRlcm5hdGUgPSBzdGF0ZU5vZGUpLFxuICAgICAgaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgPyAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMudW5zaGlmdChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgOiBpbkNhcHR1cmVQaGFzZSB8fFxuICAgICAgICAgICgoc3RhdGVOb2RlID0gZ2V0TGlzdGVuZXIodGFyZ2V0LCByZWdpc3RyYXRpb25OYW1lKSksXG4gICAgICAgICAgbnVsbCAhPSBzdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldCwgc3RhdGVOb2RlLCBhbHRlcm5hdGUpXG4gICAgICAgICAgICApKSk7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0LnJldHVybjtcbiAgfVxuICAwICE9PSBsaXN0ZW5lcnMubGVuZ3RoICYmXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IGV2ZW50LCBsaXN0ZW5lcnM6IGxpc3RlbmVycyB9KTtcbn1cbnZhciBOT1JNQUxJWkVfTkVXTElORVNfUkVHRVggPSAvXFxyXFxuPy9nLFxuICBOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVggPSAvXFx1MDAwMHxcXHVGRkZEL2c7XG5mdW5jdGlvbiBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUobWFya3VwKSB7XG4gIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG1hcmt1cCA/IG1hcmt1cCA6IFwiXCIgKyBtYXJrdXApXG4gICAgLnJlcGxhY2UoTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYLCBcIlxcblwiKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCwgXCJcIik7XG59XG5mdW5jdGlvbiBjaGVja0ZvclVubWF0Y2hlZFRleHQoc2VydmVyVGV4dCwgY2xpZW50VGV4dCkge1xuICBjbGllbnRUZXh0ID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFRleHQpO1xuICByZXR1cm4gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKHNlcnZlclRleHQpID09PSBjbGllbnRUZXh0ID8gITAgOiAhMTtcbn1cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5mdW5jdGlvbiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywga2V5LCB2YWx1ZSwgcHJvcHMsIHByZXZWYWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gXCJib2R5XCIgPT09IHRhZyB8fFxuICAgICAgICAgIChcInRleHRhcmVhXCIgPT09IHRhZyAmJiBcIlwiID09PSB2YWx1ZSkgfHxcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCB2YWx1ZSlcbiAgICAgICAgOiAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIHZhbHVlIHx8IFwiYmlnaW50XCIgPT09IHR5cGVvZiB2YWx1ZSkgJiZcbiAgICAgICAgICBcImJvZHlcIiAhPT0gdGFnICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjbGFzc05hbWVcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJjbGFzc1wiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidGFiSW5kZXhcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJ0YWJpbmRleFwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGlyXCI6XG4gICAgY2FzZSBcInJvbGVcIjpcbiAgICBjYXNlIFwidmlld0JveFwiOlxuICAgIGNhc2UgXCJ3aWR0aFwiOlxuICAgIGNhc2UgXCJoZWlnaHRcIjpcbiAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhdGFcIjpcbiAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0YWcpIHtcbiAgICAgICAgc2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZShkb21FbGVtZW50LCBcImRhdGFcIiwgdmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIFwic3JjXCI6XG4gICAgY2FzZSBcImhyZWZcIjpcbiAgICAgIGlmIChcIlwiID09PSB2YWx1ZSAmJiAoXCJhXCIgIT09IHRhZyB8fCBcImhyZWZcIiAhPT0ga2V5KSkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYWN0aW9uXCI6XG4gICAgY2FzZSBcImZvcm1BY3Rpb25cIjpcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgXCJqYXZhc2NyaXB0OnRocm93IG5ldyBFcnJvcignQSBSZWFjdCBmb3JtIHdhcyB1bmV4cGVjdGVkbHkgc3VibWl0dGVkLiBJZiB5b3UgY2FsbGVkIGZvcm0uc3VibWl0KCkgbWFudWFsbHksIGNvbnNpZGVyIHVzaW5nIGZvcm0ucmVxdWVzdFN1Ym1pdCgpIGluc3RlYWQuIElmIHlvdVxcXFwncmUgdHJ5aW5nIHRvIHVzZSBldmVudC5zdG9wUHJvcGFnYXRpb24oKSBpbiBhIHN1Ym1pdCBldmVudCBoYW5kbGVyLCBjb25zaWRlciBhbHNvIGNhbGxpbmcgZXZlbnQucHJldmVudERlZmF1bHQoKS4nKVwiXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgIChcImZvcm1BY3Rpb25cIiA9PT0ga2V5XG4gICAgICAgICAgICA/IChcImlucHV0XCIgIT09IHRhZyAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm5hbWVcIiwgcHJvcHMubmFtZSwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybUVuY1R5cGVcIixcbiAgICAgICAgICAgICAgICBwcm9wcy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtTWV0aG9kXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybU1ldGhvZCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgXCJmb3JtVGFyZ2V0XCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybVRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgICA6IChzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJlbmNUeXBlXCIsIHByb3BzLmVuY1R5cGUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwibWV0aG9kXCIsIHByb3BzLm1ldGhvZCwgcHJvcHMsIG51bGwpLFxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJ0YXJnZXRcIiwgcHJvcHMudGFyZ2V0LCBwcm9wcywgbnVsbCkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgIGlmIChudWxsICE9IHZhbHVlKSB7XG4gICAgICAgIGlmIChcIm9iamVjdFwiICE9PSB0eXBlb2YgdmFsdWUgfHwgIShcIl9faHRtbFwiIGluIHZhbHVlKSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYxKSk7XG4gICAgICAgIGtleSA9IHZhbHVlLl9faHRtbDtcbiAgICAgICAgaWYgKG51bGwgIT0ga2V5KSB7XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcHMuY2hpbGRyZW4pIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjApKTtcbiAgICAgICAgICBkb21FbGVtZW50LmlubmVySFRNTCA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICBkb21FbGVtZW50Lm11bHRpcGxlID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm11dGVkXCI6XG4gICAgICBkb21FbGVtZW50Lm11dGVkID1cbiAgICAgICAgdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiOlxuICAgIGNhc2UgXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJhdXRvRm9jdXNcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0hyZWZcIjpcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwieGxpbms6aHJlZlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBrZXkgPSBzYW5pdGl6ZVVSTChcIlwiICsgdmFsdWUpO1xuICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6aHJlZlwiLFxuICAgICAgICBrZXlcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY29udGVudEVkaXRhYmxlXCI6XG4gICAgY2FzZSBcInNwZWxsQ2hlY2tcIjpcbiAgICBjYXNlIFwiZHJhZ2dhYmxlXCI6XG4gICAgY2FzZSBcInZhbHVlXCI6XG4gICAgY2FzZSBcImF1dG9SZXZlcnNlXCI6XG4gICAgY2FzZSBcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIjpcbiAgICBjYXNlIFwiZm9jdXNhYmxlXCI6XG4gICAgY2FzZSBcInByZXNlcnZlQWxwaGFcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdmFsdWUgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBcIlwiICsgdmFsdWUpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbmVydFwiOlxuICAgIGNhc2UgXCJhbGxvd0Z1bGxTY3JlZW5cIjpcbiAgICBjYXNlIFwiYXN5bmNcIjpcbiAgICBjYXNlIFwiYXV0b1BsYXlcIjpcbiAgICBjYXNlIFwiY29udHJvbHNcIjpcbiAgICBjYXNlIFwiZGVmYXVsdFwiOlxuICAgIGNhc2UgXCJkZWZlclwiOlxuICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUGljdHVyZUluUGljdHVyZVwiOlxuICAgIGNhc2UgXCJkaXNhYmxlUmVtb3RlUGxheWJhY2tcIjpcbiAgICBjYXNlIFwiZm9ybU5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwiaGlkZGVuXCI6XG4gICAgY2FzZSBcImxvb3BcIjpcbiAgICBjYXNlIFwibm9Nb2R1bGVcIjpcbiAgICBjYXNlIFwibm9WYWxpZGF0ZVwiOlxuICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgY2FzZSBcInBsYXlzSW5saW5lXCI6XG4gICAgY2FzZSBcInJlYWRPbmx5XCI6XG4gICAgY2FzZSBcInJlcXVpcmVkXCI6XG4gICAgY2FzZSBcInJldmVyc2VkXCI6XG4gICAgY2FzZSBcInNjb3BlZFwiOlxuICAgIGNhc2UgXCJzZWFtbGVzc1wiOlxuICAgIGNhc2UgXCJpdGVtU2NvcGVcIjpcbiAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNhcHR1cmVcIjpcbiAgICBjYXNlIFwiZG93bmxvYWRcIjpcbiAgICAgICEwID09PSB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgOiAhMSAhPT0gdmFsdWUgJiZcbiAgICAgICAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbHNcIjpcbiAgICBjYXNlIFwicm93c1wiOlxuICAgIGNhc2UgXCJzaXplXCI6XG4gICAgY2FzZSBcInNwYW5cIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWUgJiZcbiAgICAgICFpc05hTih2YWx1ZSkgJiZcbiAgICAgIDEgPD0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicm93U3BhblwiOlxuICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgbnVsbCA9PSB2YWx1ZSB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgaXNOYU4odmFsdWUpXG4gICAgICAgID8gZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KVxuICAgICAgICA6IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBvcG92ZXJcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJiZWZvcmV0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJwb3BvdmVyXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FjdHVhdGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YWN0dWF0ZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua0FyY3JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6YXJjcm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1JvbGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6cm9sZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1Nob3dcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6c2hvd1wiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1RpdGxlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnRpdGxlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhsaW5rVHlwZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0eXBlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbEJhc2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6YmFzZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxMYW5nXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmxhbmdcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sU3BhY2VcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgICAgICAgXCJ4bWw6c3BhY2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaXNcIjpcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiaXNcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlubmVyVGV4dFwiOlxuICAgIGNhc2UgXCJ0ZXh0Q29udGVudFwiOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcbiAgICAgICAgISgyIDwga2V5Lmxlbmd0aCkgfHxcbiAgICAgICAgKFwib1wiICE9PSBrZXlbMF0gJiYgXCJPXCIgIT09IGtleVswXSkgfHxcbiAgICAgICAgKFwiblwiICE9PSBrZXlbMV0gJiYgXCJOXCIgIT09IGtleVsxXSlcbiAgICAgIClcbiAgICAgICAgKGtleSA9IGFsaWFzZXMuZ2V0KGtleSkgfHwga2V5KSxcbiAgICAgICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0UHJvcE9uQ3VzdG9tRWxlbWVudChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHZhbHVlLCBwcmV2VmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHZhbHVlXG4gICAgICAgID8gc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgXCJcIiArIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uU2Nyb2xsRW5kXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiAoZG9tRWxlbWVudC5vbmNsaWNrID0gbm9vcCQxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImlubmVySFRNTFwiOlxuICAgIGNhc2UgXCJyZWZcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoIXJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgYToge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIFwib1wiID09PSBrZXlbMF0gJiZcbiAgICAgICAgICAgIFwiblwiID09PSBrZXlbMV0gJiZcbiAgICAgICAgICAgICgocHJvcHMgPSBrZXkuZW5kc1dpdGgoXCJDYXB0dXJlXCIpKSxcbiAgICAgICAgICAgICh0YWcgPSBrZXkuc2xpY2UoMiwgcHJvcHMgPyBrZXkubGVuZ3RoIC0gNyA6IHZvaWQgMCkpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IGRvbUVsZW1lbnRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCksXG4gICAgICAgICAgICAocHJldlZhbHVlID0gbnVsbCAhPSBwcmV2VmFsdWUgPyBwcmV2VmFsdWVba2V5XSA6IG51bGwpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIGRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0YWcsIHByZXZWYWx1ZSwgcHJvcHMpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIChrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IG51bGwpXG4gICAgICAgICAgICAgICAgOiBkb21FbGVtZW50Lmhhc0F0dHJpYnV0ZShrZXkpICYmXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpKTtcbiAgICAgICAgICAgIGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0YWcsIHZhbHVlLCBwcm9wcyk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXkgaW4gZG9tRWxlbWVudFxuICAgICAgICAgICAgPyAoZG9tRWxlbWVudFtrZXldID0gdmFsdWUpXG4gICAgICAgICAgICA6ICEwID09PSB2YWx1ZVxuICAgICAgICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIilcbiAgICAgICAgICAgICAgOiBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIHByb3BzKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBcImRpdlwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgY2FzZSBcInN2Z1wiOlxuICAgIGNhc2UgXCJwYXRoXCI6XG4gICAgY2FzZSBcImFcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcImxpXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBoYXNTcmMgPSAhMSxcbiAgICAgICAgaGFzU3JjU2V0ID0gITEsXG4gICAgICAgIHByb3BLZXk7XG4gICAgICBmb3IgKHByb3BLZXkgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUpXG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1wiOlxuICAgICAgICAgICAgICAgIGhhc1NyYyA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwic3JjU2V0XCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gITA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXksIHByb3BWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBoYXNTcmNTZXQgJiZcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwic3JjU2V0XCIsIHByb3BzLnNyY1NldCwgcHJvcHMsIG51bGwpO1xuICAgICAgaGFzU3JjICYmIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1wiLCBwcm9wcy5zcmMsIHByb3BzLCBudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IChwcm9wS2V5ID0gcHJvcFZhbHVlID0gaGFzU3JjU2V0ID0gbnVsbCksXG4gICAgICAgIGNoZWNrZWQgPSBudWxsLFxuICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyYyBpbiBwcm9wcylcbiAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyYykpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlJDE4NiA9IHByb3BzW2hhc1NyY107XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlJDE4NilcbiAgICAgICAgICAgIHN3aXRjaCAoaGFzU3JjKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInR5cGVcIjpcbiAgICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdENoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BWYWx1ZSQxODY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICAgIHByb3BLZXkgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODYpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyYywgcHJvcFZhbHVlJDE4NiwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBpbml0SW5wdXQoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIHByb3BLZXksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHByb3BWYWx1ZSxcbiAgICAgICAgaGFzU3JjU2V0LFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgaGFzU3JjID0gcHJvcFZhbHVlID0gcHJvcEtleSA9IG51bGw7XG4gICAgICBmb3IgKGhhc1NyY1NldCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGhhc1NyY1NldCkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW2hhc1NyY1NldF0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoaGFzU3JjU2V0KSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibXVsdGlwbGVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGhhc1NyY1NldCwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gcHJvcEtleTtcbiAgICAgIHByb3BzID0gcHJvcFZhbHVlO1xuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9ICEhaGFzU3JjO1xuICAgICAgbnVsbCAhPSB0YWdcbiAgICAgICAgPyB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhaGFzU3JjLCB0YWcsICExKVxuICAgICAgICA6IG51bGwgIT0gcHJvcHMgJiYgdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgcHJvcHMsICEwKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcEtleSA9IGhhc1NyY1NldCA9IGhhc1NyYyA9IG51bGw7XG4gICAgICBmb3IgKHByb3BWYWx1ZSBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSkgJiZcbiAgICAgICAgICAoKGRlZmF1bHRWYWx1ZSA9IHByb3BzW3Byb3BWYWx1ZV0pLCBudWxsICE9IGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgaGFzU3JjU2V0ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBwcm9wS2V5ID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBkZWZhdWx0VmFsdWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcFZhbHVlLCBkZWZhdWx0VmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICBpbml0VGV4dGFyZWEoZG9tRWxlbWVudCwgaGFzU3JjLCBoYXNTcmNTZXQsIHByb3BLZXkpO1xuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgZm9yIChjaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW2NoZWNrZWRdKSwgbnVsbCAhPSBoYXNTcmMpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBoYXNTcmMgJiZcbiAgICAgICAgICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgaGFzU3JjO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBjaGVja2VkLCBoYXNTcmMsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpZnJhbWVcIjpcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yIChoYXNTcmMgPSAwOyBoYXNTcmMgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBoYXNTcmMrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaGFzU3JjXSwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRldGFpbHNcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICBjYXNlIFwic291cmNlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgY2FzZSBcImFyZWFcIjpcbiAgICBjYXNlIFwiYmFzZVwiOlxuICAgIGNhc2UgXCJiclwiOlxuICAgIGNhc2UgXCJjb2xcIjpcbiAgICBjYXNlIFwiaHJcIjpcbiAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwicGFyYW1cIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdENoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLCBudWxsICE9IGhhc1NyYylcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoZGVmYXVsdENoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTM3LCB0YWcpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0Q2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yIChwcm9wVmFsdWUkMTg2IGluIHByb3BzKVxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSQxODYpICYmXG4gICAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW3Byb3BWYWx1ZSQxODZdKSxcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gaGFzU3JjICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlJDE4NixcbiAgICAgICAgICAgICAgICBoYXNTcmMsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgdm9pZCAwXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbiAgZm9yIChkZWZhdWx0VmFsdWUgaW4gcHJvcHMpXG4gICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgIG51bGwgIT0gaGFzU3JjICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0VmFsdWUsIGhhc1NyYywgcHJvcHMsIG51bGwpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcHMsIG5leHRQcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICB2YXIgbmFtZSA9IG51bGwsXG4gICAgICAgIHR5cGUgPSBudWxsLFxuICAgICAgICB2YWx1ZSA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGwsXG4gICAgICAgIGxhc3REZWZhdWx0VmFsdWUgPSBudWxsLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgICB2YXIgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICAgIGlmIChsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgJiYgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3A7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHxcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSwgbnVsbCwgbmV4dFByb3BzLCBsYXN0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMDMgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBwcm9wS2V5ID0gbmV4dFByb3BzW3Byb3BLZXkkMjAzXTtcbiAgICAgICAgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleSQyMDNdO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjAzKSAmJlxuICAgICAgICAgIChudWxsICE9IHByb3BLZXkgfHwgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcEtleSQyMDMpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgIHR5cGUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgIG5hbWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gcHJvcEtleSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcHJvcEtleSAhPT0gbGFzdFByb3AgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgICAgcHJvcEtleSxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3RQcm9wXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgcHJvcEtleSA9IHZhbHVlID0gZGVmYXVsdFZhbHVlID0gcHJvcEtleSQyMDMgPSBudWxsO1xuICAgICAgZm9yICh0eXBlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wc1t0eXBlXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpICYmIG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBsYXN0RGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpIHx8XG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGZvciAobmFtZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHR5cGUgPSBuZXh0UHJvcHNbbmFtZV0pLFxuICAgICAgICAgIChsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3BzW25hbWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHR5cGUgfHwgbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkkMjAzID0gdHlwZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHR5cGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gdHlwZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHR5cGUgIT09IGxhc3REZWZhdWx0VmFsdWUgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gZGVmYXVsdFZhbHVlO1xuICAgICAgbGFzdFByb3BzID0gdmFsdWU7XG4gICAgICBuZXh0UHJvcHMgPSBwcm9wS2V5O1xuICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwM1xuICAgICAgICA/IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIHByb3BLZXkkMjAzLCAhMSlcbiAgICAgICAgOiAhIW5leHRQcm9wcyAhPT0gISFsYXN0UHJvcHMgJiZcbiAgICAgICAgICAobnVsbCAhPSB0YWdcbiAgICAgICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgdGFnLCAhMClcbiAgICAgICAgICAgIDogdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgbGFzdFByb3BzID8gW10gOiBcIlwiLCAhMSkpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgcHJvcEtleSA9IHByb3BLZXkkMjAzID0gbnVsbDtcbiAgICAgIGZvciAoZGVmYXVsdFZhbHVlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IGxhc3RQcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBuYW1lICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGRlZmF1bHRWYWx1ZSwgbnVsbCwgbmV4dFByb3BzLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKHZhbHVlIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IG5leHRQcm9wc1t2YWx1ZV0pLFxuICAgICAgICAgICh0eXBlID0gbGFzdFByb3BzW3ZhbHVlXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiAobnVsbCAhPSBuYW1lIHx8IG51bGwgIT0gdHlwZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDMgPSBuYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IG5hbWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IG5hbWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuYW1lICE9PSB0eXBlICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHZhbHVlLCBuYW1lLCBuZXh0UHJvcHMsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgIHVwZGF0ZVRleHRhcmVhKGRvbUVsZW1lbnQsIHByb3BLZXkkMjAzLCBwcm9wS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIxOSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjAzID0gbGFzdFByb3BzW3Byb3BLZXkkMjE5XSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjE5KSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIxOSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkkMjE5KSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9ICExO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMTksXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKGxhc3REZWZhdWx0VmFsdWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwMyA9IG5leHRQcm9wc1tsYXN0RGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbbGFzdERlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShsYXN0RGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgcHJvcEtleSQyMDMgIT09IHByb3BLZXkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHByb3BLZXkkMjAzIHx8IG51bGwgIT0gcHJvcEtleSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGxhc3REZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHByb3BLZXkkMjAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICBjYXNlIFwiYXJlYVwiOlxuICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgY2FzZSBcImJyXCI6XG4gICAgY2FzZSBcImNvbFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgIGNhc2UgXCJoclwiOlxuICAgIGNhc2UgXCJrZXlnZW5cIjpcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJwYXJhbVwiOlxuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIyNCBpbiBsYXN0UHJvcHMpXG4gICAgICAgIChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIyNF0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyNCkgJiZcbiAgICAgICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDMgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjQpICYmXG4gICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMjQsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDMpO1xuICAgICAgZm9yIChjaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbY2hlY2tlZF0pLFxuICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2NoZWNrZWRdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgIHByb3BLZXkkMjAzICE9PSBwcm9wS2V5ICYmXG4gICAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5JDIwMyB8fCBudWxsICE9IHByb3BLZXkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wS2V5JDIwMylcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBjaGVja2VkLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcEtleSQyMjkgaW4gbGFzdFByb3BzKVxuICAgICAgICAgIChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIyOV0pLFxuICAgICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI5KSAmJlxuICAgICAgICAgICAgICB2b2lkIDAgIT09IHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjkpICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMjksXG4gICAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwM1xuICAgICAgICAgICAgICApO1xuICAgICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgICAocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbZGVmYXVsdENoZWNrZWRdKSxcbiAgICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2RlZmF1bHRDaGVja2VkXSksXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRDaGVja2VkKSB8fFxuICAgICAgICAgICAgICBwcm9wS2V5JDIwMyA9PT0gcHJvcEtleSB8fFxuICAgICAgICAgICAgICAodm9pZCAwID09PSBwcm9wS2V5JDIwMyAmJiB2b2lkIDAgPT09IHByb3BLZXkpIHx8XG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDMsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIGZvciAodmFyIHByb3BLZXkkMjM0IGluIGxhc3RQcm9wcylcbiAgICAocHJvcEtleSQyMDMgPSBsYXN0UHJvcHNbcHJvcEtleSQyMzRdKSxcbiAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzNCkgJiZcbiAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjM0KSAmJlxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMzQsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDMpO1xuICBmb3IgKGxhc3RQcm9wIGluIG5leHRQcm9wcylcbiAgICAocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbbGFzdFByb3BdKSxcbiAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2xhc3RQcm9wXSksXG4gICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGxhc3RQcm9wKSB8fFxuICAgICAgICBwcm9wS2V5JDIwMyA9PT0gcHJvcEtleSB8fFxuICAgICAgICAobnVsbCA9PSBwcm9wS2V5JDIwMyAmJiBudWxsID09IHByb3BLZXkpIHx8XG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcCwgcHJvcEtleSQyMDMsIG5leHRQcm9wcywgcHJvcEtleSk7XG59XG52YXIgZXZlbnRzRW5hYmxlZCA9IG51bGwsXG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbmZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkge1xuICByZXR1cm4gOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gZ2V0T3duSG9zdENvbnRleHQobmFtZXNwYWNlVVJJKSB7XG4gIHN3aXRjaCAobmFtZXNwYWNlVVJJKSB7XG4gICAgY2FzZSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiOlxuICAgICAgcmV0dXJuIDI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChwYXJlbnROYW1lc3BhY2UsIHR5cGUpIHtcbiAgaWYgKDAgPT09IHBhcmVudE5hbWVzcGFjZSlcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgcmV0dXJuIDEgPT09IHBhcmVudE5hbWVzcGFjZSAmJiBcImZvcmVpZ25PYmplY3RcIiA9PT0gdHlwZVxuICAgID8gMFxuICAgIDogcGFyZW50TmFtZXNwYWNlO1xufVxuZnVuY3Rpb24gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICBcInRleHRhcmVhXCIgPT09IHR5cGUgfHxcbiAgICBcIm5vc2NyaXB0XCIgPT09IHR5cGUgfHxcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcIm51bWJlclwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBudWxsICE9PSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbnVsbCAhPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWwpXG4gICk7XG59XG52YXIgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIHNob3VsZEF0dGVtcHRFYWdlclRyYW5zaXRpb24oKSB7XG4gIHZhciBldmVudCA9IHdpbmRvdy5ldmVudDtcbiAgaWYgKGV2ZW50ICYmIFwicG9wc3RhdGVcIiA9PT0gZXZlbnQudHlwZSkge1xuICAgIGlmIChldmVudCA9PT0gY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50KSByZXR1cm4gITE7XG4gICAgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gZXZlbnQ7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IG51bGw7XG4gIHJldHVybiAhMTtcbn1cbnZhciBzY2hlZHVsZVRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IHZvaWQgMCxcbiAgY2FuY2VsVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IHZvaWQgMCxcbiAgbG9jYWxQcm9taXNlID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgUHJvbWlzZSA/IFByb21pc2UgOiB2b2lkIDAsXG4gIHNjaGVkdWxlTWljcm90YXNrID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBxdWV1ZU1pY3JvdGFza1xuICAgICAgPyBxdWV1ZU1pY3JvdGFza1xuICAgICAgOiBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jYWxQcm9taXNlXG4gICAgICAgID8gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxQcm9taXNlXG4gICAgICAgICAgICAgIC5yZXNvbHZlKG51bGwpXG4gICAgICAgICAgICAgIC50aGVuKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3JJbk5leHRUaWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogc2NoZWR1bGVUaW1lb3V0O1xuZnVuY3Rpb24gaGFuZGxlRXJyb3JJbk5leHRUaWNrKGVycm9yKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShwYXJlbnRJbnN0YW5jZSwgc3VzcGVuc2VJbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IHN1c3BlbnNlSW5zdGFuY2UsXG4gICAgZGVwdGggPSAwO1xuICBkbyB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICBpZiAobmV4dE5vZGUgJiYgOCA9PT0gbmV4dE5vZGUubm9kZVR5cGUpXG4gICAgICBpZiAoKChub2RlID0gbmV4dE5vZGUuZGF0YSksIFwiLyRcIiA9PT0gbm9kZSkpIHtcbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSB7XG4gICAgICAgICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobmV4dE5vZGUpO1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2UgKFwiJFwiICE9PSBub2RlICYmIFwiJD9cIiAhPT0gbm9kZSAmJiBcIiQhXCIgIT09IG5vZGUpIHx8IGRlcHRoKys7XG4gICAgbm9kZSA9IG5leHROb2RlO1xuICB9IHdoaWxlIChub2RlKTtcbiAgcmV0cnlJZkJsb2NrZWRPbihzdXNwZW5zZUluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KGNvbnRhaW5lcikge1xuICB2YXIgbmV4dE5vZGUgPSBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgbmV4dE5vZGUgJiYgMTAgPT09IG5leHROb2RlLm5vZGVUeXBlICYmIChuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nKTtcbiAgZm9yICg7IG5leHROb2RlOyApIHtcbiAgICB2YXIgbm9kZSA9IG5leHROb2RlO1xuICAgIG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmc7XG4gICAgc3dpdGNoIChub2RlLm5vZGVOYW1lKSB7XG4gICAgICBjYXNlIFwiSFRNTFwiOlxuICAgICAgY2FzZSBcIkhFQURcIjpcbiAgICAgIGNhc2UgXCJCT0RZXCI6XG4gICAgICAgIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KG5vZGUpO1xuICAgICAgICBkZXRhY2hEZWxldGVkSW5zdGFuY2Uobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSBcIlNDUklQVFwiOlxuICAgICAgY2FzZSBcIlNUWUxFXCI6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY2FzZSBcIkxJTktcIjpcbiAgICAgICAgaWYgKFwic3R5bGVzaGVldFwiID09PSBub2RlLnJlbC50b0xvd2VyQ2FzZSgpKSBjb250aW51ZTtcbiAgICB9XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBjYW5IeWRyYXRlSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBpblJvb3RPclNpbmdsZXRvbikge1xuICBmb3IgKDsgMSA9PT0gaW5zdGFuY2Uubm9kZVR5cGU7ICkge1xuICAgIHZhciBhbnlQcm9wcyA9IHByb3BzO1xuICAgIGlmIChpbnN0YW5jZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB0eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWluUm9vdE9yU2luZ2xldG9uICYmXG4gICAgICAgIChcIklOUFVUXCIgIT09IGluc3RhbmNlLm5vZGVOYW1lIHx8IFwiaGlkZGVuXCIgIT09IGluc3RhbmNlLnR5cGUpXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoIWluUm9vdE9yU2luZ2xldG9uKVxuICAgICAgaWYgKFwiaW5wdXRcIiA9PT0gdHlwZSAmJiBcImhpZGRlblwiID09PSBpbnN0YW5jZS50eXBlKSB7XG4gICAgICAgIHZhciBuYW1lID0gbnVsbCA9PSBhbnlQcm9wcy5uYW1lID8gbnVsbCA6IFwiXCIgKyBhbnlQcm9wcy5uYW1lO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJoaWRkZW5cIiA9PT0gYW55UHJvcHMudHlwZSAmJlxuICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09IG5hbWVcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH0gZWxzZSByZXR1cm4gaW5zdGFuY2U7XG4gICAgZWxzZSBpZiAoIWluc3RhbmNlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSlcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwibWV0YVwiOlxuICAgICAgICAgIGlmICghaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIikpIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICBuYW1lID0gaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwicmVsXCIpO1xuICAgICAgICAgIGlmIChcInN0eWxlc2hlZXRcIiA9PT0gbmFtZSAmJiBpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIikpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIG5hbWUgIT09IGFueVByb3BzLnJlbCB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSAhPT1cbiAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMuaHJlZiA/IG51bGwgOiBhbnlQcm9wcy5ocmVmKSB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmNyb3NzT3JpZ2luID8gbnVsbCA6IGFueVByb3BzLmNyb3NzT3JpZ2luKSB8fFxuICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLnRpdGxlID8gbnVsbCA6IGFueVByb3BzLnRpdGxlKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgICAgaWYgKGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKSkgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgICAgbmFtZSA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAobmFtZSAhPT0gKG51bGwgPT0gYW55UHJvcHMuc3JjID8gbnVsbCA6IGFueVByb3BzLnNyYykgfHxcbiAgICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSAhPT1cbiAgICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy50eXBlID8gbnVsbCA6IGFueVByb3BzLnR5cGUpIHx8XG4gICAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpICE9PVxuICAgICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmNyb3NzT3JpZ2luID8gbnVsbCA6IGFueVByb3BzLmNyb3NzT3JpZ2luKSkgJiZcbiAgICAgICAgICAgIG5hbWUgJiZcbiAgICAgICAgICAgIGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImFzeW5jXCIpICYmXG4gICAgICAgICAgICAhaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiaXRlbXByb3BcIilcbiAgICAgICAgICApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfVxuICAgIGluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoaW5zdGFuY2UubmV4dFNpYmxpbmcpO1xuICAgIGlmIChudWxsID09PSBpbnN0YW5jZSkgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjYW5IeWRyYXRlVGV4dEluc3RhbmNlKGluc3RhbmNlLCB0ZXh0LCBpblJvb3RPclNpbmdsZXRvbikge1xuICBpZiAoXCJcIiA9PT0gdGV4dCkgcmV0dXJuIG51bGw7XG4gIGZvciAoOyAzICE9PSBpbnN0YW5jZS5ub2RlVHlwZTsgKSB7XG4gICAgaWYgKFxuICAgICAgKDEgIT09IGluc3RhbmNlLm5vZGVUeXBlIHx8XG4gICAgICAgIFwiSU5QVVRcIiAhPT0gaW5zdGFuY2Uubm9kZU5hbWUgfHxcbiAgICAgICAgXCJoaWRkZW5cIiAhPT0gaW5zdGFuY2UudHlwZSkgJiZcbiAgICAgICFpblJvb3RPclNpbmdsZXRvblxuICAgIClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoaW5zdGFuY2UubmV4dFNpYmxpbmcpO1xuICAgIGlmIChudWxsID09PSBpbnN0YW5jZSkgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gZ2V0TmV4dEh5ZHJhdGFibGUobm9kZSkge1xuICBmb3IgKDsgbnVsbCAhPSBub2RlOyBub2RlID0gbm9kZS5uZXh0U2libGluZykge1xuICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgaWYgKDEgPT09IG5vZGVUeXBlIHx8IDMgPT09IG5vZGVUeXBlKSBicmVhaztcbiAgICBpZiAoOCA9PT0gbm9kZVR5cGUpIHtcbiAgICAgIG5vZGVUeXBlID0gbm9kZS5kYXRhO1xuICAgICAgaWYgKFxuICAgICAgICBcIiRcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkIVwiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIiQ/XCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRiFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCJGXCIgPT09IG5vZGVUeXBlXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgaWYgKFwiLyRcIiA9PT0gbm9kZVR5cGUpIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0SW5zdGFuY2UpIHtcbiAgdGFyZ2V0SW5zdGFuY2UgPSB0YXJnZXRJbnN0YW5jZS5wcmV2aW91c1NpYmxpbmc7XG4gIGZvciAodmFyIGRlcHRoID0gMDsgdGFyZ2V0SW5zdGFuY2U7ICkge1xuICAgIGlmICg4ID09PSB0YXJnZXRJbnN0YW5jZS5ub2RlVHlwZSkge1xuICAgICAgdmFyIGRhdGEgPSB0YXJnZXRJbnN0YW5jZS5kYXRhO1xuICAgICAgaWYgKFwiJFwiID09PSBkYXRhIHx8IFwiJCFcIiA9PT0gZGF0YSB8fCBcIiQ/XCIgPT09IGRhdGEpIHtcbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSByZXR1cm4gdGFyZ2V0SW5zdGFuY2U7XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2UgXCIvJFwiID09PSBkYXRhICYmIGRlcHRoKys7XG4gICAgfVxuICAgIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVNpbmdsZXRvbkluc3RhbmNlKHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAgcHJvcHMgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImh0bWxcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUyKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiaGVhZFwiOlxuICAgICAgdHlwZSA9IHByb3BzLmhlYWQ7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUzKSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBjYXNlIFwiYm9keVwiOlxuICAgICAgdHlwZSA9IHByb3BzLmJvZHk7XG4gICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDU0KSk7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTEpKTtcbiAgfVxufVxudmFyIHByZWxvYWRQcm9wc01hcCA9IG5ldyBNYXAoKSxcbiAgcHJlY29ubmVjdHNTZXQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBnZXRIb2lzdGFibGVSb290KGNvbnRhaW5lcikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGFpbmVyLmdldFJvb3ROb2RlXG4gICAgPyBjb250YWluZXIuZ2V0Um9vdE5vZGUoKVxuICAgIDogY29udGFpbmVyLm93bmVyRG9jdW1lbnQ7XG59XG52YXIgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZDtcblJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmQgPSB7XG4gIGY6IGZsdXNoU3luY1dvcmssXG4gIHI6IHJlcXVlc3RGb3JtUmVzZXQsXG4gIEQ6IHByZWZldGNoRE5TLFxuICBDOiBwcmVjb25uZWN0LFxuICBMOiBwcmVsb2FkLFxuICBtOiBwcmVsb2FkTW9kdWxlLFxuICBYOiBwcmVpbml0U2NyaXB0LFxuICBTOiBwcmVpbml0U3R5bGUsXG4gIE06IHByZWluaXRNb2R1bGVTY3JpcHRcbn07XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrKCkge1xuICB2YXIgcHJldmlvdXNXYXNSZW5kZXJpbmcgPSBwcmV2aW91c0Rpc3BhdGNoZXIuZigpLFxuICAgIHdhc1JlbmRlcmluZyA9IGZsdXNoU3luY1dvcmskMSgpO1xuICByZXR1cm4gcHJldmlvdXNXYXNSZW5kZXJpbmcgfHwgd2FzUmVuZGVyaW5nO1xufVxuZnVuY3Rpb24gcmVxdWVzdEZvcm1SZXNldChmb3JtKSB7XG4gIHZhciBmb3JtSW5zdCA9IGdldEluc3RhbmNlRnJvbU5vZGUoZm9ybSk7XG4gIG51bGwgIT09IGZvcm1JbnN0ICYmIDUgPT09IGZvcm1JbnN0LnRhZyAmJiBcImZvcm1cIiA9PT0gZm9ybUluc3QudHlwZVxuICAgID8gcmVxdWVzdEZvcm1SZXNldCQxKGZvcm1JbnN0KVxuICAgIDogcHJldmlvdXNEaXNwYXRjaGVyLnIoZm9ybSk7XG59XG52YXIgZ2xvYmFsRG9jdW1lbnQgPSBcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgZG9jdW1lbnQgPyBudWxsIDogZG9jdW1lbnQ7XG5mdW5jdGlvbiBwcmVjb25uZWN0QXMocmVsLCBocmVmLCBjcm9zc09yaWdpbikge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBocmVmKSB7XG4gICAgdmFyIGxpbWl0ZWRFc2NhcGVkSHJlZiA9XG4gICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpO1xuICAgIGxpbWl0ZWRFc2NhcGVkSHJlZiA9XG4gICAgICAnbGlua1tyZWw9XCInICsgcmVsICsgJ1wiXVtocmVmPVwiJyArIGxpbWl0ZWRFc2NhcGVkSHJlZiArICdcIl0nO1xuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBjcm9zc09yaWdpbiAmJlxuICAgICAgKGxpbWl0ZWRFc2NhcGVkSHJlZiArPSAnW2Nyb3Nzb3JpZ2luPVwiJyArIGNyb3NzT3JpZ2luICsgJ1wiXScpO1xuICAgIHByZWNvbm5lY3RzU2V0LmhhcyhsaW1pdGVkRXNjYXBlZEhyZWYpIHx8XG4gICAgICAocHJlY29ubmVjdHNTZXQuYWRkKGxpbWl0ZWRFc2NhcGVkSHJlZiksXG4gICAgICAocmVsID0geyByZWw6IHJlbCwgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLCBocmVmOiBocmVmIH0pLFxuICAgICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGxpbWl0ZWRFc2NhcGVkSHJlZikgJiZcbiAgICAgICAgKChocmVmID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGhyZWYsIFwibGlua1wiLCByZWwpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGhyZWYpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoaHJlZikpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlZmV0Y2hETlMoaHJlZikge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuRChocmVmKTtcbiAgcHJlY29ubmVjdEFzKFwiZG5zLXByZWZldGNoXCIsIGhyZWYsIG51bGwpO1xufVxuZnVuY3Rpb24gcHJlY29ubmVjdChocmVmLCBjcm9zc09yaWdpbikge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuQyhocmVmLCBjcm9zc09yaWdpbik7XG4gIHByZWNvbm5lY3RBcyhcInByZWNvbm5lY3RcIiwgaHJlZiwgY3Jvc3NPcmlnaW4pO1xufVxuZnVuY3Rpb24gcHJlbG9hZChocmVmLCBhcywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuTChocmVmLCBhcywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYgJiYgYXMpIHtcbiAgICB2YXIgcHJlbG9hZFNlbGVjdG9yID1cbiAgICAgICdsaW5rW3JlbD1cInByZWxvYWRcIl1bYXM9XCInICtcbiAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoYXMpICtcbiAgICAgICdcIl0nO1xuICAgIFwiaW1hZ2VcIiA9PT0gYXNcbiAgICAgID8gb3B0aW9ucyAmJiBvcHRpb25zLmltYWdlU3JjU2V0XG4gICAgICAgID8gKChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICdbaW1hZ2VzcmNzZXQ9XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgIG9wdGlvbnMuaW1hZ2VTcmNTZXRcbiAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgJ1wiXScpLFxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU2l6ZXMgJiZcbiAgICAgICAgICAgIChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICAgJ1tpbWFnZXNpemVzPVwiJyArXG4gICAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5pbWFnZVNpemVzXG4gICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAnXCJdJykpXG4gICAgICAgIDogKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICAgJ1tocmVmPVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICtcbiAgICAgICAgICAgICdcIl0nKVxuICAgICAgOiAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgJ1tocmVmPVwiJyArXG4gICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICAgJ1wiXScpO1xuICAgIHZhciBrZXkgPSBwcmVsb2FkU2VsZWN0b3I7XG4gICAgc3dpdGNoIChhcykge1xuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgIGtleSA9IGdldFN0eWxlS2V5KGhyZWYpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KGhyZWYpO1xuICAgIH1cbiAgICBwcmVsb2FkUHJvcHNNYXAuaGFzKGtleSkgfHxcbiAgICAgICgoaHJlZiA9IGFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgaHJlZjpcbiAgICAgICAgICAgIFwiaW1hZ2VcIiA9PT0gYXMgJiYgb3B0aW9ucyAmJiBvcHRpb25zLmltYWdlU3JjU2V0ID8gdm9pZCAwIDogaHJlZixcbiAgICAgICAgICBhczogYXNcbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKSksXG4gICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KGtleSwgaHJlZiksXG4gICAgICBudWxsICE9PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZFNlbGVjdG9yKSB8fFxuICAgICAgICAoXCJzdHlsZVwiID09PSBhcyAmJlxuICAgICAgICAgIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSB8fFxuICAgICAgICAoXCJzY3JpcHRcIiA9PT0gYXMgJiZcbiAgICAgICAgICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSB8fFxuICAgICAgICAoKGFzID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGFzLCBcImxpbmtcIiwgaHJlZiksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoYXMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYXMpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWxvYWRNb2R1bGUoaHJlZiwgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIubShocmVmLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgaHJlZikge1xuICAgIHZhciBhcyA9IG9wdGlvbnMgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgPyBvcHRpb25zLmFzIDogXCJzY3JpcHRcIixcbiAgICAgIHByZWxvYWRTZWxlY3RvciA9XG4gICAgICAgICdsaW5rW3JlbD1cIm1vZHVsZXByZWxvYWRcIl1bYXM9XCInICtcbiAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhhcykgK1xuICAgICAgICAnXCJdW2hyZWY9XCInICtcbiAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICdcIl0nLFxuICAgICAga2V5ID0gcHJlbG9hZFNlbGVjdG9yO1xuICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgIGNhc2UgXCJhdWRpb3dvcmtsZXRcIjpcbiAgICAgIGNhc2UgXCJwYWludHdvcmtsZXRcIjpcbiAgICAgIGNhc2UgXCJzZXJ2aWNld29ya2VyXCI6XG4gICAgICBjYXNlIFwic2hhcmVkd29ya2VyXCI6XG4gICAgICBjYXNlIFwid29ya2VyXCI6XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGtleSA9IGdldFNjcmlwdEtleShocmVmKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIXByZWxvYWRQcm9wc01hcC5oYXMoa2V5KSAmJlxuICAgICAgKChocmVmID0gYXNzaWduKHsgcmVsOiBcIm1vZHVsZXByZWxvYWRcIiwgaHJlZjogaHJlZiB9LCBvcHRpb25zKSksXG4gICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KGtleSwgaHJlZiksXG4gICAgICBudWxsID09PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJlbG9hZFNlbGVjdG9yKSlcbiAgICApIHtcbiAgICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgICAgY2FzZSBcImF1ZGlvd29ya2xldFwiOlxuICAgICAgICBjYXNlIFwicGFpbnR3b3JrbGV0XCI6XG4gICAgICAgIGNhc2UgXCJzZXJ2aWNld29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJzaGFyZWR3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcIndvcmtlclwiOlxuICAgICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgICAgaWYgKG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhhcywgXCJsaW5rXCIsIGhyZWYpO1xuICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShhcyk7XG4gICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYXMpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdFN0eWxlKGhyZWYsIHByZWNlZGVuY2UsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLlMoaHJlZiwgcHJlY2VkZW5jZSwgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU3R5bGVzLFxuICAgICAga2V5ID0gZ2V0U3R5bGVLZXkoaHJlZik7XG4gICAgcHJlY2VkZW5jZSA9IHByZWNlZGVuY2UgfHwgXCJkZWZhdWx0XCI7XG4gICAgdmFyIHJlc291cmNlID0gc3R5bGVzLmdldChrZXkpO1xuICAgIGlmICghcmVzb3VyY2UpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHsgbG9hZGluZzogMCwgcHJlbG9hZDogbnVsbCB9O1xuICAgICAgaWYgKFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpXG4gICAgICAgICkpXG4gICAgICApXG4gICAgICAgIHN0YXRlLmxvYWRpbmcgPSA1O1xuICAgICAgZWxzZSB7XG4gICAgICAgIGhyZWYgPSBhc3NpZ24oXG4gICAgICAgICAgeyByZWw6IFwic3R5bGVzaGVldFwiLCBocmVmOiBocmVmLCBcImRhdGEtcHJlY2VkZW5jZVwiOiBwcmVjZWRlbmNlIH0sXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoaHJlZiwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBsaW5rID0gKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSk7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUobGluayk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGxpbmssIFwibGlua1wiLCBocmVmKTtcbiAgICAgICAgbGluay5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBsaW5rLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgbGluay5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUubG9hZGluZyB8PSAxO1xuICAgICAgICB9KTtcbiAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gMjtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChyZXNvdXJjZSwgcHJlY2VkZW5jZSwgb3duZXJEb2N1bWVudCk7XG4gICAgICB9XG4gICAgICByZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgfTtcbiAgICAgIHN0eWxlcy5zZXQoa2V5LCByZXNvdXJjZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVpbml0U2NyaXB0KHNyYywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuWChzcmMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBzcmMpIHtcbiAgICB2YXIgc2NyaXB0cyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVNjcmlwdHMsXG4gICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoc3JjKSxcbiAgICAgIHJlc291cmNlID0gc2NyaXB0cy5nZXQoa2V5KTtcbiAgICByZXNvdXJjZSB8fFxuICAgICAgKChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpLFxuICAgICAgcmVzb3VyY2UgfHxcbiAgICAgICAgKChzcmMgPSBhc3NpZ24oeyBzcmM6IHNyYywgYXN5bmM6ICEwIH0sIG9wdGlvbnMpKSxcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc3JjLCBvcHRpb25zKSxcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShyZXNvdXJjZSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHJlc291cmNlLCBcImxpbmtcIiwgc3JjKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHJlc291cmNlKSksXG4gICAgICAocmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBudWxsXG4gICAgICB9KSxcbiAgICAgIHNjcmlwdHMuc2V0KGtleSwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdE1vZHVsZVNjcmlwdChzcmMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLk0oc3JjLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgc3JjKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTY3JpcHRzLFxuICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KHNyYyksXG4gICAgICByZXNvdXJjZSA9IHNjcmlwdHMuZ2V0KGtleSk7XG4gICAgcmVzb3VyY2UgfHxcbiAgICAgICgocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSxcbiAgICAgIHJlc291cmNlIHx8XG4gICAgICAgICgoc3JjID0gYXNzaWduKHsgc3JjOiBzcmMsIGFzeW5jOiAhMCwgdHlwZTogXCJtb2R1bGVcIiB9LCBvcHRpb25zKSksXG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNyYywgb3B0aW9ucyksXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUocmVzb3VyY2UpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhyZXNvdXJjZSwgXCJsaW5rXCIsIHNyYyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChyZXNvdXJjZSkpLFxuICAgICAgKHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgfSksXG4gICAgICBzY3JpcHRzLnNldChrZXksIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlc291cmNlKHR5cGUsIGN1cnJlbnRQcm9wcywgcGVuZGluZ1Byb3BzLCBjdXJyZW50UmVzb3VyY2UpIHtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQpXG4gICAgPyBnZXRIb2lzdGFibGVSb290KEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdClcbiAgICA6IG51bGw7XG4gIGlmICghSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0NikpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5wcmVjZWRlbmNlICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMuaHJlZlxuICAgICAgICA/ICgoY3VycmVudFByb3BzID0gZ2V0U3R5bGVLZXkocGVuZGluZ1Byb3BzLmhyZWYpKSxcbiAgICAgICAgICAocGVuZGluZ1Byb3BzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3QoXG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICApLmhvaXN0YWJsZVN0eWxlcyksXG4gICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IHBlbmRpbmdQcm9wcy5nZXQoY3VycmVudFByb3BzKSksXG4gICAgICAgICAgY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJzdHlsZVwiLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICAgIHN0YXRlOiBudWxsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBlbmRpbmdQcm9wcy5zZXQoY3VycmVudFByb3BzLCBjdXJyZW50UmVzb3VyY2UpKSxcbiAgICAgICAgICBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgIDogeyB0eXBlOiBcInZvaWRcIiwgaW5zdGFuY2U6IG51bGwsIGNvdW50OiAwLCBzdGF0ZTogbnVsbCB9O1xuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3R5bGVzaGVldFwiID09PSBwZW5kaW5nUHJvcHMucmVsICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMuaHJlZiAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLnByZWNlZGVuY2VcbiAgICAgICkge1xuICAgICAgICB0eXBlID0gZ2V0U3R5bGVLZXkocGVuZGluZ1Byb3BzLmhyZWYpO1xuICAgICAgICB2YXIgc3R5bGVzJDI0MiA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgKS5ob2lzdGFibGVTdHlsZXMsXG4gICAgICAgICAgcmVzb3VyY2UkMjQzID0gc3R5bGVzJDI0Mi5nZXQodHlwZSk7XG4gICAgICAgIHJlc291cmNlJDI0MyB8fFxuICAgICAgICAgICgoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5vd25lckRvY3VtZW50IHx8IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCksXG4gICAgICAgICAgKHJlc291cmNlJDI0MyA9IHtcbiAgICAgICAgICAgIHR5cGU6IFwic3R5bGVzaGVldFwiLFxuICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIHN0YXRlOiB7IGxvYWRpbmc6IDAsIHByZWxvYWQ6IG51bGwgfVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHN0eWxlcyQyNDIuc2V0KHR5cGUsIHJlc291cmNlJDI0MyksXG4gICAgICAgICAgKHN0eWxlcyQyNDIgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkodHlwZSlcbiAgICAgICAgICApKSAmJlxuICAgICAgICAgICAgIXN0eWxlcyQyNDIuX3AgJiZcbiAgICAgICAgICAgICgocmVzb3VyY2UkMjQzLmluc3RhbmNlID0gc3R5bGVzJDI0MiksXG4gICAgICAgICAgICAocmVzb3VyY2UkMjQzLnN0YXRlLmxvYWRpbmcgPSA1KSksXG4gICAgICAgICAgcHJlbG9hZFByb3BzTWFwLmhhcyh0eXBlKSB8fFxuICAgICAgICAgICAgKChwZW5kaW5nUHJvcHMgPSB7XG4gICAgICAgICAgICAgIHJlbDogXCJwcmVsb2FkXCIsXG4gICAgICAgICAgICAgIGFzOiBcInN0eWxlXCIsXG4gICAgICAgICAgICAgIGhyZWY6IHBlbmRpbmdQcm9wcy5ocmVmLFxuICAgICAgICAgICAgICBjcm9zc09yaWdpbjogcGVuZGluZ1Byb3BzLmNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICBpbnRlZ3JpdHk6IHBlbmRpbmdQcm9wcy5pbnRlZ3JpdHksXG4gICAgICAgICAgICAgIG1lZGlhOiBwZW5kaW5nUHJvcHMubWVkaWEsXG4gICAgICAgICAgICAgIGhyZWZMYW5nOiBwZW5kaW5nUHJvcHMuaHJlZkxhbmcsXG4gICAgICAgICAgICAgIHJlZmVycmVyUG9saWN5OiBwZW5kaW5nUHJvcHMucmVmZXJyZXJQb2xpY3lcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcHJlbG9hZFByb3BzTWFwLnNldCh0eXBlLCBwZW5kaW5nUHJvcHMpLFxuICAgICAgICAgICAgc3R5bGVzJDI0MiB8fFxuICAgICAgICAgICAgICBwcmVsb2FkU3R5bGVzaGVldChcbiAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQsXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UkMjQzLnN0YXRlXG4gICAgICAgICAgICAgICkpKTtcbiAgICAgICAgaWYgKGN1cnJlbnRQcm9wcyAmJiBudWxsID09PSBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjgsIFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIHJlc291cmNlJDI0MztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UHJvcHMgJiYgbnVsbCAhPT0gY3VycmVudFJlc291cmNlKVxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyOSwgXCJcIikpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnRQcm9wcyA9IHBlbmRpbmdQcm9wcy5hc3luYyksXG4gICAgICAgIChwZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHMuc3JjKSxcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcyAmJlxuICAgICAgICBjdXJyZW50UHJvcHMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY3VycmVudFByb3BzICYmXG4gICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBjdXJyZW50UHJvcHNcbiAgICAgICAgICA/ICgoY3VycmVudFByb3BzID0gZ2V0U2NyaXB0S2V5KHBlbmRpbmdQcm9wcykpLFxuICAgICAgICAgICAgKHBlbmRpbmdQcm9wcyA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICkuaG9pc3RhYmxlU2NyaXB0cyksXG4gICAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gcGVuZGluZ1Byb3BzLmdldChjdXJyZW50UHJvcHMpKSxcbiAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICAgIHN0YXRlOiBudWxsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBwZW5kaW5nUHJvcHMuc2V0KGN1cnJlbnRQcm9wcywgY3VycmVudFJlc291cmNlKSksXG4gICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgICAgOiB7IHR5cGU6IFwidm9pZFwiLCBpbnN0YW5jZTogbnVsbCwgY291bnQ6IDAsIHN0YXRlOiBudWxsIH1cbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQ0LCB0eXBlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN0eWxlS2V5KGhyZWYpIHtcbiAgcmV0dXJuICdocmVmPVwiJyArIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgKyAnXCInO1xufVxuZnVuY3Rpb24gZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpIHtcbiAgcmV0dXJuICdsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl1bJyArIGtleSArIFwiXVwiO1xufVxuZnVuY3Rpb24gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHJhd1Byb3BzKSB7XG4gIHJldHVybiBhc3NpZ24oe30sIHJhd1Byb3BzLCB7XG4gICAgXCJkYXRhLXByZWNlZGVuY2VcIjogcmF3UHJvcHMucHJlY2VkZW5jZSxcbiAgICBwcmVjZWRlbmNlOiBudWxsXG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlbG9hZFN0eWxlc2hlZXQob3duZXJEb2N1bWVudCwga2V5LCBwcmVsb2FkUHJvcHMsIHN0YXRlKSB7XG4gIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGlua1tyZWw9XCJwcmVsb2FkXCJdW2FzPVwic3R5bGVcIl1bJyArIGtleSArIFwiXVwiKVxuICAgID8gKHN0YXRlLmxvYWRpbmcgPSAxKVxuICAgIDogKChrZXkgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSxcbiAgICAgIChzdGF0ZS5wcmVsb2FkID0ga2V5KSxcbiAgICAgIGtleS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUubG9hZGluZyB8PSAxKTtcbiAgICAgIH0pLFxuICAgICAga2V5LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoc3RhdGUubG9hZGluZyB8PSAyKTtcbiAgICAgIH0pLFxuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoa2V5LCBcImxpbmtcIiwgcHJlbG9hZFByb3BzKSxcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoa2V5KSxcbiAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChrZXkpKTtcbn1cbmZ1bmN0aW9uIGdldFNjcmlwdEtleShzcmMpIHtcbiAgcmV0dXJuICdbc3JjPVwiJyArIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoc3JjKSArICdcIl0nO1xufVxuZnVuY3Rpb24gZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkge1xuICByZXR1cm4gXCJzY3JpcHRbYXN5bmNdXCIgKyBrZXk7XG59XG5mdW5jdGlvbiBhY3F1aXJlUmVzb3VyY2UoaG9pc3RhYmxlUm9vdCwgcmVzb3VyY2UsIHByb3BzKSB7XG4gIHJlc291cmNlLmNvdW50Kys7XG4gIGlmIChudWxsID09PSByZXNvdXJjZS5pbnN0YW5jZSlcbiAgICBzd2l0Y2ggKHJlc291cmNlLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgJ3N0eWxlW2RhdGEtaHJlZn49XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMocHJvcHMuaHJlZikgK1xuICAgICAgICAgICAgJ1wiXSdcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGluc3RhbmNlKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKSxcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgdmFyIHN0eWxlUHJvcHMgPSBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgXCJkYXRhLWhyZWZcIjogcHJvcHMuaHJlZixcbiAgICAgICAgICBcImRhdGEtcHJlY2VkZW5jZVwiOiBwcm9wcy5wcmVjZWRlbmNlLFxuICAgICAgICAgIGhyZWY6IG51bGwsXG4gICAgICAgICAgcHJlY2VkZW5jZTogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgaW5zdGFuY2UgPSAoaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3QpLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJzdHlsZVwiXG4gICAgICAgICk7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSwgXCJzdHlsZVwiLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJvcHMucHJlY2VkZW5jZSwgaG9pc3RhYmxlUm9vdCk7XG4gICAgICAgIHJldHVybiAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSk7XG4gICAgICBjYXNlIFwic3R5bGVzaGVldFwiOlxuICAgICAgICBzdHlsZVByb3BzID0gZ2V0U3R5bGVLZXkocHJvcHMuaHJlZik7XG4gICAgICAgIHZhciBpbnN0YW5jZSQyNDggPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShzdHlsZVByb3BzKVxuICAgICAgICApO1xuICAgICAgICBpZiAoaW5zdGFuY2UkMjQ4KVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0KSxcbiAgICAgICAgICAgIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlJDI0OCksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlJDI0OCksXG4gICAgICAgICAgICBpbnN0YW5jZSQyNDhcbiAgICAgICAgICApO1xuICAgICAgICBpbnN0YW5jZSA9IHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhwcm9wcyk7XG4gICAgICAgIChzdHlsZVByb3BzID0gcHJlbG9hZFByb3BzTWFwLmdldChzdHlsZVByb3BzKSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoaW5zdGFuY2UsIHN0eWxlUHJvcHMpO1xuICAgICAgICBpbnN0YW5jZSQyNDggPSAoXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3RcbiAgICAgICAgKS5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSQyNDgpO1xuICAgICAgICB2YXIgbGlua0luc3RhbmNlID0gaW5zdGFuY2UkMjQ4O1xuICAgICAgICBsaW5rSW5zdGFuY2UuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgbGlua0luc3RhbmNlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgbGlua0luc3RhbmNlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSQyNDgsIFwibGlua1wiLCBpbnN0YW5jZSk7XG4gICAgICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSQyNDgsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UkMjQ4KTtcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgaW5zdGFuY2UkMjQ4ID0gZ2V0U2NyaXB0S2V5KHByb3BzLnNyYyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoc3R5bGVQcm9wcyA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShpbnN0YW5jZSQyNDgpXG4gICAgICAgICAgKSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBzdHlsZVByb3BzKSxcbiAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoc3R5bGVQcm9wcyksXG4gICAgICAgICAgICBzdHlsZVByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgaW5zdGFuY2UgPSBwcm9wcztcbiAgICAgICAgaWYgKChzdHlsZVByb3BzID0gcHJlbG9hZFByb3BzTWFwLmdldChpbnN0YW5jZSQyNDgpKSlcbiAgICAgICAgICAoaW5zdGFuY2UgPSBhc3NpZ24oe30sIHByb3BzKSksXG4gICAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChpbnN0YW5jZSwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgICAgc3R5bGVQcm9wcyA9IGhvaXN0YWJsZVJvb3QuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShzdHlsZVByb3BzKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoc3R5bGVQcm9wcywgXCJsaW5rXCIsIGluc3RhbmNlKTtcbiAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlUHJvcHMpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gc3R5bGVQcm9wcyk7XG4gICAgICBjYXNlIFwidm9pZFwiOlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQzLCByZXNvdXJjZS50eXBlKSk7XG4gICAgfVxuICBlbHNlXG4gICAgXCJzdHlsZXNoZWV0XCIgPT09IHJlc291cmNlLnR5cGUgJiZcbiAgICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkgJiZcbiAgICAgICgoaW5zdGFuY2UgPSByZXNvdXJjZS5pbnN0YW5jZSksXG4gICAgICAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0KSxcbiAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpKTtcbiAgcmV0dXJuIHJlc291cmNlLmluc3RhbmNlO1xufVxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJlY2VkZW5jZSwgcm9vdCkge1xuICBmb3IgKFxuICAgIHZhciBub2RlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgJ2xpbmtbcmVsPVwic3R5bGVzaGVldFwiXVtkYXRhLXByZWNlZGVuY2VdLHN0eWxlW2RhdGEtcHJlY2VkZW5jZV0nXG4gICAgICApLFxuICAgICAgbGFzdCA9IG5vZGVzLmxlbmd0aCA/IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdIDogbnVsbCxcbiAgICAgIHByaW9yID0gbGFzdCxcbiAgICAgIGkgPSAwO1xuICAgIGkgPCBub2Rlcy5sZW5ndGg7XG4gICAgaSsrXG4gICkge1xuICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgaWYgKG5vZGUuZGF0YXNldC5wcmVjZWRlbmNlID09PSBwcmVjZWRlbmNlKSBwcmlvciA9IG5vZGU7XG4gICAgZWxzZSBpZiAocHJpb3IgIT09IGxhc3QpIGJyZWFrO1xuICB9XG4gIHByaW9yXG4gICAgPyBwcmlvci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnN0YW5jZSwgcHJpb3IubmV4dFNpYmxpbmcpXG4gICAgOiAoKHByZWNlZGVuY2UgPSA5ID09PSByb290Lm5vZGVUeXBlID8gcm9vdC5oZWFkIDogcm9vdCksXG4gICAgICBwcmVjZWRlbmNlLmluc2VydEJlZm9yZShpbnN0YW5jZSwgcHJlY2VkZW5jZS5maXJzdENoaWxkKSk7XG59XG5mdW5jdGlvbiBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQoc3R5bGVzaGVldFByb3BzLCBwcmVsb2FkUHJvcHMpIHtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMuY3Jvc3NPcmlnaW4gJiZcbiAgICAoc3R5bGVzaGVldFByb3BzLmNyb3NzT3JpZ2luID0gcHJlbG9hZFByb3BzLmNyb3NzT3JpZ2luKTtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMucmVmZXJyZXJQb2xpY3kgJiZcbiAgICAoc3R5bGVzaGVldFByb3BzLnJlZmVycmVyUG9saWN5ID0gcHJlbG9hZFByb3BzLnJlZmVycmVyUG9saWN5KTtcbiAgbnVsbCA9PSBzdHlsZXNoZWV0UHJvcHMudGl0bGUgJiYgKHN0eWxlc2hlZXRQcm9wcy50aXRsZSA9IHByZWxvYWRQcm9wcy50aXRsZSk7XG59XG5mdW5jdGlvbiBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzY3JpcHRQcm9wcywgcHJlbG9hZFByb3BzKSB7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMuY3Jvc3NPcmlnaW4gJiZcbiAgICAoc2NyaXB0UHJvcHMuY3Jvc3NPcmlnaW4gPSBwcmVsb2FkUHJvcHMuY3Jvc3NPcmlnaW4pO1xuICBudWxsID09IHNjcmlwdFByb3BzLnJlZmVycmVyUG9saWN5ICYmXG4gICAgKHNjcmlwdFByb3BzLnJlZmVycmVyUG9saWN5ID0gcHJlbG9hZFByb3BzLnJlZmVycmVyUG9saWN5KTtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5pbnRlZ3JpdHkgJiZcbiAgICAoc2NyaXB0UHJvcHMuaW50ZWdyaXR5ID0gcHJlbG9hZFByb3BzLmludGVncml0eSk7XG59XG52YXIgdGFnQ2FjaGVzID0gbnVsbDtcbmZ1bmN0aW9uIGdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZSh0eXBlLCBrZXlBdHRyaWJ1dGUsIG93bmVyRG9jdW1lbnQpIHtcbiAgaWYgKG51bGwgPT09IHRhZ0NhY2hlcykge1xuICAgIHZhciBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB2YXIgY2FjaGVzID0gKHRhZ0NhY2hlcyA9IG5ldyBNYXAoKSk7XG4gICAgY2FjaGVzLnNldChvd25lckRvY3VtZW50LCBjYWNoZSk7XG4gIH0gZWxzZVxuICAgIChjYWNoZXMgPSB0YWdDYWNoZXMpLFxuICAgICAgKGNhY2hlID0gY2FjaGVzLmdldChvd25lckRvY3VtZW50KSksXG4gICAgICBjYWNoZSB8fCAoKGNhY2hlID0gbmV3IE1hcCgpKSwgY2FjaGVzLnNldChvd25lckRvY3VtZW50LCBjYWNoZSkpO1xuICBpZiAoY2FjaGUuaGFzKHR5cGUpKSByZXR1cm4gY2FjaGU7XG4gIGNhY2hlLnNldCh0eXBlLCBudWxsKTtcbiAgb3duZXJEb2N1bWVudCA9IG93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodHlwZSk7XG4gIGZvciAoY2FjaGVzID0gMDsgY2FjaGVzIDwgb3duZXJEb2N1bWVudC5sZW5ndGg7IGNhY2hlcysrKSB7XG4gICAgdmFyIG5vZGUgPSBvd25lckRvY3VtZW50W2NhY2hlc107XG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSB8fFxuICAgICAgICAoXCJsaW5rXCIgPT09IHR5cGUgJiYgXCJzdHlsZXNoZWV0XCIgPT09IG5vZGUuZ2V0QXR0cmlidXRlKFwicmVsXCIpKVxuICAgICAgKSAmJlxuICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICE9PSBub2RlLm5hbWVzcGFjZVVSSVxuICAgICkge1xuICAgICAgdmFyIG5vZGVLZXkgPSBub2RlLmdldEF0dHJpYnV0ZShrZXlBdHRyaWJ1dGUpIHx8IFwiXCI7XG4gICAgICBub2RlS2V5ID0gdHlwZSArIG5vZGVLZXk7XG4gICAgICB2YXIgZXhpc3RpbmcgPSBjYWNoZS5nZXQobm9kZUtleSk7XG4gICAgICBleGlzdGluZyA/IGV4aXN0aW5nLnB1c2gobm9kZSkgOiBjYWNoZS5zZXQobm9kZUtleSwgW25vZGVdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhY2hlO1xufVxuZnVuY3Rpb24gbW91bnRIb2lzdGFibGUoaG9pc3RhYmxlUm9vdCwgdHlwZSwgaW5zdGFuY2UpIHtcbiAgaG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICBob2lzdGFibGVSb290LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgIGluc3RhbmNlLFxuICAgIFwidGl0bGVcIiA9PT0gdHlwZSA/IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcImhlYWQgPiB0aXRsZVwiKSA6IG51bGxcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzSG9zdEhvaXN0YWJsZVR5cGUodHlwZSwgcHJvcHMsIGhvc3RDb250ZXh0KSB7XG4gIGlmICgxID09PSBob3N0Q29udGV4dCB8fCBudWxsICE9IHByb3BzLml0ZW1Qcm9wKSByZXR1cm4gITE7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5wcmVjZWRlbmNlIHx8XG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5ocmVmIHx8XG4gICAgICAgIFwiXCIgPT09IHByb3BzLmhyZWZcbiAgICAgIClcbiAgICAgICAgYnJlYWs7XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGlmIChcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLnJlbCB8fFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMuaHJlZiB8fFxuICAgICAgICBcIlwiID09PSBwcm9wcy5ocmVmIHx8XG4gICAgICAgIHByb3BzLm9uTG9hZCB8fFxuICAgICAgICBwcm9wcy5vbkVycm9yXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgc3dpdGNoIChwcm9wcy5yZWwpIHtcbiAgICAgICAgY2FzZSBcInN0eWxlc2hlZXRcIjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHR5cGUgPSBwcm9wcy5kaXNhYmxlZCksXG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMucHJlY2VkZW5jZSAmJiBudWxsID09IHR5cGVcbiAgICAgICAgICApO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAhMDtcbiAgICAgIH1cbiAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICBpZiAoXG4gICAgICAgIHByb3BzLmFzeW5jICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BzLmFzeW5jICYmXG4gICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBwcm9wcy5hc3luYyAmJlxuICAgICAgICAhcHJvcHMub25Mb2FkICYmXG4gICAgICAgICFwcm9wcy5vbkVycm9yICYmXG4gICAgICAgIHByb3BzLnNyYyAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuc3JjXG4gICAgICApXG4gICAgICAgIHJldHVybiAhMDtcbiAgfVxuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBwcmVsb2FkUmVzb3VyY2UocmVzb3VyY2UpIHtcbiAgcmV0dXJuIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgMylcbiAgICA/ICExXG4gICAgOiAhMDtcbn1cbnZhciBzdXNwZW5kZWRTdGF0ZSA9IG51bGw7XG5mdW5jdGlvbiBub29wKCkge31cbmZ1bmN0aW9uIHN1c3BlbmRSZXNvdXJjZShob2lzdGFibGVSb290LCByZXNvdXJjZSwgcHJvcHMpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFN0YXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NSkpO1xuICB2YXIgc3RhdGUgPSBzdXNwZW5kZWRTdGF0ZTtcbiAgaWYgKFxuICAgIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmXG4gICAgKFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5tZWRpYSB8fFxuICAgICAgITEgIT09IG1hdGNoTWVkaWEocHJvcHMubWVkaWEpLm1hdGNoZXMpICYmXG4gICAgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KVxuICApIHtcbiAgICBpZiAobnVsbCA9PT0gcmVzb3VyY2UuaW5zdGFuY2UpIHtcbiAgICAgIHZhciBrZXkgPSBnZXRTdHlsZUtleShwcm9wcy5ocmVmKSxcbiAgICAgICAgaW5zdGFuY2UgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpXG4gICAgICAgICk7XG4gICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGluc3RhbmNlLl9wO1xuICAgICAgICBudWxsICE9PSBob2lzdGFibGVSb290ICYmXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGhvaXN0YWJsZVJvb3QgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBob2lzdGFibGVSb290LnRoZW4gJiZcbiAgICAgICAgICAoc3RhdGUuY291bnQrKyxcbiAgICAgICAgICAoc3RhdGUgPSBvblVuc3VzcGVuZC5iaW5kKHN0YXRlKSksXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdC50aGVuKHN0YXRlLCBzdGF0ZSkpO1xuICAgICAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnN0YW5jZSA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICAgICAgcHJvcHMgPSBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocHJvcHMpO1xuICAgICAgKGtleSA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KHByb3BzLCBrZXkpO1xuICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpO1xuICAgICAgdmFyIGxpbmtJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgbGlua0luc3RhbmNlLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBsaW5rSW5zdGFuY2Uub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgbGlua0luc3RhbmNlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICB9KTtcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGluc3RhbmNlLCBcImxpbmtcIiwgcHJvcHMpO1xuICAgICAgcmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICB9XG4gICAgbnVsbCA9PT0gc3RhdGUuc3R5bGVzaGVldHMgJiYgKHN0YXRlLnN0eWxlc2hlZXRzID0gbmV3IE1hcCgpKTtcbiAgICBzdGF0ZS5zdHlsZXNoZWV0cy5zZXQocmVzb3VyY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgIChob2lzdGFibGVSb290ID0gcmVzb3VyY2Uuc3RhdGUucHJlbG9hZCkgJiZcbiAgICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgMykgJiZcbiAgICAgIChzdGF0ZS5jb3VudCsrLFxuICAgICAgKHJlc291cmNlID0gb25VbnN1c3BlbmQuYmluZChzdGF0ZSkpLFxuICAgICAgaG9pc3RhYmxlUm9vdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCByZXNvdXJjZSksXG4gICAgICBob2lzdGFibGVSb290LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiB3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5KCkge1xuICBpZiAobnVsbCA9PT0gc3VzcGVuZGVkU3RhdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc1KSk7XG4gIHZhciBzdGF0ZSA9IHN1c3BlbmRlZFN0YXRlO1xuICBzdGF0ZS5zdHlsZXNoZWV0cyAmJlxuICAgIDAgPT09IHN0YXRlLmNvdW50ICYmXG4gICAgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMoc3RhdGUsIHN0YXRlLnN0eWxlc2hlZXRzKTtcbiAgcmV0dXJuIDAgPCBzdGF0ZS5jb3VudFxuICAgID8gZnVuY3Rpb24gKGNvbW1pdCkge1xuICAgICAgICB2YXIgc3R5bGVzaGVldFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUuc3R5bGVzaGVldHMgJiZcbiAgICAgICAgICAgIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCBzdGF0ZS5zdHlsZXNoZWV0cyk7XG4gICAgICAgICAgaWYgKHN0YXRlLnVuc3VzcGVuZCkge1xuICAgICAgICAgICAgdmFyIHVuc3VzcGVuZCA9IHN0YXRlLnVuc3VzcGVuZDtcbiAgICAgICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IG51bGw7XG4gICAgICAgICAgICB1bnN1c3BlbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDZlNCk7XG4gICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IGNvbW1pdDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgICAgIGNsZWFyVGltZW91dChzdHlsZXNoZWV0VGltZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIDogbnVsbDtcbn1cbmZ1bmN0aW9uIG9uVW5zdXNwZW5kKCkge1xuICB0aGlzLmNvdW50LS07XG4gIGlmICgwID09PSB0aGlzLmNvdW50KVxuICAgIGlmICh0aGlzLnN0eWxlc2hlZXRzKSBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyh0aGlzLCB0aGlzLnN0eWxlc2hlZXRzKTtcbiAgICBlbHNlIGlmICh0aGlzLnVuc3VzcGVuZCkge1xuICAgICAgdmFyIHVuc3VzcGVuZCA9IHRoaXMudW5zdXNwZW5kO1xuICAgICAgdGhpcy51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgdW5zdXNwZW5kKCk7XG4gICAgfVxufVxudmFyIHByZWNlZGVuY2VzQnlSb290ID0gbnVsbDtcbmZ1bmN0aW9uIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCByZXNvdXJjZXMpIHtcbiAgc3RhdGUuc3R5bGVzaGVldHMgPSBudWxsO1xuICBudWxsICE9PSBzdGF0ZS51bnN1c3BlbmQgJiZcbiAgICAoc3RhdGUuY291bnQrKyxcbiAgICAocHJlY2VkZW5jZXNCeVJvb3QgPSBuZXcgTWFwKCkpLFxuICAgIHJlc291cmNlcy5mb3JFYWNoKGluc2VydFN0eWxlc2hlZXRJbnRvUm9vdCwgc3RhdGUpLFxuICAgIChwcmVjZWRlbmNlc0J5Um9vdCA9IG51bGwpLFxuICAgIG9uVW5zdXNwZW5kLmNhbGwoc3RhdGUpKTtcbn1cbmZ1bmN0aW9uIGluc2VydFN0eWxlc2hlZXRJbnRvUm9vdChyb290LCByZXNvdXJjZSkge1xuICBpZiAoIShyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkpIHtcbiAgICB2YXIgcHJlY2VkZW5jZXMgPSBwcmVjZWRlbmNlc0J5Um9vdC5nZXQocm9vdCk7XG4gICAgaWYgKHByZWNlZGVuY2VzKSB2YXIgbGFzdCA9IHByZWNlZGVuY2VzLmdldChudWxsKTtcbiAgICBlbHNlIHtcbiAgICAgIHByZWNlZGVuY2VzID0gbmV3IE1hcCgpO1xuICAgICAgcHJlY2VkZW5jZXNCeVJvb3Quc2V0KHJvb3QsIHByZWNlZGVuY2VzKTtcbiAgICAgIGZvciAoXG4gICAgICAgIHZhciBub2RlcyA9IHJvb3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgIFwibGlua1tkYXRhLXByZWNlZGVuY2VdLHN0eWxlW2RhdGEtcHJlY2VkZW5jZV1cIlxuICAgICAgICAgICksXG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIGkgPCBub2Rlcy5sZW5ndGg7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIkxJTktcIiA9PT0gbm9kZS5ub2RlTmFtZSB8fFxuICAgICAgICAgIFwibm90IGFsbFwiICE9PSBub2RlLmdldEF0dHJpYnV0ZShcIm1lZGlhXCIpXG4gICAgICAgIClcbiAgICAgICAgICBwcmVjZWRlbmNlcy5zZXQobm9kZS5kYXRhc2V0LnByZWNlZGVuY2UsIG5vZGUpLCAobGFzdCA9IG5vZGUpO1xuICAgICAgfVxuICAgICAgbGFzdCAmJiBwcmVjZWRlbmNlcy5zZXQobnVsbCwgbGFzdCk7XG4gICAgfVxuICAgIG5vZGVzID0gcmVzb3VyY2UuaW5zdGFuY2U7XG4gICAgbm9kZSA9IG5vZGVzLmdldEF0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKTtcbiAgICBpID0gcHJlY2VkZW5jZXMuZ2V0KG5vZGUpIHx8IGxhc3Q7XG4gICAgaSA9PT0gbGFzdCAmJiBwcmVjZWRlbmNlcy5zZXQobnVsbCwgbm9kZXMpO1xuICAgIHByZWNlZGVuY2VzLnNldChub2RlLCBub2Rlcyk7XG4gICAgdGhpcy5jb3VudCsrO1xuICAgIGxhc3QgPSBvblVuc3VzcGVuZC5iaW5kKHRoaXMpO1xuICAgIG5vZGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGxhc3QpO1xuICAgIG5vZGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBsYXN0KTtcbiAgICBpXG4gICAgICA/IGkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZXMsIGkubmV4dFNpYmxpbmcpXG4gICAgICA6ICgocm9vdCA9IDkgPT09IHJvb3Qubm9kZVR5cGUgPyByb290LmhlYWQgOiByb290KSxcbiAgICAgICAgcm9vdC5pbnNlcnRCZWZvcmUobm9kZXMsIHJvb3QuZmlyc3RDaGlsZCkpO1xuICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgfVxufVxudmFyIEhvc3RUcmFuc2l0aW9uQ29udGV4dCA9IHtcbiAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgUHJvdmlkZXI6IG51bGwsXG4gIENvbnN1bWVyOiBudWxsLFxuICBfY3VycmVudFZhbHVlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICBfY3VycmVudFZhbHVlMjogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgX3RocmVhZENvdW50OiAwXG59O1xuZnVuY3Rpb24gRmliZXJSb290Tm9kZShcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgZm9ybVN0YXRlXG4pIHtcbiAgdGhpcy50YWcgPSAxO1xuICB0aGlzLmNvbnRhaW5lckluZm8gPSBjb250YWluZXJJbmZvO1xuICB0aGlzLmZpbmlzaGVkV29yayA9XG4gICAgdGhpcy5waW5nQ2FjaGUgPVxuICAgIHRoaXMuY3VycmVudCA9XG4gICAgdGhpcy5wZW5kaW5nQ2hpbGRyZW4gPVxuICAgICAgbnVsbDtcbiAgdGhpcy50aW1lb3V0SGFuZGxlID0gLTE7XG4gIHRoaXMuY2FsbGJhY2tOb2RlID1cbiAgICB0aGlzLm5leHQgPVxuICAgIHRoaXMucGVuZGluZ0NvbnRleHQgPVxuICAgIHRoaXMuY29udGV4dCA9XG4gICAgdGhpcy5jYW5jZWxQZW5kaW5nQ29tbWl0ID1cbiAgICAgIG51bGw7XG4gIHRoaXMuY2FsbGJhY2tQcmlvcml0eSA9IDA7XG4gIHRoaXMuZXhwaXJhdGlvblRpbWVzID0gY3JlYXRlTGFuZU1hcCgtMSk7XG4gIHRoaXMuZW50YW5nbGVkTGFuZXMgPVxuICAgIHRoaXMuc2hlbGxTdXNwZW5kQ291bnRlciA9XG4gICAgdGhpcy5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyA9XG4gICAgdGhpcy5maW5pc2hlZExhbmVzID1cbiAgICB0aGlzLmV4cGlyZWRMYW5lcyA9XG4gICAgdGhpcy53YXJtTGFuZXMgPVxuICAgIHRoaXMucGluZ2VkTGFuZXMgPVxuICAgIHRoaXMuc3VzcGVuZGVkTGFuZXMgPVxuICAgIHRoaXMucGVuZGluZ0xhbmVzID1cbiAgICAgIDA7XG4gIHRoaXMuZW50YW5nbGVtZW50cyA9IGNyZWF0ZUxhbmVNYXAoMCk7XG4gIHRoaXMuaGlkZGVuVXBkYXRlcyA9IGNyZWF0ZUxhbmVNYXAobnVsbCk7XG4gIHRoaXMuaWRlbnRpZmllclByZWZpeCA9IGlkZW50aWZpZXJQcmVmaXg7XG4gIHRoaXMub25VbmNhdWdodEVycm9yID0gb25VbmNhdWdodEVycm9yO1xuICB0aGlzLm9uQ2F1Z2h0RXJyb3IgPSBvbkNhdWdodEVycm9yO1xuICB0aGlzLm9uUmVjb3ZlcmFibGVFcnJvciA9IG9uUmVjb3ZlcmFibGVFcnJvcjtcbiAgdGhpcy5wb29sZWRDYWNoZSA9IG51bGw7XG4gIHRoaXMucG9vbGVkQ2FjaGVMYW5lcyA9IDA7XG4gIHRoaXMuZm9ybVN0YXRlID0gZm9ybVN0YXRlO1xuICB0aGlzLmluY29tcGxldGVUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyUm9vdChcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpbml0aWFsQ2hpbGRyZW4sXG4gIGh5ZHJhdGlvbkNhbGxiYWNrcyxcbiAgaXNTdHJpY3RNb2RlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgdHJhbnNpdGlvbkNhbGxiYWNrcyxcbiAgZm9ybVN0YXRlXG4pIHtcbiAgY29udGFpbmVySW5mbyA9IG5ldyBGaWJlclJvb3ROb2RlKFxuICAgIGNvbnRhaW5lckluZm8sXG4gICAgdGFnLFxuICAgIGh5ZHJhdGUsXG4gICAgaWRlbnRpZmllclByZWZpeCxcbiAgICBvblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIHRhZyA9IDE7XG4gICEwID09PSBpc1N0cmljdE1vZGUgJiYgKHRhZyB8PSAyNCk7XG4gIGlzU3RyaWN0TW9kZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDMsIG51bGwsIG51bGwsIHRhZyk7XG4gIGNvbnRhaW5lckluZm8uY3VycmVudCA9IGlzU3RyaWN0TW9kZTtcbiAgaXNTdHJpY3RNb2RlLnN0YXRlTm9kZSA9IGNvbnRhaW5lckluZm87XG4gIHRhZyA9IGNyZWF0ZUNhY2hlKCk7XG4gIHRhZy5yZWZDb3VudCsrO1xuICBjb250YWluZXJJbmZvLnBvb2xlZENhY2hlID0gdGFnO1xuICB0YWcucmVmQ291bnQrKztcbiAgaXNTdHJpY3RNb2RlLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgZWxlbWVudDogaW5pdGlhbENoaWxkcmVuLFxuICAgIGlzRGVoeWRyYXRlZDogaHlkcmF0ZSxcbiAgICBjYWNoZTogdGFnXG4gIH07XG4gIGluaXRpYWxpemVVcGRhdGVRdWV1ZShpc1N0cmljdE1vZGUpO1xuICByZXR1cm4gY29udGFpbmVySW5mbztcbn1cbmZ1bmN0aW9uIGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCkge1xuICBpZiAoIXBhcmVudENvbXBvbmVudCkgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgcGFyZW50Q29tcG9uZW50ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuICByZXR1cm4gcGFyZW50Q29tcG9uZW50O1xufVxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVySW1wbChcbiAgcm9vdEZpYmVyLFxuICBsYW5lLFxuICBlbGVtZW50LFxuICBjb250YWluZXIsXG4gIHBhcmVudENvbXBvbmVudCxcbiAgY2FsbGJhY2tcbikge1xuICBwYXJlbnRDb21wb25lbnQgPSBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpO1xuICBudWxsID09PSBjb250YWluZXIuY29udGV4dFxuICAgID8gKGNvbnRhaW5lci5jb250ZXh0ID0gcGFyZW50Q29tcG9uZW50KVxuICAgIDogKGNvbnRhaW5lci5wZW5kaW5nQ29udGV4dCA9IHBhcmVudENvbXBvbmVudCk7XG4gIGNvbnRhaW5lciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgY29udGFpbmVyLnBheWxvYWQgPSB7IGVsZW1lbnQ6IGVsZW1lbnQgfTtcbiAgY2FsbGJhY2sgPSB2b2lkIDAgPT09IGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrO1xuICBudWxsICE9PSBjYWxsYmFjayAmJiAoY29udGFpbmVyLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICBlbGVtZW50ID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIGNvbnRhaW5lciwgbGFuZSk7XG4gIG51bGwgIT09IGVsZW1lbnQgJiZcbiAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGVsZW1lbnQsIHJvb3RGaWJlciwgbGFuZSksXG4gICAgZW50YW5nbGVUcmFuc2l0aW9ucyhlbGVtZW50LCByb290RmliZXIsIGxhbmUpKTtcbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgbnVsbCAhPT0gZmliZXIuZGVoeWRyYXRlZCkge1xuICAgIHZhciBhID0gZmliZXIucmV0cnlMYW5lO1xuICAgIGZpYmVyLnJldHJ5TGFuZSA9IDAgIT09IGEgJiYgYSA8IHJldHJ5TGFuZSA/IGEgOiByZXRyeUxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG4gIChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSkgJiYgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCA2NzEwODg2NCk7XG4gICAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDY3MTA4ODY0KTtcbiAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgNjcxMDg4NjQpO1xuICB9XG59XG52YXIgX2VuYWJsZWQgPSAhMDtcbmZ1bmN0aW9uIGRpc3BhdGNoRGlzY3JldGVFdmVudChcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBjb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDIpLFxuICAgICAgZGlzcGF0Y2hFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgY29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSA4KSxcbiAgICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIGlmIChfZW5hYmxlZCkge1xuICAgIHZhciBibG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gYmxvY2tlZE9uKVxuICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyXG4gICAgICApLFxuICAgICAgICBjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgcXVldWVJZkNvbnRpbnVvdXNFdmVudChcbiAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgIClcbiAgICApXG4gICAgICBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpLFxuICAgICAgZXZlbnRTeXN0ZW1GbGFncyAmIDQgJiZcbiAgICAgICAgLTEgPCBkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMuaW5kZXhPZihkb21FdmVudE5hbWUpKVxuICAgICkge1xuICAgICAgZm9yICg7IG51bGwgIT09IGJsb2NrZWRPbjsgKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGdldEluc3RhbmNlRnJvbU5vZGUoYmxvY2tlZE9uKTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpYmVyKVxuICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGZpYmVyID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBpZiAoZmliZXIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGZpYmVyLnBlbmRpbmdMYW5lcyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGxhbmVzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IGZpYmVyO1xuICAgICAgICAgICAgICAgICAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gMjtcbiAgICAgICAgICAgICAgICAgIGZvciAocm9vdC5lbnRhbmdsZWRMYW5lcyB8PSAyOyBsYW5lczsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gMSA8PCAoMzEgLSBjbHozMihsYW5lcykpO1xuICAgICAgICAgICAgICAgICAgICByb290LmVudGFuZ2xlbWVudHNbMV0gfD0gbGFuZTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgJj0gfmxhbmU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQoZmliZXIpO1xuICAgICAgICAgICAgICAgICAgMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSAmJlxuICAgICAgICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIDUwMCksXG4gICAgICAgICAgICAgICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgKHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpKSxcbiAgICAgICAgICAgICAgICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMiksXG4gICAgICAgICAgICAgICAgZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgICAgICAgICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXIgPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgbnVsbCA9PT0gZmliZXIgJiZcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChmaWJlciA9PT0gYmxvY2tlZE9uKSBicmVhaztcbiAgICAgICAgYmxvY2tlZE9uID0gZmliZXI7XG4gICAgICB9XG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgbmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlXG4gICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbiAgcmV0dXJuIGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbn1cbnZhciByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7XG5mdW5jdGlvbiBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCh0YXJnZXROb2RlKSB7XG4gIHJldHVybl90YXJnZXRJbnN0ID0gbnVsbDtcbiAgdGFyZ2V0Tm9kZSA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0Tm9kZSkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0Tm9kZSk7XG4gICAgaWYgKG51bGwgPT09IG5lYXJlc3RNb3VudGVkKSB0YXJnZXROb2RlID0gbnVsbDtcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0YWcgPSBuZWFyZXN0TW91bnRlZC50YWc7XG4gICAgICBpZiAoMTMgPT09IHRhZykge1xuICAgICAgICB0YXJnZXROb2RlID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCk7XG4gICAgICAgIGlmIChudWxsICE9PSB0YXJnZXROb2RlKSByZXR1cm4gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKDMgPT09IHRhZykge1xuICAgICAgICBpZiAobmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgICAgcmV0dXJuIDMgPT09IG5lYXJlc3RNb3VudGVkLnRhZ1xuICAgICAgICAgICAgPyBuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0YXJnZXROb2RlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBuZWFyZXN0TW91bnRlZCAhPT0gdGFyZ2V0Tm9kZSAmJiAodGFyZ2V0Tm9kZSA9IG51bGwpO1xuICAgIH1cbiAgfVxuICByZXR1cm5fdGFyZ2V0SW5zdCA9IHRhcmdldE5vZGU7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgY2FzZSBcImNhbmNlbFwiOlxuICAgIGNhc2UgXCJjbGlja1wiOlxuICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgY2FzZSBcImN1dFwiOlxuICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICBjYXNlIFwiaW52YWxpZFwiOlxuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgY2FzZSBcInBhdXNlXCI6XG4gICAgY2FzZSBcInBsYXlcIjpcbiAgICBjYXNlIFwicG9pbnRlcmNhbmNlbFwiOlxuICAgIGNhc2UgXCJwb2ludGVyZG93blwiOlxuICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICBjYXNlIFwicmF0ZWNoYW5nZVwiOlxuICAgIGNhc2UgXCJyZXNldFwiOlxuICAgIGNhc2UgXCJyZXNpemVcIjpcbiAgICBjYXNlIFwic2Vla2VkXCI6XG4gICAgY2FzZSBcInN1Ym1pdFwiOlxuICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICBjYXNlIFwidG91Y2hjYW5jZWxcIjpcbiAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgIGNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpcbiAgICBjYXNlIFwiY2hhbmdlXCI6XG4gICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgIGNhc2UgXCJ0ZXh0SW5wdXRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgIGNhc2UgXCJiZWZvcmVibHVyXCI6XG4gICAgY2FzZSBcImFmdGVyYmx1clwiOlxuICAgIGNhc2UgXCJiZWZvcmVpbnB1dFwiOlxuICAgIGNhc2UgXCJibHVyXCI6XG4gICAgY2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpcbiAgICBjYXNlIFwiZm9jdXNcIjpcbiAgICBjYXNlIFwiaGFzaGNoYW5nZVwiOlxuICAgIGNhc2UgXCJwb3BzdGF0ZVwiOlxuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICBjYXNlIFwic2VsZWN0c3RhcnRcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgXCJkcmFnXCI6XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybW92ZVwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgY2FzZSBcInNjcm9sbFwiOlxuICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICBjYXNlIFwid2hlZWxcIjpcbiAgICBjYXNlIFwibW91c2VlbnRlclwiOlxuICAgIGNhc2UgXCJtb3VzZWxlYXZlXCI6XG4gICAgY2FzZSBcInBvaW50ZXJlbnRlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybGVhdmVcIjpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICBzd2l0Y2ggKGdldEN1cnJlbnRQcmlvcml0eUxldmVsKCkpIHtcbiAgICAgICAgY2FzZSBJbW1lZGlhdGVQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgY2FzZSBVc2VyQmxvY2tpbmdQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gODtcbiAgICAgICAgY2FzZSBOb3JtYWxQcmlvcml0eSQxOlxuICAgICAgICBjYXNlIExvd1ByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAzMjtcbiAgICAgICAgY2FzZSBJZGxlUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAzMjtcbiAgfVxufVxudmFyIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMSxcbiAgcXVldWVkRm9jdXMgPSBudWxsLFxuICBxdWV1ZWREcmFnID0gbnVsbCxcbiAgcXVldWVkTW91c2UgPSBudWxsLFxuICBxdWV1ZWRQb2ludGVycyA9IG5ldyBNYXAoKSxcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzID0gbmV3IE1hcCgpLFxuICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMgPSBbXSxcbiAgZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzID1cbiAgICBcIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldFwiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApO1xuZnVuY3Rpb24gY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHF1ZXVlZEZvY3VzID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgICBxdWV1ZWREcmFnID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgIHF1ZXVlZE1vdXNlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgICBxdWV1ZWRQb2ludGVycy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgIGNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgfVxufVxuZnVuY3Rpb24gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudCxcbiAgYmxvY2tlZE9uLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZXhpc3RpbmdRdWV1ZWRFdmVudCB8fFxuICAgIGV4aXN0aW5nUXVldWVkRXZlbnQubmF0aXZlRXZlbnQgIT09IG5hdGl2ZUV2ZW50XG4gIClcbiAgICByZXR1cm4gKFxuICAgICAgKGV4aXN0aW5nUXVldWVkRXZlbnQgPSB7XG4gICAgICAgIGJsb2NrZWRPbjogYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWU6IGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFnczogZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQ6IG5hdGl2ZUV2ZW50LFxuICAgICAgICB0YXJnZXRDb250YWluZXJzOiBbdGFyZ2V0Q29udGFpbmVyXVxuICAgICAgfSksXG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiZcbiAgICAgICAgKChibG9ja2VkT24gPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oYmxvY2tlZE9uKSksXG4gICAgICBleGlzdGluZ1F1ZXVlZEV2ZW50XG4gICAgKTtcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudC5ldmVudFN5c3RlbUZsYWdzIHw9IGV2ZW50U3lzdGVtRmxhZ3M7XG4gIGJsb2NrZWRPbiA9IGV4aXN0aW5nUXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcbiAgbnVsbCAhPT0gdGFyZ2V0Q29udGFpbmVyICYmXG4gICAgLTEgPT09IGJsb2NrZWRPbi5pbmRleE9mKHRhcmdldENvbnRhaW5lcikgJiZcbiAgICBibG9ja2VkT24ucHVzaCh0YXJnZXRDb250YWluZXIpO1xuICByZXR1cm4gZXhpc3RpbmdRdWV1ZWRFdmVudDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSWZDb250aW51b3VzRXZlbnQoXG4gIGJsb2NrZWRPbixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZEZvY3VzID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRGb2N1cyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkRHJhZyA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkRHJhZyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkTW91c2UgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZE1vdXNlLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKSksXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgdmFyIHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZDtcbiAgICAgIHF1ZXVlZFBvaW50ZXJzLnNldChcbiAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZFBvaW50ZXJzLmdldChwb2ludGVySWQpIHx8IG51bGwsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCksXG4gICAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5zZXQoXG4gICAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICAgIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZ2V0KHBvaW50ZXJJZCkgfHwgbnVsbCxcbiAgICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHF1ZXVlZFRhcmdldCkge1xuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHF1ZXVlZFRhcmdldC50YXJnZXQpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0SW5zdCkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0SW5zdCk7XG4gICAgaWYgKG51bGwgIT09IG5lYXJlc3RNb3VudGVkKVxuICAgICAgaWYgKCgodGFyZ2V0SW5zdCA9IG5lYXJlc3RNb3VudGVkLnRhZyksIDEzID09PSB0YXJnZXRJbnN0KSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0YXJnZXRJbnN0ID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCkpLFxuICAgICAgICAgIG51bGwgIT09IHRhcmdldEluc3QpXG4gICAgICAgICkge1xuICAgICAgICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIHJ1bldpdGhQcmlvcml0eShxdWV1ZWRUYXJnZXQucHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgxMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnKSB7XG4gICAgICAgICAgICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgICAgICAgICAgICByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIDMgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWRcbiAgICAgICkge1xuICAgICAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID1cbiAgICAgICAgICAzID09PSBuZWFyZXN0TW91bnRlZC50YWdcbiAgICAgICAgICAgID8gbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBudWxsO1xufVxuZnVuY3Rpb24gYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkge1xuICBpZiAobnVsbCAhPT0gcXVldWVkRXZlbnQuYmxvY2tlZE9uKSByZXR1cm4gITE7XG4gIGZvciAoXG4gICAgdmFyIHRhcmdldENvbnRhaW5lcnMgPSBxdWV1ZWRFdmVudC50YXJnZXRDb250YWluZXJzO1xuICAgIDAgPCB0YXJnZXRDb250YWluZXJzLmxlbmd0aDtcblxuICApIHtcbiAgICB2YXIgbmV4dEJsb2NrZWRPbiA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQocXVldWVkRXZlbnQubmF0aXZlRXZlbnQpO1xuICAgIGlmIChudWxsID09PSBuZXh0QmxvY2tlZE9uKSB7XG4gICAgICBuZXh0QmxvY2tlZE9uID0gcXVldWVkRXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgICB2YXIgbmF0aXZlRXZlbnRDbG9uZSA9IG5ldyBuZXh0QmxvY2tlZE9uLmNvbnN0cnVjdG9yKFxuICAgICAgICBuZXh0QmxvY2tlZE9uLnR5cGUsXG4gICAgICAgIG5leHRCbG9ja2VkT25cbiAgICAgICk7XG4gICAgICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBuYXRpdmVFdmVudENsb25lO1xuICAgICAgbmV4dEJsb2NrZWRPbi50YXJnZXQuZGlzcGF0Y2hFdmVudChuYXRpdmVFdmVudENsb25lKTtcbiAgICAgIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gKFxuICAgICAgICAodGFyZ2V0Q29udGFpbmVycyA9IGdldEluc3RhbmNlRnJvbU5vZGUobmV4dEJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSB0YXJnZXRDb250YWluZXJzICYmXG4gICAgICAgICAgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24odGFyZ2V0Q29udGFpbmVycyksXG4gICAgICAgIChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBuZXh0QmxvY2tlZE9uKSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgdGFyZ2V0Q29udGFpbmVycy5zaGlmdCgpO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcChxdWV1ZWRFdmVudCwga2V5LCBtYXApIHtcbiAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkgJiYgbWFwLmRlbGV0ZShrZXkpO1xufVxuZnVuY3Rpb24gcmVwbGF5VW5ibG9ja2VkRXZlbnRzKCkge1xuICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITE7XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmXG4gICAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRGb2N1cykgJiZcbiAgICAocXVldWVkRm9jdXMgPSBudWxsKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRHJhZykgJiZcbiAgICAocXVldWVkRHJhZyA9IG51bGwpO1xuICBudWxsICE9PSBxdWV1ZWRNb3VzZSAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkTW91c2UpICYmXG4gICAgKHF1ZXVlZE1vdXNlID0gbnVsbCk7XG4gIHF1ZXVlZFBvaW50ZXJzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKSB7XG4gIHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9PT0gdW5ibG9ja2VkICYmXG4gICAgKChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBudWxsKSxcbiAgICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0IHx8XG4gICAgICAoKGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMCksXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICAgICAgICByZXBsYXlVbmJsb2NrZWRFdmVudHNcbiAgICAgICkpKTtcbn1cbnZhciBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPSBudWxsO1xuZnVuY3Rpb24gc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGZvcm1SZXBsYXlpbmdRdWV1ZSkge1xuICBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgIT09IGZvcm1SZXBsYXlpbmdRdWV1ZSAmJlxuICAgICgobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gZm9ybVJlcGxheWluZ1F1ZXVlKSxcbiAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID09PSBmb3JtUmVwbGF5aW5nUXVldWUgJiZcbiAgICAgICAgICAobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gbnVsbCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybVJlcGxheWluZ1F1ZXVlLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgdmFyIGZvcm0gPSBmb3JtUmVwbGF5aW5nUXVldWVbaV0sXG4gICAgICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbiA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMV0sXG4gICAgICAgICAgICBmb3JtRGF0YSA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMl07XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN1Ym1pdHRlck9yQWN0aW9uKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KHN1Ym1pdHRlck9yQWN0aW9uIHx8IGZvcm0pKVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgICAgdmFyIGZvcm1JbnN0ID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShmb3JtKTtcbiAgICAgICAgICBudWxsICE9PSBmb3JtSW5zdCAmJlxuICAgICAgICAgICAgKGZvcm1SZXBsYXlpbmdRdWV1ZS5zcGxpY2UoaSwgMyksXG4gICAgICAgICAgICAoaSAtPSAzKSxcbiAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgIGZvcm1JbnN0LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBmb3JtLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN1Ym1pdHRlck9yQWN0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uLFxuICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApKTtcbn1cbmZ1bmN0aW9uIHJldHJ5SWZCbG9ja2VkT24odW5ibG9ja2VkKSB7XG4gIGZ1bmN0aW9uIHVuYmxvY2socXVldWVkRXZlbnQpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEV2ZW50LCB1bmJsb2NrZWQpO1xuICB9XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRGb2N1cywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRHJhZywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkTW91c2UgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZE1vdXNlLCB1bmJsb2NrZWQpO1xuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKHVuYmxvY2spO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaCh1bmJsb2NrKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcXVldWVkVGFyZ2V0ID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldO1xuICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCAmJiAocXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGwpO1xuICB9XG4gIGZvciAoXG4gICAgO1xuICAgIDAgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoICYmXG4gICAgKChpID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzWzBdKSwgbnVsbCA9PT0gaS5ibG9ja2VkT24pO1xuXG4gIClcbiAgICBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQoaSksXG4gICAgICBudWxsID09PSBpLmJsb2NrZWRPbiAmJiBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc2hpZnQoKTtcbiAgaSA9ICh1bmJsb2NrZWQub3duZXJEb2N1bWVudCB8fCB1bmJsb2NrZWQpLiQkcmVhY3RGb3JtUmVwbGF5O1xuICBpZiAobnVsbCAhPSBpKVxuICAgIGZvciAocXVldWVkVGFyZ2V0ID0gMDsgcXVldWVkVGFyZ2V0IDwgaS5sZW5ndGg7IHF1ZXVlZFRhcmdldCArPSAzKSB7XG4gICAgICB2YXIgZm9ybSA9IGlbcXVldWVkVGFyZ2V0XSxcbiAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24gPSBpW3F1ZXVlZFRhcmdldCArIDFdLFxuICAgICAgICBmb3JtUHJvcHMgPSBmb3JtW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc3VibWl0dGVyT3JBY3Rpb24pXG4gICAgICAgIGZvcm1Qcm9wcyB8fCBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoaSk7XG4gICAgICBlbHNlIGlmIChmb3JtUHJvcHMpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzdWJtaXR0ZXJPckFjdGlvbiAmJiBzdWJtaXR0ZXJPckFjdGlvbi5oYXNBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoZm9ybSA9IHN1Ym1pdHRlck9yQWN0aW9uKSxcbiAgICAgICAgICAgIChmb3JtUHJvcHMgPSBzdWJtaXR0ZXJPckFjdGlvbltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBhY3Rpb24gPSBmb3JtUHJvcHMuZm9ybUFjdGlvbjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChmb3JtKSkgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIGFjdGlvbiA9IGZvcm1Qcm9wcy5hY3Rpb247XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblxuICAgICAgICAgID8gKGlbcXVldWVkVGFyZ2V0ICsgMV0gPSBhY3Rpb24pXG4gICAgICAgICAgOiAoaS5zcGxpY2UocXVldWVkVGFyZ2V0LCAzKSwgKHF1ZXVlZFRhcmdldCAtPSAzKSk7XG4gICAgICAgIHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChpKTtcbiAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBSZWFjdERPTVJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUucmVuZGVyID0gUmVhY3RET01Sb290LnByb3RvdHlwZS5yZW5kZXIgPVxuICBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgICBpZiAobnVsbCA9PT0gcm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDkpKTtcbiAgICB2YXIgY3VycmVudCA9IHJvb3QuY3VycmVudCxcbiAgICAgIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgIHVwZGF0ZUNvbnRhaW5lckltcGwoY3VycmVudCwgbGFuZSwgY2hpbGRyZW4sIHJvb3QsIG51bGwsIG51bGwpO1xuICB9O1xuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bm1vdW50ID0gUmVhY3RET01Sb290LnByb3RvdHlwZS51bm1vdW50ID1cbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICAgIGlmIChudWxsICE9PSByb290KSB7XG4gICAgICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBudWxsO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgICAgIDAgPT09IHJvb3QudGFnICYmIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcbiAgICAgIHVwZGF0ZUNvbnRhaW5lckltcGwocm9vdC5jdXJyZW50LCAyLCBudWxsLCByb290LCBudWxsLCBudWxsKTtcbiAgICAgIGZsdXNoU3luY1dvcmskMSgpO1xuICAgICAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gbnVsbDtcbiAgICB9XG4gIH07XG5mdW5jdGlvbiBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICB2YXIgdXBkYXRlUHJpb3JpdHkgPSByZXNvbHZlVXBkYXRlUHJpb3JpdHkoKTtcbiAgICB0YXJnZXQgPSB7IGJsb2NrZWRPbjogbnVsbCwgdGFyZ2V0OiB0YXJnZXQsIHByaW9yaXR5OiB1cGRhdGVQcmlvcml0eSB9O1xuICAgIGZvciAoXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBpIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aCAmJlxuICAgICAgMCAhPT0gdXBkYXRlUHJpb3JpdHkgJiZcbiAgICAgIHVwZGF0ZVByaW9yaXR5IDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldLnByaW9yaXR5O1xuICAgICAgaSsrXG4gICAgKTtcbiAgICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc3BsaWNlKGksIDAsIHRhcmdldCk7XG4gICAgMCA9PT0gaSAmJiBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQodGFyZ2V0KTtcbiAgfVxufTtcbnZhciBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODYgPSBSZWFjdC52ZXJzaW9uO1xuaWYgKFxuICBcIjE5LjAuMFwiICE9PVxuICBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODZcbilcbiAgdGhyb3cgRXJyb3IoXG4gICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZShcbiAgICAgIDUyNyxcbiAgICAgIGlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTY4NixcbiAgICAgIFwiMTkuMC4wXCJcbiAgICApXG4gICk7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5maW5kRE9NTm9kZSA9IGZ1bmN0aW9uIChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgdmFyIGZpYmVyID0gY29tcG9uZW50T3JFbGVtZW50Ll9yZWFjdEludGVybmFscztcbiAgaWYgKHZvaWQgMCA9PT0gZmliZXIpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlcilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgY29tcG9uZW50T3JFbGVtZW50ID0gT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KS5qb2luKFwiLFwiKTtcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI2OCwgY29tcG9uZW50T3JFbGVtZW50KSk7XG4gIH1cbiAgY29tcG9uZW50T3JFbGVtZW50ID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgIT09IGNvbXBvbmVudE9yRWxlbWVudFxuICAgICAgPyBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwoY29tcG9uZW50T3JFbGVtZW50KVxuICAgICAgOiBudWxsO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgPT09IGNvbXBvbmVudE9yRWxlbWVudCA/IG51bGwgOiBjb21wb25lbnRPckVsZW1lbnQuc3RhdGVOb2RlO1xuICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xufTtcbnZhciBpbnRlcm5hbHMkanNjb21wJGlubGluZV8yMTY1ID0ge1xuICBidW5kbGVUeXBlOiAwLFxuICB2ZXJzaW9uOiBcIjE5LjAuMFwiLFxuICByZW5kZXJlclBhY2thZ2VOYW1lOiBcInJlYWN0LWRvbVwiLFxuICBjdXJyZW50RGlzcGF0Y2hlclJlZjogUmVhY3RTaGFyZWRJbnRlcm5hbHMsXG4gIGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgcmVjb25jaWxlclZlcnNpb246IFwiMTkuMC4wXCJcbn07XG5pZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXykge1xuICB2YXIgaG9vayRqc2NvbXAkaW5saW5lXzIxNjYgPSBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG4gIGlmIChcbiAgICAhaG9vayRqc2NvbXAkaW5saW5lXzIxNjYuaXNEaXNhYmxlZCAmJlxuICAgIGhvb2skanNjb21wJGlubGluZV8yMTY2LnN1cHBvcnRzRmliZXJcbiAgKVxuICAgIHRyeSB7XG4gICAgICAocmVuZGVyZXJJRCA9IGhvb2skanNjb21wJGlubGluZV8yMTY2LmluamVjdChcbiAgICAgICAgaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NVxuICAgICAgKSksXG4gICAgICAgIChpbmplY3RlZEhvb2sgPSBob29rJGpzY29tcCRpbmxpbmVfMjE2Nik7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxuZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOTkpKTtcbiAgdmFyIGlzU3RyaWN0TW9kZSA9ICExLFxuICAgIGlkZW50aWZpZXJQcmVmaXggPSBcIlwiLFxuICAgIG9uVW5jYXVnaHRFcnJvciA9IGRlZmF1bHRPblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvciA9IGRlZmF1bHRPbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvciA9IGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IsXG4gICAgdHJhbnNpdGlvbkNhbGxiYWNrcyA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpKTtcbiAgb3B0aW9ucyA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMSxcbiAgICBudWxsLFxuICAgIG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgbnVsbFxuICApO1xuICBjb250YWluZXJbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gPSBvcHRpb25zLmN1cnJlbnQ7XG4gIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKFxuICAgIDggPT09IGNvbnRhaW5lci5ub2RlVHlwZSA/IGNvbnRhaW5lci5wYXJlbnROb2RlIDogY29udGFpbmVyXG4gICk7XG4gIHJldHVybiBuZXcgUmVhY3RET01Sb290KG9wdGlvbnMpO1xufTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBpbml0aWFsQ2hpbGRyZW4sIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsLFxuICAgIGZvcm1TdGF0ZSA9IG51bGw7XG4gIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMgJiZcbiAgICAoITAgPT09IG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoaXNTdHJpY3RNb2RlID0gITApLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICYmXG4gICAgICAoaWRlbnRpZmllclByZWZpeCA9IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciAmJlxuICAgICAgKG9uVW5jYXVnaHRFcnJvciA9IG9wdGlvbnMub25VbmNhdWdodEVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMub25DYXVnaHRFcnJvciAmJiAob25DYXVnaHRFcnJvciA9IG9wdGlvbnMub25DYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciAmJlxuICAgICAgKG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMudW5zdGFibGVfdHJhbnNpdGlvbkNhbGxiYWNrcyAmJlxuICAgICAgKHRyYW5zaXRpb25DYWxsYmFja3MgPSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5mb3JtU3RhdGUgJiYgKGZvcm1TdGF0ZSA9IG9wdGlvbnMuZm9ybVN0YXRlKSk7XG4gIGluaXRpYWxDaGlsZHJlbiA9IGNyZWF0ZUZpYmVyUm9vdChcbiAgICBjb250YWluZXIsXG4gICAgMSxcbiAgICAhMCxcbiAgICBpbml0aWFsQ2hpbGRyZW4sXG4gICAgbnVsbCAhPSBvcHRpb25zID8gb3B0aW9ucyA6IG51bGwsXG4gICAgaXNTdHJpY3RNb2RlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIGluaXRpYWxDaGlsZHJlbi5jb250ZXh0ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUobnVsbCk7XG4gIG9wdGlvbnMgPSBpbml0aWFsQ2hpbGRyZW4uY3VycmVudDtcbiAgaXNTdHJpY3RNb2RlID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgaWRlbnRpZmllclByZWZpeCA9IGNyZWF0ZVVwZGF0ZShpc1N0cmljdE1vZGUpO1xuICBpZGVudGlmaWVyUHJlZml4LmNhbGxiYWNrID0gbnVsbDtcbiAgZW5xdWV1ZVVwZGF0ZShvcHRpb25zLCBpZGVudGlmaWVyUHJlZml4LCBpc1N0cmljdE1vZGUpO1xuICBpbml0aWFsQ2hpbGRyZW4uY3VycmVudC5sYW5lcyA9IGlzU3RyaWN0TW9kZTtcbiAgbWFya1Jvb3RVcGRhdGVkJDEoaW5pdGlhbENoaWxkcmVuLCBpc1N0cmljdE1vZGUpO1xuICBlbnN1cmVSb290SXNTY2hlZHVsZWQoaW5pdGlhbENoaWxkcmVuKTtcbiAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQ7XG4gIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKGNvbnRhaW5lcik7XG4gIHJldHVybiBuZXcgUmVhY3RET01IeWRyYXRpb25Sb290KGluaXRpYWxDaGlsZHJlbik7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4wLjBcIjtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICB2YXIgdXJsID0gXCJodHRwczovL3JlYWN0LmRldi9lcnJvcnMvXCIgKyBjb2RlO1xuICBpZiAoMSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB1cmwgKz0gXCI/YXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1sxXSk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICB1cmwgKz0gXCImYXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIiArXG4gICAgY29kZSArXG4gICAgXCI7IHZpc2l0IFwiICtcbiAgICB1cmwgK1xuICAgIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIlxuICApO1xufVxuZnVuY3Rpb24gbm9vcCgpIHt9XG52YXIgSW50ZXJuYWxzID0ge1xuICAgIGQ6IHtcbiAgICAgIGY6IG5vb3AsXG4gICAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTIyKSk7XG4gICAgICB9LFxuICAgICAgRDogbm9vcCxcbiAgICAgIEM6IG5vb3AsXG4gICAgICBMOiBub29wLFxuICAgICAgbTogbm9vcCxcbiAgICAgIFg6IG5vb3AsXG4gICAgICBTOiBub29wLFxuICAgICAgTTogbm9vcFxuICAgIH0sXG4gICAgcDogMCxcbiAgICBmaW5kRE9NTm9kZTogbnVsbFxuICB9LFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik7XG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVySW5mbywgaW1wbGVtZW50YXRpb24pIHtcbiAgdmFyIGtleSA9XG4gICAgMyA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiBudWxsO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9QT1JUQUxfVFlQRSxcbiAgICBrZXk6IG51bGwgPT0ga2V5ID8gbnVsbCA6IFwiXCIgKyBrZXksXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgaW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uXG4gIH07XG59XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREU7XG5mdW5jdGlvbiBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBpbnB1dCkge1xuICBpZiAoXCJmb250XCIgPT09IGFzKSByZXR1cm4gXCJcIjtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBpbnB1dClcbiAgICByZXR1cm4gXCJ1c2UtY3JlZGVudGlhbHNcIiA9PT0gaW5wdXQgPyBpbnB1dCA6IFwiXCI7XG59XG5leHBvcnRzLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gIEludGVybmFscztcbmV4cG9ydHMuY3JlYXRlUG9ydGFsID0gZnVuY3Rpb24gKGNoaWxkcmVuLCBjb250YWluZXIpIHtcbiAgdmFyIGtleSA9XG4gICAgMiA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICBpZiAoXG4gICAgIWNvbnRhaW5lciB8fFxuICAgICgxICE9PSBjb250YWluZXIubm9kZVR5cGUgJiZcbiAgICAgIDkgIT09IGNvbnRhaW5lci5ub2RlVHlwZSAmJlxuICAgICAgMTEgIT09IGNvbnRhaW5lci5ub2RlVHlwZSlcbiAgKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHJldHVybiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufTtcbmV4cG9ydHMuZmx1c2hTeW5jID0gZnVuY3Rpb24gKGZuKSB7XG4gIHZhciBwcmV2aW91c1RyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIHByZXZpb3VzVXBkYXRlUHJpb3JpdHkgPSBJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICBpZiAoKChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksIChJbnRlcm5hbHMucCA9IDIpLCBmbikpIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldmlvdXNUcmFuc2l0aW9uKSxcbiAgICAgIChJbnRlcm5hbHMucCA9IHByZXZpb3VzVXBkYXRlUHJpb3JpdHkpLFxuICAgICAgSW50ZXJuYWxzLmQuZigpO1xuICB9XG59O1xuZXhwb3J0cy5wcmVjb25uZWN0ID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICAob3B0aW9uc1xuICAgICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmNyb3NzT3JpZ2luKSxcbiAgICAgICAgKG9wdGlvbnMgPVxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zXG4gICAgICAgICAgICA/IFwidXNlLWNyZWRlbnRpYWxzXCIgPT09IG9wdGlvbnNcbiAgICAgICAgICAgICAgPyBvcHRpb25zXG4gICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgOiB2b2lkIDApKVxuICAgICAgOiAob3B0aW9ucyA9IG51bGwpLFxuICAgIEludGVybmFscy5kLkMoaHJlZiwgb3B0aW9ucykpO1xufTtcbmV4cG9ydHMucHJlZmV0Y2hETlMgPSBmdW5jdGlvbiAoaHJlZikge1xuICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBJbnRlcm5hbHMuZC5EKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlaW5pdCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBvcHRpb25zICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzKSB7XG4gICAgdmFyIGFzID0gb3B0aW9ucy5hcyxcbiAgICAgIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgb3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICBpbnRlZ3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA6IHZvaWQgMDtcbiAgICBcInN0eWxlXCIgPT09IGFzXG4gICAgICA/IEludGVybmFscy5kLlMoXG4gICAgICAgICAgaHJlZixcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5wcmVjZWRlbmNlID8gb3B0aW9ucy5wcmVjZWRlbmNlIDogdm9pZCAwLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgOiBcInNjcmlwdFwiID09PSBhcyAmJlxuICAgICAgICBJbnRlcm5hbHMuZC5YKGhyZWYsIHtcbiAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgaW50ZWdyaXR5OiBpbnRlZ3JpdHksXG4gICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eSxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgIH0pO1xuICB9XG59O1xuZXhwb3J0cy5wcmVpbml0TW9kdWxlID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKVxuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zKSB7XG4gICAgICBpZiAobnVsbCA9PSBvcHRpb25zLmFzIHx8IFwic2NyaXB0XCIgPT09IG9wdGlvbnMuYXMpIHtcbiAgICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhcbiAgICAgICAgICBvcHRpb25zLmFzLFxuICAgICAgICAgIG9wdGlvbnMuY3Jvc3NPcmlnaW5cbiAgICAgICAgKTtcbiAgICAgICAgSW50ZXJuYWxzLmQuTShocmVmLCB7XG4gICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgIGludGVncml0eTpcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgICAgIG5vbmNlOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5ub25jZSA/IG9wdGlvbnMubm9uY2UgOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIG51bGwgPT0gb3B0aW9ucyAmJiBJbnRlcm5hbHMuZC5NKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlbG9hZCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJlxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvcHRpb25zICYmXG4gICAgbnVsbCAhPT0gb3B0aW9ucyAmJlxuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzXG4gICkge1xuICAgIHZhciBhcyA9IG9wdGlvbnMuYXMsXG4gICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuICAgIEludGVybmFscy5kLkwoaHJlZiwgYXMsIHtcbiAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgIGludGVncml0eTpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMudHlwZSA/IG9wdGlvbnMudHlwZSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHk6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA/IG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgcmVmZXJyZXJQb2xpY3k6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgPyBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgOiB2b2lkIDAsXG4gICAgICBpbWFnZVNyY1NldDpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTcmNTZXQgPyBvcHRpb25zLmltYWdlU3JjU2V0IDogdm9pZCAwLFxuICAgICAgaW1hZ2VTaXplczpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTaXplcyA/IG9wdGlvbnMuaW1hZ2VTaXplcyA6IHZvaWQgMCxcbiAgICAgIG1lZGlhOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5tZWRpYSA/IG9wdGlvbnMubWVkaWEgOiB2b2lkIDBcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJlbG9hZE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZilcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhvcHRpb25zLmFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICAgIEludGVybmFscy5kLm0oaHJlZiwge1xuICAgICAgICBhczpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcyAmJiBcInNjcmlwdFwiICE9PSBvcHRpb25zLmFzXG4gICAgICAgICAgICA/IG9wdGlvbnMuYXNcbiAgICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgIGludGVncml0eTpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgfSBlbHNlIEludGVybmFscy5kLm0oaHJlZik7XG59O1xuZXhwb3J0cy5yZXF1ZXN0Rm9ybVJlc2V0ID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgSW50ZXJuYWxzLmQucihmb3JtKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24gKGZuLCBhKSB7XG4gIHJldHVybiBmbihhKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0ZSA9IGZ1bmN0aW9uIChhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUZvcm1TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzKCk7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4wLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tY2xpZW50LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWNvbXBpbGVyLXJ1bnRpbWUucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICByZXF1aXJlKFwicmVhY3RcIikuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFO1xuZXhwb3J0cy5jID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlTWVtb0NhY2hlKHNpemUpO1xufTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTtcbmZ1bmN0aW9uIGpzeFByb2QodHlwZSwgY29uZmlnLCBtYXliZUtleSkge1xuICB2YXIga2V5ID0gbnVsbDtcbiAgdm9pZCAwICE9PSBtYXliZUtleSAmJiAoa2V5ID0gXCJcIiArIG1heWJlS2V5KTtcbiAgdm9pZCAwICE9PSBjb25maWcua2V5ICYmIChrZXkgPSBcIlwiICsgY29uZmlnLmtleSk7XG4gIGlmIChcImtleVwiIGluIGNvbmZpZykge1xuICAgIG1heWJlS2V5ID0ge307XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gY29uZmlnKVxuICAgICAgXCJrZXlcIiAhPT0gcHJvcE5hbWUgJiYgKG1heWJlS2V5W3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV0pO1xuICB9IGVsc2UgbWF5YmVLZXkgPSBjb25maWc7XG4gIGNvbmZpZyA9IG1heWJlS2V5LnJlZjtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAga2V5OiBrZXksXG4gICAgcmVmOiB2b2lkIDAgIT09IGNvbmZpZyA/IGNvbmZpZyA6IG51bGwsXG4gICAgcHJvcHM6IG1heWJlS2V5XG4gIH07XG59XG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuanN4ID0ganN4UHJvZDtcbmV4cG9ydHMuanN4cyA9IGpzeFByb2Q7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QudHJhbnNpdGlvbmFsLmVsZW1lbnRcIiksXG4gIFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxcbiAgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxcbiAgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxcbiAgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxcbiAgUkVBQ1RfQ09OU1VNRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb25zdW1lclwiKSxcbiAgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksXG4gIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSxcbiAgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChudWxsID09PSBtYXliZUl0ZXJhYmxlIHx8IFwib2JqZWN0XCIgIT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlKSByZXR1cm4gbnVsbDtcbiAgbWF5YmVJdGVyYWJsZSA9XG4gICAgKE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0pIHx8XG4gICAgbWF5YmVJdGVyYWJsZVtcIkBAaXRlcmF0b3JcIl07XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZUl0ZXJhYmxlID8gbWF5YmVJdGVyYWJsZSA6IG51bGw7XG59XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gITE7XG4gICAgfSxcbiAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uICgpIHt9LFxuICAgIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKCkge31cbiAgfSxcbiAgYXNzaWduID0gT2JqZWN0LmFzc2lnbixcbiAgZW1wdHlPYmplY3QgPSB7fTtcbmZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG5Db21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBwYXJ0aWFsU3RhdGUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwYXJ0aWFsU3RhdGUgJiZcbiAgICBudWxsICE9IHBhcnRpYWxTdGF0ZVxuICApXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcInRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiXG4gICAgKTtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCBcInNldFN0YXRlXCIpO1xufTtcbkNvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLCBjYWxsYmFjaywgXCJmb3JjZVVwZGF0ZVwiKTtcbn07XG5mdW5jdGlvbiBDb21wb25lbnREdW1teSgpIHt9XG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuZnVuY3Rpb24gUHVyZUNvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxudmFyIHB1cmVDb21wb25lbnRQcm90b3R5cGUgPSAoUHVyZUNvbXBvbmVudC5wcm90b3R5cGUgPSBuZXcgQ29tcG9uZW50RHVtbXkoKSk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHVyZUNvbXBvbmVudDtcbmFzc2lnbihwdXJlQ29tcG9uZW50UHJvdG90eXBlLCBDb21wb25lbnQucHJvdG90eXBlKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSAhMDtcbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXksXG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzID0geyBIOiBudWxsLCBBOiBudWxsLCBUOiBudWxsLCBTOiBudWxsIH0sXG4gIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7XG4gIHNlbGYgPSBwcm9wcy5yZWY7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogdm9pZCAwICE9PSBzZWxmID8gc2VsZiA6IG51bGwsXG4gICAgcHJvcHM6IHByb3BzXG4gIH07XG59XG5mdW5jdGlvbiBjbG9uZUFuZFJlcGxhY2VLZXkob2xkRWxlbWVudCwgbmV3S2V5KSB7XG4gIHJldHVybiBSZWFjdEVsZW1lbnQoXG4gICAgb2xkRWxlbWVudC50eXBlLFxuICAgIG5ld0tleSxcbiAgICB2b2lkIDAsXG4gICAgdm9pZCAwLFxuICAgIHZvaWQgMCxcbiAgICBvbGRFbGVtZW50LnByb3BzXG4gICk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb2JqZWN0ICYmXG4gICAgbnVsbCAhPT0gb2JqZWN0ICYmXG4gICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbiAgKTtcbn1cbmZ1bmN0aW9uIGVzY2FwZShrZXkpIHtcbiAgdmFyIGVzY2FwZXJMb29rdXAgPSB7IFwiPVwiOiBcIj0wXCIsIFwiOlwiOiBcIj0yXCIgfTtcbiAgcmV0dXJuIChcbiAgICBcIiRcIiArXG4gICAga2V5LnJlcGxhY2UoL1s9Ol0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gICAgfSlcbiAgKTtcbn1cbnZhciB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCA9IC9cXC8rL2c7XG5mdW5jdGlvbiBnZXRFbGVtZW50S2V5KGVsZW1lbnQsIGluZGV4KSB7XG4gIHJldHVybiBcIm9iamVjdFwiID09PSB0eXBlb2YgZWxlbWVudCAmJiBudWxsICE9PSBlbGVtZW50ICYmIG51bGwgIT0gZWxlbWVudC5rZXlcbiAgICA/IGVzY2FwZShcIlwiICsgZWxlbWVudC5rZXkpXG4gICAgOiBpbmRleC50b1N0cmluZygzNik7XG59XG5mdW5jdGlvbiBub29wJDEoKSB7fVxuZnVuY3Rpb24gcmVzb2x2ZVRoZW5hYmxlKHRoZW5hYmxlKSB7XG4gIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgdGhyb3cgdGhlbmFibGUucmVhc29uO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzd2l0Y2ggKFxuICAgICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHRoZW5hYmxlLnN0YXR1c1xuICAgICAgICAgID8gdGhlbmFibGUudGhlbihub29wJDEsIG5vb3AkMSlcbiAgICAgICAgICA6ICgodGhlbmFibGUuc3RhdHVzID0gXCJwZW5kaW5nXCIpLFxuICAgICAgICAgICAgdGhlbmFibGUudGhlbihcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGZ1bGZpbGxlZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICAgKCh0aGVuYWJsZS5zdGF0dXMgPSBcImZ1bGZpbGxlZFwiKSxcbiAgICAgICAgICAgICAgICAgICh0aGVuYWJsZS52YWx1ZSA9IGZ1bGZpbGxlZFZhbHVlKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAgICgodGhlbmFibGUuc3RhdHVzID0gXCJyZWplY3RlZFwiKSwgKHRoZW5hYmxlLnJlYXNvbiA9IGVycm9yKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkpLFxuICAgICAgICB0aGVuYWJsZS5zdGF0dXMpXG4gICAgICApIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgdGhyb3cgdGhlbmFibGUucmVhc29uO1xuICAgICAgfVxuICB9XG4gIHRocm93IHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gbWFwSW50b0FycmF5KGNoaWxkcmVuLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgbmFtZVNvRmFyLCBjYWxsYmFjaykge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGUgfHwgXCJib29sZWFuXCIgPT09IHR5cGUpIGNoaWxkcmVuID0gbnVsbDtcbiAgdmFyIGludm9rZUNhbGxiYWNrID0gITE7XG4gIGlmIChudWxsID09PSBjaGlsZHJlbikgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgZWxzZVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICBpbnZva2VDYWxsYmFjayA9ICEwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgc3dpdGNoIChjaGlsZHJlbi4kJHR5cGVvZikge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgICBpbnZva2VDYWxsYmFjayA9ICEwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoaW52b2tlQ2FsbGJhY2sgPSBjaGlsZHJlbi5faW5pdCksXG4gICAgICAgICAgICAgIG1hcEludG9BcnJheShcbiAgICAgICAgICAgICAgICBpbnZva2VDYWxsYmFjayhjaGlsZHJlbi5fcGF5bG9hZCksXG4gICAgICAgICAgICAgICAgYXJyYXksXG4gICAgICAgICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgaWYgKGludm9rZUNhbGxiYWNrKVxuICAgIHJldHVybiAoXG4gICAgICAoY2FsbGJhY2sgPSBjYWxsYmFjayhjaGlsZHJlbikpLFxuICAgICAgKGludm9rZUNhbGxiYWNrID1cbiAgICAgICAgXCJcIiA9PT0gbmFtZVNvRmFyID8gXCIuXCIgKyBnZXRFbGVtZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0ZhciksXG4gICAgICBpc0FycmF5SW1wbChjYWxsYmFjaylcbiAgICAgICAgPyAoKGVzY2FwZWRQcmVmaXggPSBcIlwiKSxcbiAgICAgICAgICBudWxsICE9IGludm9rZUNhbGxiYWNrICYmXG4gICAgICAgICAgICAoZXNjYXBlZFByZWZpeCA9XG4gICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsIFwiJCYvXCIpICsgXCIvXCIpLFxuICAgICAgICAgIG1hcEludG9BcnJheShjYWxsYmFjaywgYXJyYXksIGVzY2FwZWRQcmVmaXgsIFwiXCIsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9KSlcbiAgICAgICAgOiBudWxsICE9IGNhbGxiYWNrICYmXG4gICAgICAgICAgKGlzVmFsaWRFbGVtZW50KGNhbGxiYWNrKSAmJlxuICAgICAgICAgICAgKGNhbGxiYWNrID0gY2xvbmVBbmRSZXBsYWNlS2V5KFxuICAgICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgICAgZXNjYXBlZFByZWZpeCArXG4gICAgICAgICAgICAgICAgKG51bGwgPT0gY2FsbGJhY2sua2V5IHx8XG4gICAgICAgICAgICAgICAgKGNoaWxkcmVuICYmIGNoaWxkcmVuLmtleSA9PT0gY2FsbGJhY2sua2V5KVxuICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICA6IChcIlwiICsgY2FsbGJhY2sua2V5KS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LFxuICAgICAgICAgICAgICAgICAgICAgIFwiJCYvXCJcbiAgICAgICAgICAgICAgICAgICAgKSArIFwiL1wiKSArXG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2tcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgIGFycmF5LnB1c2goY2FsbGJhY2spKSxcbiAgICAgIDFcbiAgICApO1xuICBpbnZva2VDYWxsYmFjayA9IDA7XG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IFwiXCIgPT09IG5hbWVTb0ZhciA/IFwiLlwiIDogbmFtZVNvRmFyICsgXCI6XCI7XG4gIGlmIChpc0FycmF5SW1wbChjaGlsZHJlbikpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKylcbiAgICAgIChuYW1lU29GYXIgPSBjaGlsZHJlbltpXSksXG4gICAgICAgICh0eXBlID0gbmV4dE5hbWVQcmVmaXggKyBnZXRFbGVtZW50S2V5KG5hbWVTb0ZhciwgaSkpLFxuICAgICAgICAoaW52b2tlQ2FsbGJhY2sgKz0gbWFwSW50b0FycmF5KFxuICAgICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgICBhcnJheSxcbiAgICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgKSk7XG4gIGVsc2UgaWYgKCgoaSA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pKSwgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaSkpXG4gICAgZm9yIChcbiAgICAgIGNoaWxkcmVuID0gaS5jYWxsKGNoaWxkcmVuKSwgaSA9IDA7XG4gICAgICAhKG5hbWVTb0ZhciA9IGNoaWxkcmVuLm5leHQoKSkuZG9uZTtcblxuICAgIClcbiAgICAgIChuYW1lU29GYXIgPSBuYW1lU29GYXIudmFsdWUpLFxuICAgICAgICAodHlwZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0RWxlbWVudEtleShuYW1lU29GYXIsIGkrKykpLFxuICAgICAgICAoaW52b2tlQ2FsbGJhY2sgKz0gbWFwSW50b0FycmF5KFxuICAgICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgICBhcnJheSxcbiAgICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgKSk7XG4gIGVsc2UgaWYgKFwib2JqZWN0XCIgPT09IHR5cGUpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2hpbGRyZW4udGhlbilcbiAgICAgIHJldHVybiBtYXBJbnRvQXJyYXkoXG4gICAgICAgIHJlc29sdmVUaGVuYWJsZShjaGlsZHJlbiksXG4gICAgICAgIGFycmF5LFxuICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICApO1xuICAgIGFycmF5ID0gU3RyaW5nKGNoaWxkcmVuKTtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIiArXG4gICAgICAgIChcIltvYmplY3QgT2JqZWN0XVwiID09PSBhcnJheVxuICAgICAgICAgID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKFwiLCBcIikgKyBcIn1cIlxuICAgICAgICAgIDogYXJyYXkpICtcbiAgICAgICAgXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCJcbiAgICApO1xuICB9XG4gIHJldHVybiBpbnZva2VDYWxsYmFjaztcbn1cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChudWxsID09IGNoaWxkcmVuKSByZXR1cm4gY2hpbGRyZW47XG4gIHZhciByZXN1bHQgPSBbXSxcbiAgICBjb3VudCA9IDA7XG4gIG1hcEludG9BcnJheShjaGlsZHJlbiwgcmVzdWx0LCBcIlwiLCBcIlwiLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBjb3VudCsrKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBsYXp5SW5pdGlhbGl6ZXIocGF5bG9hZCkge1xuICBpZiAoLTEgPT09IHBheWxvYWQuX3N0YXR1cykge1xuICAgIHZhciBjdG9yID0gcGF5bG9hZC5fcmVzdWx0O1xuICAgIGN0b3IgPSBjdG9yKCk7XG4gICAgY3Rvci50aGVuKFxuICAgICAgZnVuY3Rpb24gKG1vZHVsZU9iamVjdCkge1xuICAgICAgICBpZiAoMCA9PT0gcGF5bG9hZC5fc3RhdHVzIHx8IC0xID09PSBwYXlsb2FkLl9zdGF0dXMpXG4gICAgICAgICAgKHBheWxvYWQuX3N0YXR1cyA9IDEpLCAocGF5bG9hZC5fcmVzdWx0ID0gbW9kdWxlT2JqZWN0KTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKDAgPT09IHBheWxvYWQuX3N0YXR1cyB8fCAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKVxuICAgICAgICAgIChwYXlsb2FkLl9zdGF0dXMgPSAyKSwgKHBheWxvYWQuX3Jlc3VsdCA9IGVycm9yKTtcbiAgICAgIH1cbiAgICApO1xuICAgIC0xID09PSBwYXlsb2FkLl9zdGF0dXMgJiYgKChwYXlsb2FkLl9zdGF0dXMgPSAwKSwgKHBheWxvYWQuX3Jlc3VsdCA9IGN0b3IpKTtcbiAgfVxuICBpZiAoMSA9PT0gcGF5bG9hZC5fc3RhdHVzKSByZXR1cm4gcGF5bG9hZC5fcmVzdWx0LmRlZmF1bHQ7XG4gIHRocm93IHBheWxvYWQuX3Jlc3VsdDtcbn1cbnZhciByZXBvcnRHbG9iYWxFcnJvciA9XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlcG9ydEVycm9yXG4gICAgPyByZXBvcnRFcnJvclxuICAgIDogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygd2luZG93ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd2luZG93LkVycm9yRXZlbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IHdpbmRvdy5FcnJvckV2ZW50KFwiZXJyb3JcIiwge1xuICAgICAgICAgICAgYnViYmxlczogITAsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiAhMCxcbiAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBlcnJvciAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBlcnJvciAmJlxuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKGVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCF3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCkpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvY2VzcyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByb2Nlc3MuZW1pdFxuICAgICAgICApIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoXCJ1bmNhdWdodEV4Y2VwdGlvblwiLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfTtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZXhwb3J0cy5DaGlsZHJlbiA9IHtcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgZm9yRWFjaDogZnVuY3Rpb24gKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgICBtYXBDaGlsZHJlbihcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3JFYWNoRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSxcbiAgICAgIGZvckVhY2hDb250ZXh0XG4gICAgKTtcbiAgfSxcbiAgY291bnQ6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHZhciBuID0gMDtcbiAgICBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuY3Rpb24gKCkge1xuICAgICAgbisrO1xuICAgIH0pO1xuICAgIHJldHVybiBuO1xuICB9LFxuICB0b0FycmF5OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gKFxuICAgICAgbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9KSB8fCBbXVxuICAgICk7XG4gIH0sXG4gIG9ubHk6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIGlmICghaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKVxuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCJcbiAgICAgICk7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG59O1xuZXhwb3J0cy5Db21wb25lbnQgPSBDb21wb25lbnQ7XG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xuZXhwb3J0cy5QdXJlQ29tcG9uZW50ID0gUHVyZUNvbXBvbmVudDtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG5leHBvcnRzLlN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbmV4cG9ydHMuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFID1cbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHM7XG5leHBvcnRzLmFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTtcbn07XG5leHBvcnRzLmNhY2hlID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICBpZiAobnVsbCA9PT0gZWxlbWVudCB8fCB2b2lkIDAgPT09IGVsZW1lbnQpXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcIlRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIgKyBlbGVtZW50ICsgXCIuXCJcbiAgICApO1xuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpLFxuICAgIGtleSA9IGVsZW1lbnQua2V5LFxuICAgIG93bmVyID0gdm9pZCAwO1xuICBpZiAobnVsbCAhPSBjb25maWcpXG4gICAgZm9yIChwcm9wTmFtZSBpbiAodm9pZCAwICE9PSBjb25maWcucmVmICYmIChvd25lciA9IHZvaWQgMCksXG4gICAgdm9pZCAwICE9PSBjb25maWcua2V5ICYmIChrZXkgPSBcIlwiICsgY29uZmlnLmtleSksXG4gICAgY29uZmlnKSlcbiAgICAgICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpIHx8XG4gICAgICAgIFwia2V5XCIgPT09IHByb3BOYW1lIHx8XG4gICAgICAgIFwiX19zZWxmXCIgPT09IHByb3BOYW1lIHx8XG4gICAgICAgIFwiX19zb3VyY2VcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgKFwicmVmXCIgPT09IHByb3BOYW1lICYmIHZvaWQgMCA9PT0gY29uZmlnLnJlZikgfHxcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV0pO1xuICB2YXIgcHJvcE5hbWUgPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKDEgPT09IHByb3BOYW1lKSBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICBlbHNlIGlmICgxIDwgcHJvcE5hbWUpIHtcbiAgICBmb3IgKHZhciBjaGlsZEFycmF5ID0gQXJyYXkocHJvcE5hbWUpLCBpID0gMDsgaSA8IHByb3BOYW1lOyBpKyspXG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0RWxlbWVudChlbGVtZW50LnR5cGUsIGtleSwgdm9pZCAwLCB2b2lkIDAsIG93bmVyLCBwcm9wcyk7XG59O1xuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gZnVuY3Rpb24gKGRlZmF1bHRWYWx1ZSkge1xuICBkZWZhdWx0VmFsdWUgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBfY3VycmVudFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IGRlZmF1bHRWYWx1ZSxcbiAgICBfdGhyZWFkQ291bnQ6IDAsXG4gICAgUHJvdmlkZXI6IG51bGwsXG4gICAgQ29uc3VtZXI6IG51bGxcbiAgfTtcbiAgZGVmYXVsdFZhbHVlLlByb3ZpZGVyID0gZGVmYXVsdFZhbHVlO1xuICBkZWZhdWx0VmFsdWUuQ29uc3VtZXIgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlNVTUVSX1RZUEUsXG4gICAgX2NvbnRleHQ6IGRlZmF1bHRWYWx1ZVxuICB9O1xuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufTtcbmV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZSxcbiAgICBwcm9wcyA9IHt9LFxuICAgIGtleSA9IG51bGw7XG4gIGlmIChudWxsICE9IGNvbmZpZylcbiAgICBmb3IgKHByb3BOYW1lIGluICh2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KSwgY29uZmlnKSlcbiAgICAgIGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiZcbiAgICAgICAgXCJrZXlcIiAhPT0gcHJvcE5hbWUgJiZcbiAgICAgICAgXCJfX3NlbGZcIiAhPT0gcHJvcE5hbWUgJiZcbiAgICAgICAgXCJfX3NvdXJjZVwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoMSA9PT0gY2hpbGRyZW5MZW5ndGgpIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGVsc2UgaWYgKDEgPCBjaGlsZHJlbkxlbmd0aCkge1xuICAgIGZvciAodmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCksIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKylcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcylcbiAgICBmb3IgKHByb3BOYW1lIGluICgoY2hpbGRyZW5MZW5ndGggPSB0eXBlLmRlZmF1bHRQcm9wcyksIGNoaWxkcmVuTGVuZ3RoKSlcbiAgICAgIHZvaWQgMCA9PT0gcHJvcHNbcHJvcE5hbWVdICYmXG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjaGlsZHJlbkxlbmd0aFtwcm9wTmFtZV0pO1xuICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgdm9pZCAwLCB2b2lkIDAsIG51bGwsIHByb3BzKTtcbn07XG5leHBvcnRzLmNyZWF0ZVJlZiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHsgY3VycmVudDogbnVsbCB9O1xufTtcbmV4cG9ydHMuZm9yd2FyZFJlZiA9IGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgcmV0dXJuIHsgJCR0eXBlb2Y6IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsIHJlbmRlcjogcmVuZGVyIH07XG59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudCA9IGlzVmFsaWRFbGVtZW50O1xuZXhwb3J0cy5sYXp5ID0gZnVuY3Rpb24gKGN0b3IpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTEFaWV9UWVBFLFxuICAgIF9wYXlsb2FkOiB7IF9zdGF0dXM6IC0xLCBfcmVzdWx0OiBjdG9yIH0sXG4gICAgX2luaXQ6IGxhenlJbml0aWFsaXplclxuICB9O1xufTtcbmV4cG9ydHMubWVtbyA9IGZ1bmN0aW9uICh0eXBlLCBjb21wYXJlKSB7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX01FTU9fVFlQRSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGNvbXBhcmU6IHZvaWQgMCA9PT0gY29tcGFyZSA/IG51bGwgOiBjb21wYXJlXG4gIH07XG59O1xuZXhwb3J0cy5zdGFydFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gc2NvcGUoKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICAgIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuICYmXG4gICAgICByZXR1cm5WYWx1ZS50aGVuKG5vb3AsIHJlcG9ydEdsb2JhbEVycm9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV91c2VDYWNoZVJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNhY2hlUmVmcmVzaCgpO1xufTtcbmV4cG9ydHMudXNlID0gZnVuY3Rpb24gKHVzYWJsZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2UodXNhYmxlKTtcbn07XG5leHBvcnRzLnVzZUFjdGlvblN0YXRlID0gZnVuY3Rpb24gKGFjdGlvbiwgaW5pdGlhbFN0YXRlLCBwZXJtYWxpbmspIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQWN0aW9uU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluayk7XG59O1xuZXhwb3J0cy51c2VDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDYWxsYmFjayhjYWxsYmFjaywgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VDb250ZXh0ID0gZnVuY3Rpb24gKENvbnRleHQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ29udGV4dChDb250ZXh0KTtcbn07XG5leHBvcnRzLnVzZURlYnVnVmFsdWUgPSBmdW5jdGlvbiAoKSB7fTtcbmV4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZURlZmVycmVkVmFsdWUodmFsdWUsIGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VFZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlSWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUlkKCk7XG59O1xuZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlID0gZnVuY3Rpb24gKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0ID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VJbnNlcnRpb25FZmZlY3QoY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdCA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VNZW1vID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VNZW1vKGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZU9wdGltaXN0aWMocGFzc3Rocm91Z2gsIHJlZHVjZXIpO1xufTtcbmV4cG9ydHMudXNlUmVkdWNlciA9IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG59O1xuZXhwb3J0cy51c2VSZWYgPSBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVJlZihpbml0aWFsVmFsdWUpO1xufTtcbmV4cG9ydHMudXNlU3RhdGUgPSBmdW5jdGlvbiAoaW5pdGlhbFN0YXRlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVN0YXRlKGluaXRpYWxTdGF0ZSk7XG59O1xuZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IGZ1bmN0aW9uIChcbiAgc3Vic2NyaWJlLFxuICBnZXRTbmFwc2hvdCxcbiAgZ2V0U2VydmVyU25hcHNob3Rcbikge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VTeW5jRXh0ZXJuYWxTdG9yZShcbiAgICBzdWJzY3JpYmUsXG4gICAgZ2V0U25hcHNob3QsXG4gICAgZ2V0U2VydmVyU25hcHNob3RcbiAgKTtcbn07XG5leHBvcnRzLnVzZVRyYW5zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVRyYW5zaXRpb24oKTtcbn07XG5leHBvcnRzLnZlcnNpb24gPSBcIjE5LjAuMFwiO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1jb21waWxlci1ydW50aW1lLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtY29tcGlsZXItcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBwdXNoKGhlYXAsIG5vZGUpIHtcbiAgdmFyIGluZGV4ID0gaGVhcC5sZW5ndGg7XG4gIGhlYXAucHVzaChub2RlKTtcbiAgYTogZm9yICg7IDAgPCBpbmRleDsgKSB7XG4gICAgdmFyIHBhcmVudEluZGV4ID0gKGluZGV4IC0gMSkgPj4+IDEsXG4gICAgICBwYXJlbnQgPSBoZWFwW3BhcmVudEluZGV4XTtcbiAgICBpZiAoMCA8IGNvbXBhcmUocGFyZW50LCBub2RlKSlcbiAgICAgIChoZWFwW3BhcmVudEluZGV4XSA9IG5vZGUpLCAoaGVhcFtpbmRleF0gPSBwYXJlbnQpLCAoaW5kZXggPSBwYXJlbnRJbmRleCk7XG4gICAgZWxzZSBicmVhayBhO1xuICB9XG59XG5mdW5jdGlvbiBwZWVrKGhlYXApIHtcbiAgcmV0dXJuIDAgPT09IGhlYXAubGVuZ3RoID8gbnVsbCA6IGhlYXBbMF07XG59XG5mdW5jdGlvbiBwb3AoaGVhcCkge1xuICBpZiAoMCA9PT0gaGVhcC5sZW5ndGgpIHJldHVybiBudWxsO1xuICB2YXIgZmlyc3QgPSBoZWFwWzBdLFxuICAgIGxhc3QgPSBoZWFwLnBvcCgpO1xuICBpZiAobGFzdCAhPT0gZmlyc3QpIHtcbiAgICBoZWFwWzBdID0gbGFzdDtcbiAgICBhOiBmb3IgKFxuICAgICAgdmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gaGVhcC5sZW5ndGgsIGhhbGZMZW5ndGggPSBsZW5ndGggPj4+IDE7XG4gICAgICBpbmRleCA8IGhhbGZMZW5ndGg7XG5cbiAgICApIHtcbiAgICAgIHZhciBsZWZ0SW5kZXggPSAyICogKGluZGV4ICsgMSkgLSAxLFxuICAgICAgICBsZWZ0ID0gaGVhcFtsZWZ0SW5kZXhdLFxuICAgICAgICByaWdodEluZGV4ID0gbGVmdEluZGV4ICsgMSxcbiAgICAgICAgcmlnaHQgPSBoZWFwW3JpZ2h0SW5kZXhdO1xuICAgICAgaWYgKDAgPiBjb21wYXJlKGxlZnQsIGxhc3QpKVxuICAgICAgICByaWdodEluZGV4IDwgbGVuZ3RoICYmIDAgPiBjb21wYXJlKHJpZ2h0LCBsZWZ0KVxuICAgICAgICAgID8gKChoZWFwW2luZGV4XSA9IHJpZ2h0KSxcbiAgICAgICAgICAgIChoZWFwW3JpZ2h0SW5kZXhdID0gbGFzdCksXG4gICAgICAgICAgICAoaW5kZXggPSByaWdodEluZGV4KSlcbiAgICAgICAgICA6ICgoaGVhcFtpbmRleF0gPSBsZWZ0KSxcbiAgICAgICAgICAgIChoZWFwW2xlZnRJbmRleF0gPSBsYXN0KSxcbiAgICAgICAgICAgIChpbmRleCA9IGxlZnRJbmRleCkpO1xuICAgICAgZWxzZSBpZiAocmlnaHRJbmRleCA8IGxlbmd0aCAmJiAwID4gY29tcGFyZShyaWdodCwgbGFzdCkpXG4gICAgICAgIChoZWFwW2luZGV4XSA9IHJpZ2h0KSwgKGhlYXBbcmlnaHRJbmRleF0gPSBsYXN0KSwgKGluZGV4ID0gcmlnaHRJbmRleCk7XG4gICAgICBlbHNlIGJyZWFrIGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBmaXJzdDtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICB2YXIgZGlmZiA9IGEuc29ydEluZGV4IC0gYi5zb3J0SW5kZXg7XG4gIHJldHVybiAwICE9PSBkaWZmID8gZGlmZiA6IGEuaWQgLSBiLmlkO1xufVxuZXhwb3J0cy51bnN0YWJsZV9ub3cgPSB2b2lkIDA7XG5pZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHBlcmZvcm1hbmNlICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHBlcmZvcm1hbmNlLm5vdykge1xuICB2YXIgbG9jYWxQZXJmb3JtYW5jZSA9IHBlcmZvcm1hbmNlO1xuICBleHBvcnRzLnVuc3RhYmxlX25vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbG9jYWxQZXJmb3JtYW5jZS5ub3coKTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBsb2NhbERhdGUgPSBEYXRlLFxuICAgIGluaXRpYWxUaW1lID0gbG9jYWxEYXRlLm5vdygpO1xuICBleHBvcnRzLnVuc3RhYmxlX25vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbG9jYWxEYXRlLm5vdygpIC0gaW5pdGlhbFRpbWU7XG4gIH07XG59XG52YXIgdGFza1F1ZXVlID0gW10sXG4gIHRpbWVyUXVldWUgPSBbXSxcbiAgdGFza0lkQ291bnRlciA9IDEsXG4gIGN1cnJlbnRUYXNrID0gbnVsbCxcbiAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSAzLFxuICBpc1BlcmZvcm1pbmdXb3JrID0gITEsXG4gIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITEsXG4gIGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMSxcbiAgbG9jYWxTZXRUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc2V0VGltZW91dCA/IHNldFRpbWVvdXQgOiBudWxsLFxuICBsb2NhbENsZWFyVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IG51bGwsXG4gIGxvY2FsU2V0SW1tZWRpYXRlID0gXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHNldEltbWVkaWF0ZSA/IHNldEltbWVkaWF0ZSA6IG51bGw7XG5mdW5jdGlvbiBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKSB7XG4gIGZvciAodmFyIHRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTsgbnVsbCAhPT0gdGltZXI7ICkge1xuICAgIGlmIChudWxsID09PSB0aW1lci5jYWxsYmFjaykgcG9wKHRpbWVyUXVldWUpO1xuICAgIGVsc2UgaWYgKHRpbWVyLnN0YXJ0VGltZSA8PSBjdXJyZW50VGltZSlcbiAgICAgIHBvcCh0aW1lclF1ZXVlKSxcbiAgICAgICAgKHRpbWVyLnNvcnRJbmRleCA9IHRpbWVyLmV4cGlyYXRpb25UaW1lKSxcbiAgICAgICAgcHVzaCh0YXNrUXVldWUsIHRpbWVyKTtcbiAgICBlbHNlIGJyZWFrO1xuICAgIHRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlVGltZW91dChjdXJyZW50VGltZSkge1xuICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITE7XG4gIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICBpZiAoIWlzSG9zdENhbGxiYWNrU2NoZWR1bGVkKVxuICAgIGlmIChudWxsICE9PSBwZWVrKHRhc2tRdWV1ZSkpXG4gICAgICAoaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMCksIHJlcXVlc3RIb3N0Q2FsbGJhY2soKTtcbiAgICBlbHNlIHtcbiAgICAgIHZhciBmaXJzdFRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTtcbiAgICAgIG51bGwgIT09IGZpcnN0VGltZXIgJiZcbiAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KGhhbmRsZVRpbWVvdXQsIGZpcnN0VGltZXIuc3RhcnRUaW1lIC0gY3VycmVudFRpbWUpO1xuICAgIH1cbn1cbnZhciBpc01lc3NhZ2VMb29wUnVubmluZyA9ICExLFxuICB0YXNrVGltZW91dElEID0gLTEsXG4gIGZyYW1lSW50ZXJ2YWwgPSA1LFxuICBzdGFydFRpbWUgPSAtMTtcbmZ1bmN0aW9uIHNob3VsZFlpZWxkVG9Ib3N0KCkge1xuICByZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKSAtIHN0YXJ0VGltZSA8IGZyYW1lSW50ZXJ2YWwgPyAhMSA6ICEwO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKCkge1xuICBpZiAoaXNNZXNzYWdlTG9vcFJ1bm5pbmcpIHtcbiAgICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICAgIHN0YXJ0VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgIHZhciBoYXNNb3JlV29yayA9ICEwO1xuICAgIHRyeSB7XG4gICAgICBhOiB7XG4gICAgICAgIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITE7XG4gICAgICAgIGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgJiZcbiAgICAgICAgICAoKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMSksXG4gICAgICAgICAgbG9jYWxDbGVhclRpbWVvdXQodGFza1RpbWVvdXRJRCksXG4gICAgICAgICAgKHRhc2tUaW1lb3V0SUQgPSAtMSkpO1xuICAgICAgICBpc1BlcmZvcm1pbmdXb3JrID0gITA7XG4gICAgICAgIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBiOiB7XG4gICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIGN1cnJlbnRUYXNrID0gcGVlayh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICBudWxsICE9PSBjdXJyZW50VGFzayAmJlxuICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmV4cGlyYXRpb25UaW1lID4gY3VycmVudFRpbWUgJiYgc2hvdWxkWWllbGRUb0hvc3QoKVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY3VycmVudFRhc2suY2FsbGJhY2s7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRUYXNrLnByaW9yaXR5TGV2ZWw7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRpbnVhdGlvbkNhbGxiYWNrID0gY2FsbGJhY2soXG4gICAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250aW51YXRpb25DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgY3VycmVudFRhc2suY2FsbGJhY2sgPSBjb250aW51YXRpb25DYWxsYmFjaztcbiAgICAgICAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICAgICAgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrID09PSBwZWVrKHRhc2tRdWV1ZSkgJiYgcG9wKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBwb3AodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgY3VycmVudFRhc2sgPSBwZWVrKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudFRhc2spIGhhc01vcmVXb3JrID0gITA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGZpcnN0VGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICAgICAgICAgICAgICBudWxsICE9PSBmaXJzdFRpbWVyICYmXG4gICAgICAgICAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KFxuICAgICAgICAgICAgICAgICAgaGFuZGxlVGltZW91dCxcbiAgICAgICAgICAgICAgICAgIGZpcnN0VGltZXIuc3RhcnRUaW1lIC0gY3VycmVudFRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBoYXNNb3JlV29yayA9ICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIChjdXJyZW50VGFzayA9IG51bGwpLFxuICAgICAgICAgICAgKGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsKSxcbiAgICAgICAgICAgIChpc1BlcmZvcm1pbmdXb3JrID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIGhhc01vcmVXb3JrID0gdm9pZCAwO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBoYXNNb3JlV29ya1xuICAgICAgICA/IHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKClcbiAgICAgICAgOiAoaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMSk7XG4gICAgfVxuICB9XG59XG52YXIgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmU7XG5pZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbG9jYWxTZXRJbW1lZGlhdGUpXG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIGxvY2FsU2V0SW1tZWRpYXRlKHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSk7XG4gIH07XG5lbHNlIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgTWVzc2FnZUNoYW5uZWwpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKSxcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBwZXJmb3JtV29ya1VudGlsRGVhZGxpbmU7XG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIHBvcnQucG9zdE1lc3NhZ2UobnVsbCk7XG4gIH07XG59IGVsc2VcbiAgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9jYWxTZXRUaW1lb3V0KHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSwgMCk7XG4gIH07XG5mdW5jdGlvbiByZXF1ZXN0SG9zdENhbGxiYWNrKCkge1xuICBpc01lc3NhZ2VMb29wUnVubmluZyB8fFxuICAgICgoaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMCksIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKCkpO1xufVxuZnVuY3Rpb24gcmVxdWVzdEhvc3RUaW1lb3V0KGNhbGxiYWNrLCBtcykge1xuICB0YXNrVGltZW91dElEID0gbG9jYWxTZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayhleHBvcnRzLnVuc3RhYmxlX25vdygpKTtcbiAgfSwgbXMpO1xufVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHkgPSA1O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSA9IDE7XG5leHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5ID0gNDtcbmV4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHkgPSAzO1xuZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmcgPSBudWxsO1xuZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSA9IDI7XG5leHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrID0gZnVuY3Rpb24gKHRhc2spIHtcbiAgdGFzay5jYWxsYmFjayA9IG51bGw7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgfHxcbiAgICBpc1BlcmZvcm1pbmdXb3JrIHx8XG4gICAgKChpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICEwKSwgcmVxdWVzdEhvc3RDYWxsYmFjaygpKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlID0gZnVuY3Rpb24gKGZwcykge1xuICAwID4gZnBzIHx8IDEyNSA8IGZwc1xuICAgID8gY29uc29sZS5lcnJvcihcbiAgICAgICAgXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIlxuICAgICAgKVxuICAgIDogKGZyYW1lSW50ZXJ2YWwgPSAwIDwgZnBzID8gTWF0aC5mbG9vcigxZTMgLyBmcHMpIDogNSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGN1cnJlbnRQcmlvcml0eUxldmVsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBwZWVrKHRhc2tRdWV1ZSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0ID0gZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICBzd2l0Y2ggKGN1cnJlbnRQcmlvcml0eUxldmVsKSB7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDM6XG4gICAgICB2YXIgcHJpb3JpdHlMZXZlbCA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICB9XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmlvcml0eUxldmVsO1xuICB0cnkge1xuICAgIHJldHVybiBldmVudEhhbmRsZXIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgfVxufTtcbmV4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb24gPSBmdW5jdGlvbiAoKSB7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50ID0gZnVuY3Rpb24gKCkge307XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSA9IGZ1bmN0aW9uIChwcmlvcml0eUxldmVsLCBldmVudEhhbmRsZXIpIHtcbiAgc3dpdGNoIChwcmlvcml0eUxldmVsKSB7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA0OlxuICAgIGNhc2UgNTpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcmlvcml0eUxldmVsID0gMztcbiAgfVxuICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVyKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoXG4gIHByaW9yaXR5TGV2ZWwsXG4gIGNhbGxiYWNrLFxuICBvcHRpb25zXG4pIHtcbiAgdmFyIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgbnVsbCAhPT0gb3B0aW9uc1xuICAgID8gKChvcHRpb25zID0gb3B0aW9ucy5kZWxheSksXG4gICAgICAob3B0aW9ucyA9XG4gICAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBvcHRpb25zICYmIDAgPCBvcHRpb25zXG4gICAgICAgICAgPyBjdXJyZW50VGltZSArIG9wdGlvbnNcbiAgICAgICAgICA6IGN1cnJlbnRUaW1lKSlcbiAgICA6IChvcHRpb25zID0gY3VycmVudFRpbWUpO1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdGltZW91dCA9IC0xO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdGltZW91dCA9IDI1MDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHRpbWVvdXQgPSAxMDczNzQxODIzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdGltZW91dCA9IDFlNDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aW1lb3V0ID0gNWUzO1xuICB9XG4gIHRpbWVvdXQgPSBvcHRpb25zICsgdGltZW91dDtcbiAgcHJpb3JpdHlMZXZlbCA9IHtcbiAgICBpZDogdGFza0lkQ291bnRlcisrLFxuICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICBwcmlvcml0eUxldmVsOiBwcmlvcml0eUxldmVsLFxuICAgIHN0YXJ0VGltZTogb3B0aW9ucyxcbiAgICBleHBpcmF0aW9uVGltZTogdGltZW91dCxcbiAgICBzb3J0SW5kZXg6IC0xXG4gIH07XG4gIG9wdGlvbnMgPiBjdXJyZW50VGltZVxuICAgID8gKChwcmlvcml0eUxldmVsLnNvcnRJbmRleCA9IG9wdGlvbnMpLFxuICAgICAgcHVzaCh0aW1lclF1ZXVlLCBwcmlvcml0eUxldmVsKSxcbiAgICAgIG51bGwgPT09IHBlZWsodGFza1F1ZXVlKSAmJlxuICAgICAgICBwcmlvcml0eUxldmVsID09PSBwZWVrKHRpbWVyUXVldWUpICYmXG4gICAgICAgIChpc0hvc3RUaW1lb3V0U2NoZWR1bGVkXG4gICAgICAgICAgPyAobG9jYWxDbGVhclRpbWVvdXQodGFza1RpbWVvdXRJRCksICh0YXNrVGltZW91dElEID0gLTEpKVxuICAgICAgICAgIDogKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMCksXG4gICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChoYW5kbGVUaW1lb3V0LCBvcHRpb25zIC0gY3VycmVudFRpbWUpKSlcbiAgICA6ICgocHJpb3JpdHlMZXZlbC5zb3J0SW5kZXggPSB0aW1lb3V0KSxcbiAgICAgIHB1c2godGFza1F1ZXVlLCBwcmlvcml0eUxldmVsKSxcbiAgICAgIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIHx8XG4gICAgICAgIGlzUGVyZm9ybWluZ1dvcmsgfHxcbiAgICAgICAgKChpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICEwKSwgcmVxdWVzdEhvc3RDYWxsYmFjaygpKSk7XG4gIHJldHVybiBwcmlvcml0eUxldmVsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQgPSBzaG91bGRZaWVsZFRvSG9zdDtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBwYXJlbnRQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcGFyZW50UHJpb3JpdHlMZXZlbDtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICAgIH1cbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiZXhwb3J0IGNvbnN0IGNyZWF0ZURlZmF1bHRJbnB1dFN0YXRlID0gKCkgPT4gKHtcbiAgICB2YWx1ZTogXCJcIixcbiAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgaXNNYXNrZWQ6IGZhbHNlLFxuICAgIGVycm9yTWVzc2FnZTogdW5kZWZpbmVkLFxufSk7XG5leHBvcnQgY29uc3QgY3JlYXRlRGVmYXVsdFNlbGVjdFN0YXRlID0gKGRlZmF1bHRWYWx1ZSkgPT4gKHtcbiAgICB2YWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2U6IHVuZGVmaW5lZCxcbn0pO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGMgYXMgX2MgfSBmcm9tIFwicmVhY3QvY29tcGlsZXItcnVudGltZVwiO1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRJbnB1dFN0YXRlLCBjcmVhdGVEZWZhdWx0U2VsZWN0U3RhdGUgfSBmcm9tIFwiLi4vdXRpbC9mb3JtXCI7XG5jb25zdCBkZWZhdWx0Rm9ybUNvbnRleHQgPSB7fTtcbmNvbnN0IEZvcm1Db250ZXh0ID0gY3JlYXRlQ29udGV4dChkZWZhdWx0Rm9ybUNvbnRleHQpO1xuY29uc3QgdXNlRm9ybSA9ICgpID0+IHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChGb3JtQ29udGV4dCk7XG59O1xuZnVuY3Rpb24gRm9ybVByb3ZpZGVyKHQwKSB7XG4gICAgY29uc3QgJCA9IF9jKDcpO1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHQwO1xuICAgIGxldCB0MTtcbiAgICBpZiAoJFswXSA9PT0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIikpIHtcbiAgICAgICAgdDEgPSB7XG4gICAgICAgICAgICBuYW1lOiBjcmVhdGVEZWZhdWx0SW5wdXRTdGF0ZSgpLFxuICAgICAgICAgICAgc3VybmFtZTogY3JlYXRlRGVmYXVsdElucHV0U3RhdGUoKSxcbiAgICAgICAgICAgIGNpdHk6IGNyZWF0ZURlZmF1bHRTZWxlY3RTdGF0ZShudWxsKSxcbiAgICAgICAgICAgIGRpc3RyaWN0OiBjcmVhdGVEZWZhdWx0U2VsZWN0U3RhdGUobnVsbCksXG4gICAgICAgICAgICBhZGRyZXNzOiBjcmVhdGVEZWZhdWx0SW5wdXRTdGF0ZSgpXG4gICAgICAgIH07XG4gICAgICAgICRbMF0gPSB0MTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQxID0gJFswXTtcbiAgICB9XG4gICAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gdXNlU3RhdGUodDEpO1xuICAgIGxldCB0MjtcbiAgICBpZiAoJFsxXSA9PT0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIikpIHtcbiAgICAgICAgdDIgPSAoZmllbGQsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBzZXREYXRhKHByZXZEYXRhID0+ICh7XG4gICAgICAgICAgICAgICAgLi4ucHJldkRhdGEsXG4gICAgICAgICAgICAgICAgW2ZpZWxkXToge1xuICAgICAgICAgICAgICAgICAgICAuLi5wcmV2RGF0YVtmaWVsZF0sXG4gICAgICAgICAgICAgICAgICAgIC4uLnZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgICAkWzFdID0gdDI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0MiA9ICRbMV07XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZUZpZWxkID0gdDI7XG4gICAgbGV0IHQzO1xuICAgIGlmICgkWzJdICE9PSBkYXRhKSB7XG4gICAgICAgIHQzID0ge1xuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIHVwZGF0ZUZpZWxkXG4gICAgICAgIH07XG4gICAgICAgICRbMl0gPSBkYXRhO1xuICAgICAgICAkWzNdID0gdDM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0MyA9ICRbM107XG4gICAgfVxuICAgIGxldCB0NDtcbiAgICBpZiAoJFs0XSAhPT0gY2hpbGRyZW4gfHwgJFs1XSAhPT0gdDMpIHtcbiAgICAgICAgdDQgPSBfanN4KEZvcm1Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB0MywgY2hpbGRyZW46IGNoaWxkcmVuIH0pO1xuICAgICAgICAkWzRdID0gY2hpbGRyZW47XG4gICAgICAgICRbNV0gPSB0MztcbiAgICAgICAgJFs2XSA9IHQ0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDQgPSAkWzZdO1xuICAgIH1cbiAgICByZXR1cm4gdDQ7XG59XG5leHBvcnQgeyBGb3JtUHJvdmlkZXIsIHVzZUZvcm0gfTtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBjIGFzIF9jIH0gZnJvbSBcInJlYWN0L2NvbXBpbGVyLXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBJbnB1dCA9IHQwID0+IHtcbiAgICBjb25zdCAkID0gX2MoMTgpO1xuICAgIGxldCBoaW50O1xuICAgIGxldCBpbnB1dFByb3BzO1xuICAgIGxldCBsYWJlbDtcbiAgICBpZiAoJFswXSAhPT0gdDApIHtcbiAgICAgICAgKHtcbiAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgaGludCxcbiAgICAgICAgICAgIC4uLmlucHV0UHJvcHNcbiAgICAgICAgfSA9IHQwKTtcbiAgICAgICAgJFswXSA9IHQwO1xuICAgICAgICAkWzFdID0gaGludDtcbiAgICAgICAgJFsyXSA9IGlucHV0UHJvcHM7XG4gICAgICAgICRbM10gPSBsYWJlbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGhpbnQgPSAkWzFdO1xuICAgICAgICBpbnB1dFByb3BzID0gJFsyXTtcbiAgICAgICAgbGFiZWwgPSAkWzNdO1xuICAgIH1cbiAgICBsZXQgdDE7XG4gICAgaWYgKCRbNF0gIT09IGlucHV0UHJvcHMuaWQgfHwgJFs1XSAhPT0gbGFiZWwpIHtcbiAgICAgICAgdDEgPSBfanN4KFwibGFiZWxcIiwgeyBodG1sRm9yOiBpbnB1dFByb3BzLmlkLCBjaGlsZHJlbjogbGFiZWwgfSk7XG4gICAgICAgICRbNF0gPSBpbnB1dFByb3BzLmlkO1xuICAgICAgICAkWzVdID0gbGFiZWw7XG4gICAgICAgICRbNl0gPSB0MTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQxID0gJFs2XTtcbiAgICB9XG4gICAgY29uc3QgdDIgPSBpbnB1dFByb3BzLmF1dG9Db21wbGV0ZSB8fCBcIm5vbmVcIjtcbiAgICBjb25zdCB0MyA9IGAke2lucHV0UHJvcHMuaWR9LWhpbnRgO1xuICAgIGxldCB0NDtcbiAgICBpZiAoJFs3XSAhPT0gaW5wdXRQcm9wcyB8fCAkWzhdICE9PSB0MiB8fCAkWzldICE9PSB0Mykge1xuICAgICAgICB0NCA9IF9qc3goXCJpbnB1dFwiLCB7IC4uLmlucHV0UHJvcHMsIGF1dG9Db21wbGV0ZTogdDIsIFwiYXJpYS1kZXNjcmliZWRieVwiOiB0MyB9KTtcbiAgICAgICAgJFs3XSA9IGlucHV0UHJvcHM7XG4gICAgICAgICRbOF0gPSB0MjtcbiAgICAgICAgJFs5XSA9IHQzO1xuICAgICAgICAkWzEwXSA9IHQ0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDQgPSAkWzEwXTtcbiAgICB9XG4gICAgbGV0IHQ1O1xuICAgIGlmICgkWzExXSAhPT0gaGludCB8fCAkWzEyXSAhPT0gaW5wdXRQcm9wcy5pZCkge1xuICAgICAgICB0NSA9IGhpbnQgJiYgX2pzeChcInNwYW5cIiwgeyBpZDogYCR7aW5wdXRQcm9wcy5pZH0taGludGAsIGNsYXNzTmFtZTogXCJoaW50XCIsIGNoaWxkcmVuOiBoaW50IH0pO1xuICAgICAgICAkWzExXSA9IGhpbnQ7XG4gICAgICAgICRbMTJdID0gaW5wdXRQcm9wcy5pZDtcbiAgICAgICAgJFsxM10gPSB0NTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQ1ID0gJFsxM107XG4gICAgfVxuICAgIGxldCB0NjtcbiAgICBpZiAoJFsxNF0gIT09IHQxIHx8ICRbMTVdICE9PSB0NCB8fCAkWzE2XSAhPT0gdDUpIHtcbiAgICAgICAgdDYgPSBfanN4cyhcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJpbnB1dC13cmFwcGVyXCIsIGNoaWxkcmVuOiBbdDEsIHQ0LCB0NV0gfSk7XG4gICAgICAgICRbMTRdID0gdDE7XG4gICAgICAgICRbMTVdID0gdDQ7XG4gICAgICAgICRbMTZdID0gdDU7XG4gICAgICAgICRbMTddID0gdDY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0NiA9ICRbMTddO1xuICAgIH1cbiAgICByZXR1cm4gdDY7XG59O1xuIiwiZXhwb3J0IGNvbnN0IHJlbmRlclN0YXRzRGF0YSA9IHtcbiAgICBcImZpbHRlci1kaXN0cmljdC1saXN0XCI6IDAsXG4gICAgXCJzZWxlY3Qtb3B0aW9uXCI6IDAsXG59O1xuY29uc3QgcmVuZGVyU3RhdHNFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVuZGVyLXN0YXRzID4gdWxcIik7XG5leHBvcnQgY29uc3QgaW5jcmVhc2VSZW5kZXJDb3VudCA9IChrZXkpID0+IHtcbiAgICByZW5kZXJTdGF0c0RhdGFba2V5XSArPSAxO1xuICAgIGNvbnN0IGtleUVsID0gcmVuZGVyU3RhdHNFbC5xdWVyeVNlbGVjdG9yKGBsaS4ke2tleX1gKTtcbiAgICBpZiAoIWtleUVsKSB7XG4gICAgICAgIGNvbnN0IG5ld0VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBuZXdFbC5jbGFzc0xpc3QuYWRkKGtleSk7XG4gICAgICAgIG5ld0VsLmlubmVySFRNTCA9IGA8cCBjbGFzcz1cImtleVwiPiR7a2V5fTwvcD4gPHAgY2xhc3M9XCJ2YWx1ZVwiPiR7cmVuZGVyU3RhdHNEYXRhW2tleV19PC9wPmA7XG4gICAgICAgIHJlbmRlclN0YXRzRWwuYXBwZW5kQ2hpbGQobmV3RWwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlbmRlclN0YXRzRWwucXVlcnlTZWxlY3RvcihgbGkuJHtrZXl9ID4gLnZhbHVlYCkudGV4dENvbnRlbnQgPVxuICAgICAgICByZW5kZXJTdGF0c0RhdGFba2V5XS50b1N0cmluZygpO1xufTtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBjIGFzIF9jIH0gZnJvbSBcInJlYWN0L2NvbXBpbGVyLXJ1bnRpbWVcIjtcbmltcG9ydCB7IGluY3JlYXNlUmVuZGVyQ291bnQgfSBmcm9tIFwiLi4vLi4vdXRpbC9yZW5kZXItc3RhdHMtZGF0YVwiO1xuZXhwb3J0IGNvbnN0IFNlbGVjdCA9IHQwID0+IHtcbiAgICBjb25zdCAkID0gX2MoMTkpO1xuICAgIGNvbnN0IHsgaWQsIGxhYmVsLCBvcHRpb25zLCB2YWx1ZSwgb25DaGFuZ2UsIHBsYWNlaG9sZGVyOiB0MSwgZGlzYWJsZWQ6IHQyIH0gPSB0MDtcbiAgICBjb25zdCBwbGFjZWhvbGRlciA9IHQxID09PSB1bmRlZmluZWQgPyBcIlNlbGVjdCBhbiBvcHRpb25cIiA6IHQxO1xuICAgIGNvbnN0IGRpc2FibGVkID0gdDIgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogdDI7XG4gICAgbGV0IHQzO1xuICAgIGlmICgkWzBdICE9PSBvbkNoYW5nZSkge1xuICAgICAgICB0MyA9IGV2ZW50ID0+IHtcbiAgICAgICAgICAgIG9uQ2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgICRbMF0gPSBvbkNoYW5nZTtcbiAgICAgICAgJFsxXSA9IHQzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDMgPSAkWzFdO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB0MztcbiAgICBsZXQgdDQ7XG4gICAgaWYgKCRbMl0gIT09IGxhYmVsKSB7XG4gICAgICAgIHQ0ID0gX2pzeChcImxhYmVsXCIsIHsgaHRtbEZvcjogXCJzZWxlY3RcIiwgY2xhc3NOYW1lOiBcInNlbGVjdC1sYWJlbFwiLCBjaGlsZHJlbjogbGFiZWwgfSk7XG4gICAgICAgICRbMl0gPSBsYWJlbDtcbiAgICAgICAgJFszXSA9IHQ0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDQgPSAkWzNdO1xuICAgIH1cbiAgICBjb25zdCB0NSA9IHZhbHVlIHx8IFwiXCI7XG4gICAgbGV0IHQ2O1xuICAgIGlmICgkWzRdICE9PSBwbGFjZWhvbGRlcikge1xuICAgICAgICB0NiA9IF9qc3goXCJvcHRpb25cIiwgeyB2YWx1ZTogXCJcIiwgZGlzYWJsZWQ6IHRydWUsIGNoaWxkcmVuOiBwbGFjZWhvbGRlciB9KTtcbiAgICAgICAgJFs0XSA9IHBsYWNlaG9sZGVyO1xuICAgICAgICAkWzVdID0gdDY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0NiA9ICRbNV07XG4gICAgfVxuICAgIGxldCB0NztcbiAgICBpZiAoJFs2XSAhPT0gb3B0aW9ucykge1xuICAgICAgICB0NyA9IG9wdGlvbnMubWFwKF90ZW1wKTtcbiAgICAgICAgJFs2XSA9IG9wdGlvbnM7XG4gICAgICAgICRbN10gPSB0NztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQ3ID0gJFs3XTtcbiAgICB9XG4gICAgbGV0IHQ4O1xuICAgIGlmICgkWzhdICE9PSBkaXNhYmxlZCB8fCAkWzldICE9PSBoYW5kbGVDaGFuZ2UgfHwgJFsxMF0gIT09IGlkIHx8ICRbMTFdICE9PSBsYWJlbCB8fCAkWzEyXSAhPT0gdDUgfHwgJFsxM10gIT09IHQ2IHx8ICRbMTRdICE9PSB0Nykge1xuICAgICAgICB0OCA9IF9qc3hzKFwic2VsZWN0XCIsIHsgaWQ6IGlkLCB2YWx1ZTogdDUsIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsIGRpc2FibGVkOiBkaXNhYmxlZCwgXCJhcmlhLWxhYmVsXCI6IGxhYmVsLCBcImFyaWEtcmVxdWlyZWRcIjogXCJ0cnVlXCIsIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCwgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIiwgY2xhc3NOYW1lOiBcInNlbGVjdC1pbnB1dFwiLCBjaGlsZHJlbjogW3Q2LCB0N10gfSk7XG4gICAgICAgICRbOF0gPSBkaXNhYmxlZDtcbiAgICAgICAgJFs5XSA9IGhhbmRsZUNoYW5nZTtcbiAgICAgICAgJFsxMF0gPSBpZDtcbiAgICAgICAgJFsxMV0gPSBsYWJlbDtcbiAgICAgICAgJFsxMl0gPSB0NTtcbiAgICAgICAgJFsxM10gPSB0NjtcbiAgICAgICAgJFsxNF0gPSB0NztcbiAgICAgICAgJFsxNV0gPSB0ODtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQ4ID0gJFsxNV07XG4gICAgfVxuICAgIGxldCB0OTtcbiAgICBpZiAoJFsxNl0gIT09IHQ0IHx8ICRbMTddICE9PSB0OCkge1xuICAgICAgICB0OSA9IF9qc3hzKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInNlbGVjdC13cmFwcGVyXCIsIGNoaWxkcmVuOiBbdDQsIHQ4XSB9KTtcbiAgICAgICAgJFsxNl0gPSB0NDtcbiAgICAgICAgJFsxN10gPSB0ODtcbiAgICAgICAgJFsxOF0gPSB0OTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQ5ID0gJFsxOF07XG4gICAgfVxuICAgIHJldHVybiB0OTtcbn07XG5mdW5jdGlvbiBfdGVtcChvcHRpb24pIHtcbiAgICBpbmNyZWFzZVJlbmRlckNvdW50KFwic2VsZWN0LW9wdGlvblwiKTtcbiAgICByZXR1cm4gX2pzeChcIm9wdGlvblwiLCB7IHZhbHVlOiBvcHRpb24udmFsdWUsIGNoaWxkcmVuOiBvcHRpb24ubGFiZWwgfSwgb3B0aW9uLnZhbHVlKTtcbn1cbiIsImV4cG9ydCBjb25zdCBDSVRZX0xJU1QgPSBbXG4gICAgeyB2YWx1ZTogMSwgbGFiZWw6IFwiVG9rYXRcIiB9LFxuICAgIHsgdmFsdWU6IDIsIGxhYmVsOiBcIklzdGFuYnVsXCIgfSxcbiAgICB7IHZhbHVlOiAzLCBsYWJlbDogXCJCZXJsaW5cIiB9LFxuICAgIHsgdmFsdWU6IDQsIGxhYmVsOiBcIkxvbmRvblwiIH0sXG4gICAgeyB2YWx1ZTogNSwgbGFiZWw6IFwiUGFyaXNcIiB9LFxuICAgIHsgdmFsdWU6IDYsIGxhYmVsOiBcIk5ldyBZb3JrXCIgfSxcbiAgICB7IHZhbHVlOiA3LCBsYWJlbDogXCJUb2t5b1wiIH0sXG4gICAgeyB2YWx1ZTogOCwgbGFiZWw6IFwiTW9zY293XCIgfSxcbiAgICB7IHZhbHVlOiA5LCBsYWJlbDogXCJSb21lXCIgfSxcbiAgICB7IHZhbHVlOiAxMCwgbGFiZWw6IFwiTWFkcmlkXCIgfSxcbiAgICB7IHZhbHVlOiAxMSwgbGFiZWw6IFwiTGlzYm9uXCIgfSxcbiAgICB7IHZhbHVlOiAxMiwgbGFiZWw6IFwiQXRoZW5zXCIgfSxcbiAgICB7IHZhbHVlOiAxMywgbGFiZWw6IFwiQnVkYXBlc3RcIiB9LFxuICAgIHsgdmFsdWU6IDE0LCBsYWJlbDogXCJQcmFndWVcIiB9LFxuICAgIHsgdmFsdWU6IDE1LCBsYWJlbDogXCJWaWVubmFcIiB9LFxuICAgIHsgdmFsdWU6IDE2LCBsYWJlbDogXCJXYXJzYXdcIiB9LFxuICAgIHsgdmFsdWU6IDE3LCBsYWJlbDogXCJTdG9ja2hvbG1cIiB9LFxuICAgIHsgdmFsdWU6IDE4LCBsYWJlbDogXCJIZWxzaW5raVwiIH0sXG4gICAgeyB2YWx1ZTogMTksIGxhYmVsOiBcIk9zbG9cIiB9LFxuICAgIHsgdmFsdWU6IDIwLCBsYWJlbDogXCJDb3BlbmhhZ2VuXCIgfSxcbl07XG5leHBvcnQgY29uc3QgQ0lUWV9JRF9QT1NJVElPTl9NQVAgPSB7XG4gICAgMTogWzQwLjMxMzksIDM2LjU1NDRdLFxuICAgIDI6IFs0MS4wMDgyLCAyOC45Nzg0XSxcbiAgICAzOiBbNTIuNTIsIDEzLjQwNV0sXG4gICAgNDogWzUxLjUwNzQsIC0wLjEyNzhdLFxuICAgIDU6IFs0OC44NTY2LCAyLjM1MjJdLFxuICAgIDY6IFs0MC43MTI4LCAtNzQuMDA2XSxcbiAgICA3OiBbMzUuNjg5NSwgMTM5LjY5MTddLFxuICAgIDg6IFs1NS43NTU4LCAzNy42MTc2XSxcbiAgICA5OiBbNDEuOTAyOCwgMTIuNDk2NF0sXG4gICAgMTA6IFs0MC40MTY4LCAtMy43MDM4XSxcbiAgICAxMTogWzM4LjcyMjMsIC05LjEzOTNdLFxuICAgIDEyOiBbMzcuOTgzOCwgMjMuNzI3NV0sXG4gICAgMTM6IFs0Ny40OTc5LCAxOS4wNDAyXSxcbiAgICAxNDogWzUwLjA3NTUsIDE0LjQzNzhdLFxuICAgIDE1OiBbNDguMjA4MiwgMTYuMzczOF0sXG4gICAgMTY6IFs1Mi4yMjk3LCAyMS4wMTIyXSxcbiAgICAxNzogWzU5LjMyOTMsIDE4LjA2ODZdLFxuICAgIDE4OiBbNjAuMTY5NSwgMjQuOTM1NF0sXG4gICAgMTk6IFs1OS45MTM5LCAxMC43NTIyXSxcbiAgICAyMDogWzU1LjY3NjEsIDEyLjU2ODNdLFxufTtcbmV4cG9ydCBjb25zdCBESVNUUklDVF9MSVNUID0gW1xuICAgIHsgdmFsdWU6IDEsIGxhYmVsOiBcIkJlc2lrdGFzXCIsIGNpdHlJZDogMiB9LFxuICAgIHsgdmFsdWU6IDIsIGxhYmVsOiBcIkthZGlrb3lcIiwgY2l0eUlkOiAyIH0sXG4gICAgeyB2YWx1ZTogNTUsIGxhYmVsOiBcIkxldmVudFwiLCBjaXR5SWQ6IDIgfSxcbiAgICB7IHZhbHVlOiAzLCBsYWJlbDogXCJGYXRpaFwiLCBjaXR5SWQ6IDIgfSxcbiAgICB7IHZhbHVlOiA0LCBsYWJlbDogXCJTYXJpeWVyXCIsIGNpdHlJZDogMiB9LFxuICAgIHsgdmFsdWU6IDUsIGxhYmVsOiBcIlVza3VkYXJcIiwgY2l0eUlkOiAyIH0sXG4gICAgeyB2YWx1ZTogNiwgbGFiZWw6IFwiQmV5b2dsdVwiLCBjaXR5SWQ6IDIgfSxcbiAgICB7IHZhbHVlOiA3LCBsYWJlbDogXCJUb2thdCBNZXJrZXpcIiwgY2l0eUlkOiAxIH0sXG4gICAgeyB2YWx1ZTogOCwgbGFiZWw6IFwiRXJiYWFcIiwgY2l0eUlkOiAxIH0sXG4gICAgeyB2YWx1ZTogOSwgbGFiZWw6IFwiVHVyaGFsXCIsIGNpdHlJZDogMSB9LFxuICAgIHsgdmFsdWU6IDEwLCBsYWJlbDogXCJaaWxlXCIsIGNpdHlJZDogMSB9LFxuICAgIHsgdmFsdWU6IDE2LCBsYWJlbDogXCJCZXJsaW4gTWl0dGVcIiwgY2l0eUlkOiAzIH0sXG4gICAgeyB2YWx1ZTogMTcsIGxhYmVsOiBcIkJlcmxpbiBLcmV1emJlcmdcIiwgY2l0eUlkOiAzIH0sXG4gICAgeyB2YWx1ZTogMTgsIGxhYmVsOiBcIkJlcmxpbiBDaGFybG90dGVuYnVyZ1wiLCBjaXR5SWQ6IDMgfSxcbiAgICB7IHZhbHVlOiAxOSwgbGFiZWw6IFwiQmVybGluIEZyaWVkcmljaHNoYWluXCIsIGNpdHlJZDogMyB9LFxuICAgIHsgdmFsdWU6IDIwLCBsYWJlbDogXCJCZXJsaW4gTmV1a29sbG5cIiwgY2l0eUlkOiAzIH0sXG4gICAgeyB2YWx1ZTogMjEsIGxhYmVsOiBcIkxvbmRvbiBXZXN0bWluc3RlclwiLCBjaXR5SWQ6IDQgfSxcbiAgICB7IHZhbHVlOiAyMiwgbGFiZWw6IFwiTG9uZG9uIENhbWRlblwiLCBjaXR5SWQ6IDQgfSxcbiAgICB7IHZhbHVlOiAyMywgbGFiZWw6IFwiTG9uZG9uIEtlbnNpbmd0b25cIiwgY2l0eUlkOiA0IH0sXG4gICAgeyB2YWx1ZTogMjQsIGxhYmVsOiBcIkxvbmRvbiBJc2xpbmd0b25cIiwgY2l0eUlkOiA0IH0sXG4gICAgeyB2YWx1ZTogMjUsIGxhYmVsOiBcIkxvbmRvbiBIYWNrbmV5XCIsIGNpdHlJZDogNCB9LFxuICAgIHsgdmFsdWU6IDI2LCBsYWJlbDogXCJQYXJpcyAxXCIsIGNpdHlJZDogNSB9LFxuICAgIHsgdmFsdWU6IDI3LCBsYWJlbDogXCJQYXJpcyAyXCIsIGNpdHlJZDogNSB9LFxuICAgIHsgdmFsdWU6IDI4LCBsYWJlbDogXCJQYXJpcyAzXCIsIGNpdHlJZDogNSB9LFxuICAgIHsgdmFsdWU6IDMyLCBsYWJlbDogXCJOZXcgWW9yayBCcm9va2x5blwiLCBjaXR5SWQ6IDYgfSxcbiAgICB7IHZhbHVlOiAzMywgbGFiZWw6IFwiTmV3IFlvcmsgUXVlZW5zXCIsIGNpdHlJZDogNiB9LFxuICAgIHsgdmFsdWU6IDM0LCBsYWJlbDogXCJOZXcgWW9yayBCcm9ueFwiLCBjaXR5SWQ6IDYgfSxcbiAgICB7IHZhbHVlOiAzNSwgbGFiZWw6IFwiTmV3IFlvcmsgU3RhdGVuIElzbGFuZFwiLCBjaXR5SWQ6IDYgfSxcbiAgICB7IHZhbHVlOiAzNiwgbGFiZWw6IFwiVG9reW8gU2hpbmp1a3VcIiwgY2l0eUlkOiA3IH0sXG4gICAgeyB2YWx1ZTogMzcsIGxhYmVsOiBcIlRva3lvIFNoaWJ1eWFcIiwgY2l0eUlkOiA3IH0sXG4gICAgeyB2YWx1ZTogMzgsIGxhYmVsOiBcIlRva3lvIENoaXlvZGFcIiwgY2l0eUlkOiA3IH0sXG4gICAgeyB2YWx1ZTogMzksIGxhYmVsOiBcIlRva3lvIFRhaXRvXCIsIGNpdHlJZDogNyB9LFxuICAgIHsgdmFsdWU6IDQwLCBsYWJlbDogXCJUb2t5byBOZXJpbWFcIiwgY2l0eUlkOiA3IH0sXG4gICAgeyB2YWx1ZTogNDEsIGxhYmVsOiBcIk1vc2NvdyBUdmVyc2tveVwiLCBjaXR5SWQ6IDggfSxcbiAgICB7IHZhbHVlOiA0MiwgbGFiZWw6IFwiTW9zY293IEtoYW1vdm5pa2lcIiwgY2l0eUlkOiA4IH0sXG4gICAgeyB2YWx1ZTogNDMsIGxhYmVsOiBcIk1vc2NvdyBQcmVzbmVuc2t5XCIsIGNpdHlJZDogOCB9LFxuICAgIHsgdmFsdWU6IDQ0LCBsYWJlbDogXCJNb3Njb3cgQmFzbWFubnlcIiwgY2l0eUlkOiA4IH0sXG4gICAgeyB2YWx1ZTogNDYsIGxhYmVsOiBcIlJvbWUgQ2VudHJvIFN0b3JpY29cIiwgY2l0eUlkOiA5IH0sXG4gICAgeyB2YWx1ZTogNDcsIGxhYmVsOiBcIlJvbWUgVHJhc3RldmVyZVwiLCBjaXR5SWQ6IDkgfSxcbiAgICB7IHZhbHVlOiA0OCwgbGFiZWw6IFwiUm9tZSBPc3RpYVwiLCBjaXR5SWQ6IDkgfSxcbiAgICB7IHZhbHVlOiA0OSwgbGFiZWw6IFwiUm9tZSBQcmltYXZhbGxlXCIsIGNpdHlJZDogOSB9LFxuICAgIHsgdmFsdWU6IDUwLCBsYWJlbDogXCJSb21lIFRpYnVydGluYVwiLCBjaXR5SWQ6IDkgfSxcbiAgICB7IHZhbHVlOiA1MSwgbGFiZWw6IFwiTWFkcmlkIENlbnRyb1wiLCBjaXR5SWQ6IDEwIH0sXG4gICAgeyB2YWx1ZTogNTIsIGxhYmVsOiBcIk1hZHJpZCBTYWxhbWFuY2FcIiwgY2l0eUlkOiAxMCB9LFxuICAgIHsgdmFsdWU6IDUzLCBsYWJlbDogXCJNYWRyaWQgQ2hhbWJlcmlcIiwgY2l0eUlkOiAxMCB9LFxuXTtcbiIsImltcG9ydCB7IGpzeCBhcyBfanN4LCBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBjIGFzIF9jIH0gZnJvbSBcInJlYWN0L2NvbXBpbGVyLXJ1bnRpbWVcIjtcbmltcG9ydCB7IHVzZUZvcm0gfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZm9ybVwiO1xuaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLi4vaW5wdXRcIjtcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gXCIuLi9zZWxlY3RcIjtcbmltcG9ydCB7IENJVFlfTElTVCB9IGZyb20gXCIuLi8uLi9kYXRhL2xvY2F0aW9uXCI7XG5pbXBvcnQgeyBnZXREaXN0cmljdExpc3QgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5leHBvcnQgY29uc3QgRm9ybSA9ICgpID0+IHtcbiAgICBjb25zdCAkID0gX2MoMzQpO1xuICAgIGNvbnN0IHsgbmFtZSwgc3VybmFtZSwgY2l0eSwgZGlzdHJpY3QsIGFkZHJlc3MsIHVwZGF0ZUZpZWxkIH0gPSB1c2VGb3JtKCk7XG4gICAgbGV0IHQwO1xuICAgIGlmICgkWzBdICE9PSBjaXR5LnZhbHVlKSB7XG4gICAgICAgIHQwID0gZ2V0RGlzdHJpY3RMaXN0KGNpdHkudmFsdWUpO1xuICAgICAgICAkWzBdID0gY2l0eS52YWx1ZTtcbiAgICAgICAgJFsxXSA9IHQwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDAgPSAkWzFdO1xuICAgIH1cbiAgICBjb25zdCBmaWx0ZXJlZERpc3RyaWN0TGlzdCA9IHQwO1xuICAgIGxldCB0MTtcbiAgICBpZiAoJFsyXSAhPT0gdXBkYXRlRmllbGQpIHtcbiAgICAgICAgdDEgPSBldmVudCA9PiB1cGRhdGVGaWVsZChcIm5hbWVcIiwge1xuICAgICAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgICRbMl0gPSB1cGRhdGVGaWVsZDtcbiAgICAgICAgJFszXSA9IHQxO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDEgPSAkWzNdO1xuICAgIH1cbiAgICBsZXQgdDI7XG4gICAgaWYgKCRbNF0gIT09IG5hbWUudmFsdWUgfHwgJFs1XSAhPT0gdDEpIHtcbiAgICAgICAgdDIgPSBfanN4KElucHV0LCB7IHZhbHVlOiBuYW1lLnZhbHVlLCBvbkNoYW5nZTogdDEsIGlkOiBcIm5hbWVcIiwgbGFiZWw6IFwiTmFtZVwiLCBoaW50OiBcIlBsZWFzZSBvbmx5IHByb3ZpZGUgeW91ciBsZWdhbCBuYW1lIHdpdGhvdXQgc3VybmFtZVwiIH0pO1xuICAgICAgICAkWzRdID0gbmFtZS52YWx1ZTtcbiAgICAgICAgJFs1XSA9IHQxO1xuICAgICAgICAkWzZdID0gdDI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0MiA9ICRbNl07XG4gICAgfVxuICAgIGxldCB0MztcbiAgICBpZiAoJFs3XSAhPT0gdXBkYXRlRmllbGQpIHtcbiAgICAgICAgdDMgPSBldmVudF8wID0+IHVwZGF0ZUZpZWxkKFwic3VybmFtZVwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogZXZlbnRfMC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICAkWzddID0gdXBkYXRlRmllbGQ7XG4gICAgICAgICRbOF0gPSB0MztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQzID0gJFs4XTtcbiAgICB9XG4gICAgbGV0IHQ0O1xuICAgIGlmICgkWzldICE9PSBzdXJuYW1lLnZhbHVlIHx8ICRbMTBdICE9PSB0Mykge1xuICAgICAgICB0NCA9IF9qc3goSW5wdXQsIHsgdmFsdWU6IHN1cm5hbWUudmFsdWUsIG9uQ2hhbmdlOiB0MywgaWQ6IFwic3VybmFtZVwiLCBsYWJlbDogXCJTdXJuYW1lXCIgfSk7XG4gICAgICAgICRbOV0gPSBzdXJuYW1lLnZhbHVlO1xuICAgICAgICAkWzEwXSA9IHQzO1xuICAgICAgICAkWzExXSA9IHQ0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDQgPSAkWzExXTtcbiAgICB9XG4gICAgbGV0IHQ1O1xuICAgIGlmICgkWzEyXSAhPT0gdXBkYXRlRmllbGQpIHtcbiAgICAgICAgdDUgPSB2YWx1ZSA9PiB1cGRhdGVGaWVsZChcImNpdHlcIiwge1xuICAgICAgICAgICAgdmFsdWU6IE51bWJlcih2YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgICAgICRbMTJdID0gdXBkYXRlRmllbGQ7XG4gICAgICAgICRbMTNdID0gdDU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0NSA9ICRbMTNdO1xuICAgIH1cbiAgICBsZXQgdDY7XG4gICAgaWYgKCRbMTRdICE9PSBjaXR5LnZhbHVlIHx8ICRbMTVdICE9PSB0NSkge1xuICAgICAgICB0NiA9IF9qc3goU2VsZWN0LCB7IGlkOiBcImNpdHlcIiwgbGFiZWw6IFwiQ2l0eVwiLCBvcHRpb25zOiBDSVRZX0xJU1QsIHZhbHVlOiBjaXR5LnZhbHVlLCBvbkNoYW5nZTogdDUgfSk7XG4gICAgICAgICRbMTRdID0gY2l0eS52YWx1ZTtcbiAgICAgICAgJFsxNV0gPSB0NTtcbiAgICAgICAgJFsxNl0gPSB0NjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHQ2ID0gJFsxNl07XG4gICAgfVxuICAgIGxldCB0NztcbiAgICBpZiAoJFsxN10gIT09IHVwZGF0ZUZpZWxkKSB7XG4gICAgICAgIHQ3ID0gdmFsdWVfMCA9PiB1cGRhdGVGaWVsZChcImRpc3RyaWN0XCIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIodmFsdWVfMClcbiAgICAgICAgfSk7XG4gICAgICAgICRbMTddID0gdXBkYXRlRmllbGQ7XG4gICAgICAgICRbMThdID0gdDc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0NyA9ICRbMThdO1xuICAgIH1cbiAgICBsZXQgdDg7XG4gICAgaWYgKCRbMTldICE9PSBkaXN0cmljdC52YWx1ZSB8fCAkWzIwXSAhPT0gZmlsdGVyZWREaXN0cmljdExpc3QgfHwgJFsyMV0gIT09IHQ3KSB7XG4gICAgICAgIHQ4ID0gX2pzeChTZWxlY3QsIHsgaWQ6IFwiZGlzdHJpY3RcIiwgbGFiZWw6IFwiRGlzdHJpY3RcIiwgb3B0aW9uczogZmlsdGVyZWREaXN0cmljdExpc3QsIHZhbHVlOiBkaXN0cmljdC52YWx1ZSwgb25DaGFuZ2U6IHQ3IH0pO1xuICAgICAgICAkWzE5XSA9IGRpc3RyaWN0LnZhbHVlO1xuICAgICAgICAkWzIwXSA9IGZpbHRlcmVkRGlzdHJpY3RMaXN0O1xuICAgICAgICAkWzIxXSA9IHQ3O1xuICAgICAgICAkWzIyXSA9IHQ4O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDggPSAkWzIyXTtcbiAgICB9XG4gICAgbGV0IHQ5O1xuICAgIGlmICgkWzIzXSAhPT0gdXBkYXRlRmllbGQpIHtcbiAgICAgICAgdDkgPSBldmVudF8xID0+IHVwZGF0ZUZpZWxkKFwiYWRkcmVzc1wiLCB7XG4gICAgICAgICAgICB2YWx1ZTogZXZlbnRfMS5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICAkWzIzXSA9IHVwZGF0ZUZpZWxkO1xuICAgICAgICAkWzI0XSA9IHQ5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDkgPSAkWzI0XTtcbiAgICB9XG4gICAgbGV0IHQxMDtcbiAgICBpZiAoJFsyNV0gIT09IGFkZHJlc3MudmFsdWUgfHwgJFsyNl0gIT09IHQ5KSB7XG4gICAgICAgIHQxMCA9IF9qc3goSW5wdXQsIHsgdmFsdWU6IGFkZHJlc3MudmFsdWUsIG9uQ2hhbmdlOiB0OSwgaWQ6IFwiYWRkcmVzc1wiLCBsYWJlbDogXCJBZGRyZXNzXCIsIGhpbnQ6IFwiUGxlYXNlIHByb3ZpZGUgeW91ciBmdWxsIHRleHQgYWRkcmVzc1wiIH0pO1xuICAgICAgICAkWzI1XSA9IGFkZHJlc3MudmFsdWU7XG4gICAgICAgICRbMjZdID0gdDk7XG4gICAgICAgICRbMjddID0gdDEwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDEwID0gJFsyN107XG4gICAgfVxuICAgIGxldCB0MTE7XG4gICAgaWYgKCRbMjhdICE9PSB0MTAgfHwgJFsyOV0gIT09IHQyIHx8ICRbMzBdICE9PSB0NCB8fCAkWzMxXSAhPT0gdDYgfHwgJFszMl0gIT09IHQ4KSB7XG4gICAgICAgIHQxMSA9IF9qc3hzKFwiZGl2XCIsIHsgY2hpbGRyZW46IFt0MiwgdDQsIHQ2LCB0OCwgdDEwXSB9KTtcbiAgICAgICAgJFsyOF0gPSB0MTA7XG4gICAgICAgICRbMjldID0gdDI7XG4gICAgICAgICRbMzBdID0gdDQ7XG4gICAgICAgICRbMzFdID0gdDY7XG4gICAgICAgICRbMzJdID0gdDg7XG4gICAgICAgICRbMzNdID0gdDExO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDExID0gJFszM107XG4gICAgfVxuICAgIHJldHVybiB0MTE7XG59O1xuIiwiaW1wb3J0IHsgRElTVFJJQ1RfTElTVCB9IGZyb20gXCIuLi8uLi9kYXRhL2xvY2F0aW9uXCI7XG5pbXBvcnQgeyBpbmNyZWFzZVJlbmRlckNvdW50IH0gZnJvbSBcIi4uLy4uL3V0aWwvcmVuZGVyLXN0YXRzLWRhdGFcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXN0cmljdExpc3QoY2l0eUlkKSB7XG4gICAgaW5jcmVhc2VSZW5kZXJDb3VudChcImZpbHRlci1kaXN0cmljdC1saXN0XCIpO1xuICAgIGlmICghY2l0eUlkKSB7XG4gICAgICAgIHJldHVybiBESVNUUklDVF9MSVNUO1xuICAgIH1cbiAgICByZXR1cm4gRElTVFJJQ1RfTElTVC5maWx0ZXIoKGRpc3RyaWN0KSA9PiBkaXN0cmljdC5jaXR5SWQgPT09IGNpdHlJZCk7XG59XG4iLCJpbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpKTtcbnJvb3QucmVuZGVyKF9qc3goQXBwLCB7fSkpO1xuIiwiaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGMgYXMgX2MgfSBmcm9tIFwicmVhY3QvY29tcGlsZXItcnVudGltZVwiO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gXCIuL2NvbXBvbmVudHMvZm9ybVwiO1xuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIH0gZnJvbSBcIi4vY29udGV4dHMvZm9ybVwiO1xuZXhwb3J0IGNvbnN0IEFwcCA9ICgpID0+IHtcbiAgICBjb25zdCAkID0gX2MoMSk7XG4gICAgbGV0IHQwO1xuICAgIGlmICgkWzBdID09PSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb19jYWNoZV9zZW50aW5lbFwiKSkge1xuICAgICAgICB0MCA9IF9qc3goRm9ybVByb3ZpZGVyLCB7IGNoaWxkcmVuOiBfanN4KEZvcm0sIHt9KSB9KTtcbiAgICAgICAgJFswXSA9IHQwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdDAgPSAkWzBdO1xuICAgIH1cbiAgICByZXR1cm4gdDA7XG59O1xuIl0sIm5hbWVzIjpbIlNjaGVkdWxlciIsIlJlYWN0IiwiUmVhY3RET00iLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiY29kZSIsInVybCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImkiLCJSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFIiwiU3ltYm9sIiwiZm9yIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1BST0ZJTEVSX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OU1VNRVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIiwiUkVBQ1RfTUVNT19UWVBFIiwiUkVBQ1RfTEFaWV9UWVBFIiwiUkVBQ1RfT0ZGU0NSRUVOX1RZUEUiLCJSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMIiwiTUFZQkVfSVRFUkFUT1JfU1lNQk9MIiwiaXRlcmF0b3IiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIlJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UiLCJnZXRDb21wb25lbnROYW1lRnJvbVR5cGUiLCJ0eXBlIiwiJCR0eXBlb2YiLCJkaXNwbGF5TmFtZSIsIm5hbWUiLCJfY29udGV4dCIsImlubmVyVHlwZSIsInJlbmRlciIsIl9wYXlsb2FkIiwiX2luaXQiLCJ4IiwicHJlZml4Iiwic3VmZml4IiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJfX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUiLCJhc3NpZ24iLCJPYmplY3QiLCJkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSIsIkVycm9yIiwibWF0Y2giLCJzdGFjayIsInRyaW0iLCJpbmRleE9mIiwicmVlbnRyeSIsImRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUiLCJmbiIsImNvbnN0cnVjdCIsInByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJ1bkluUm9vdEZyYW1lIiwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290IiwiRmFrZSIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwic2V0IiwiUmVmbGVjdCIsImNvbnRyb2wiLCJjYWxsIiwieCQwIiwieCQxIiwiY2F0Y2giLCJzYW1wbGUiLCJuYW1lUHJvcERlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ2YWx1ZSIsIl9SdW5JblJvb3RGcmFtZSREZXRlciIsInNhbXBsZVN0YWNrIiwiY29udHJvbFN0YWNrIiwic2FtcGxlTGluZXMiLCJzcGxpdCIsImNvbnRyb2xMaW5lcyIsImluY2x1ZGVzIiwiZnJhbWUiLCJyZXBsYWNlIiwiZGVzY3JpYmVGaWJlciIsImZpYmVyIiwidGFnIiwiZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kIiwid29ya0luUHJvZ3Jlc3MiLCJpbmZvIiwicmV0dXJuIiwibWVzc2FnZSIsImdldE5lYXJlc3RNb3VudGVkRmliZXIiLCJub2RlIiwibmVhcmVzdE1vdW50ZWQiLCJhbHRlcm5hdGUiLCJmbGFncyIsImdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIiLCJzdXNwZW5zZVN0YXRlIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhc3NlcnRJc01vdW50ZWQiLCJmaW5kQ3VycmVudEhvc3RGaWJlckltcGwiLCJjaGlsZCIsInNpYmxpbmciLCJpc0FycmF5SW1wbCIsIkFycmF5IiwiaXNBcnJheSIsIlJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzIiwiX19ET01fSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFIiwic2hhcmVkTm90UGVuZGluZ09iamVjdCIsInBlbmRpbmciLCJkYXRhIiwibWV0aG9kIiwiYWN0aW9uIiwidmFsdWVTdGFjayIsImluZGV4IiwiY3JlYXRlQ3Vyc29yIiwiZGVmYXVsdFZhbHVlIiwiY3VycmVudCIsInBvcCIsImN1cnNvciIsInB1c2giLCJjb250ZXh0U3RhY2tDdXJzb3IiLCJjb250ZXh0RmliZXJTdGFja0N1cnNvciIsInJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yIiwiaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciIsInB1c2hIb3N0Q29udGFpbmVyIiwibmV4dFJvb3RJbnN0YW5jZSIsIm5vZGVUeXBlIiwiZG9jdW1lbnRFbGVtZW50IiwibmFtZXNwYWNlVVJJIiwiZ2V0T3duSG9zdENvbnRleHQiLCJwYXJlbnROb2RlIiwidGFnTmFtZSIsImdldENoaWxkSG9zdENvbnRleHRQcm9kIiwicG9wSG9zdENvbnRhaW5lciIsInB1c2hIb3N0Q29udGV4dCIsImNvbnRleHQiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQiLCJwb3BIb3N0Q29udGV4dCIsIkhvc3RUcmFuc2l0aW9uQ29udGV4dCIsIl9jdXJyZW50VmFsdWUiLCJoYXNPd25Qcm9wZXJ0eSIsInNjaGVkdWxlQ2FsbGJhY2skMyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJjYW5jZWxDYWxsYmFjayQxIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJzaG91bGRZaWVsZCIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwicmVxdWVzdFBhaW50IiwidW5zdGFibGVfcmVxdWVzdFBhaW50Iiwibm93IiwidW5zdGFibGVfbm93IiwiZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIkltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJVc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiTm9ybWFsUHJpb3JpdHkkMSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiTG93UHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIklkbGVQcmlvcml0eSIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImxvZyQxIiwibG9nIiwidW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUiLCJyZW5kZXJlcklEIiwiaW5qZWN0ZWRIb29rIiwic2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMiLCJuZXdJc1N0cmljdE1vZGUiLCJzZXRTdHJpY3RNb2RlIiwiZXJyIiwiY2x6MzIiLCJNYXRoIiwiTE4yIiwibmV4dFRyYW5zaXRpb25MYW5lIiwibmV4dFJldHJ5TGFuZSIsImdldEhpZ2hlc3RQcmlvcml0eUxhbmVzIiwibGFuZXMiLCJwZW5kaW5nU3luY0xhbmVzIiwiZ2V0TmV4dExhbmVzIiwicm9vdCIsIndpcExhbmVzIiwicGVuZGluZ0xhbmVzIiwibmV4dExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIndhcm1MYW5lcyIsImZpbmlzaGVkTGFuZXMiLCJub25JZGxlUGVuZGluZ0xhbmVzIiwiY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyIsInJlbmRlckxhbmVzIiwiY29tcHV0ZUV4cGlyYXRpb25UaW1lIiwibGFuZSIsImN1cnJlbnRUaW1lIiwiY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUiLCJjbGFpbU5leHRSZXRyeUxhbmUiLCJjcmVhdGVMYW5lTWFwIiwiaW5pdGlhbCIsImxhbmVNYXAiLCJtYXJrUm9vdFVwZGF0ZWQkMSIsInVwZGF0ZUxhbmUiLCJtYXJrU3Bhd25lZERlZmVycmVkTGFuZSIsInNwYXduZWRMYW5lIiwiZW50YW5nbGVkTGFuZXMiLCJzcGF3bmVkTGFuZUluZGV4IiwiZW50YW5nbGVtZW50cyIsIm1hcmtSb290RW50YW5nbGVkIiwicm9vdEVudGFuZ2xlZExhbmVzIiwiaW5kZXgkOCIsImxhbmVzVG9FdmVudFByaW9yaXR5IiwicmVzb2x2ZVVwZGF0ZVByaW9yaXR5IiwidXBkYXRlUHJpb3JpdHkiLCJwIiwid2luZG93IiwiZXZlbnQiLCJnZXRFdmVudFByaW9yaXR5IiwicmFuZG9tS2V5IiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsImludGVybmFsSW5zdGFuY2VLZXkiLCJpbnRlcm5hbFByb3BzS2V5IiwiaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSIsImludGVybmFsRXZlbnRIYW5kbGVyc0tleSIsImludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkiLCJpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5IiwiaW50ZXJuYWxIb2lzdGFibGVNYXJrZXIiLCJkZXRhY2hEZWxldGVkSW5zdGFuY2UiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsInRhcmdldE5vZGUiLCJ0YXJnZXRJbnN0IiwiZ2V0UGFyZW50U3VzcGVuc2VJbnN0YW5jZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiaW5zdCIsInN0YXRlTm9kZSIsImdldFJlc291cmNlc0Zyb21Sb290IiwicmVzb3VyY2VzIiwiaG9pc3RhYmxlU3R5bGVzIiwiTWFwIiwiaG9pc3RhYmxlU2NyaXB0cyIsIm1hcmtOb2RlQXNIb2lzdGFibGUiLCJhbGxOYXRpdmVFdmVudHMiLCJTZXQiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicmVnaXN0ZXJUd29QaGFzZUV2ZW50IiwicmVnaXN0cmF0aW9uTmFtZSIsImRlcGVuZGVuY2llcyIsInJlZ2lzdGVyRGlyZWN0RXZlbnQiLCJhZGQiLCJjYW5Vc2VET00iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsIlJlZ0V4cCIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJ2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJzZXRWYWx1ZUZvckF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUiLCJ0ZXN0IiwicmVtb3ZlQXR0cmlidXRlIiwicHJlZml4JDEwIiwidG9Mb3dlckNhc2UiLCJzZXRBdHRyaWJ1dGUiLCJzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlIiwic2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlIiwibmFtZXNwYWNlIiwic2V0QXR0cmlidXRlTlMiLCJnZXRUb1N0cmluZ1ZhbHVlIiwiaXNDaGVja2FibGUiLCJlbGVtIiwibm9kZU5hbWUiLCJ0cmFjayIsIl92YWx1ZVRyYWNrZXIiLCJ2YWx1ZUZpZWxkIiwiZGVzY3JpcHRvciIsImNvbnN0cnVjdG9yIiwiY3VycmVudFZhbHVlIiwiZ2V0IiwidGhpcyIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidHJhY2tWYWx1ZU9uTm9kZSIsInVwZGF0ZVZhbHVlSWZDaGFuZ2VkIiwidHJhY2tlciIsImxhc3RWYWx1ZSIsImNoZWNrZWQiLCJnZXRBY3RpdmVFbGVtZW50IiwiZG9jIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJlIiwiZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4IiwiZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyIsImNoIiwiY2hhckNvZGVBdCIsInVwZGF0ZUlucHV0IiwiZWxlbWVudCIsImxhc3REZWZhdWx0VmFsdWUiLCJkZWZhdWx0Q2hlY2tlZCIsInNldERlZmF1bHRWYWx1ZSIsImluaXRJbnB1dCIsImlzSHlkcmF0aW5nIiwib3duZXJEb2N1bWVudCIsInVwZGF0ZU9wdGlvbnMiLCJtdWx0aXBsZSIsInByb3BWYWx1ZSIsInNldERlZmF1bHRTZWxlY3RlZCIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwidXBkYXRlVGV4dGFyZWEiLCJpbml0VGV4dGFyZWEiLCJjaGlsZHJlbiIsInRleHRDb250ZW50Iiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0IiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInVuaXRsZXNzTnVtYmVycyIsInNldFZhbHVlRm9yU3R5bGUiLCJzdHlsZSIsInN0eWxlTmFtZSIsImlzQ3VzdG9tUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImNzc0Zsb2F0IiwiaGFzIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJzdHlsZXMiLCJwcmV2U3R5bGVzIiwic3R5bGVOYW1lJDE2Iiwic3R5bGVOYW1lJDE3IiwiaXNDdXN0b21FbGVtZW50IiwiYWxpYXNlcyIsImlzSmF2YVNjcmlwdFByb3RvY29sIiwic2FuaXRpemVVUkwiLCJjdXJyZW50UmVwbGF5aW5nRXZlbnQiLCJnZXRFdmVudFRhcmdldCIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicmVzdG9yZVRhcmdldCIsInJlc3RvcmVRdWV1ZSIsInJlc3RvcmVTdGF0ZU9mVGFyZ2V0IiwiaW50ZXJuYWxJbnN0YW5jZSIsInByb3BzIiwiYSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvdGhlck5vZGUiLCJmb3JtIiwib3RoZXJQcm9wcyIsImlzSW5zaWRlRXZlbnRIYW5kbGVyIiwiYmF0Y2hlZFVwZGF0ZXMkMSIsImIiLCJmbHVzaFN5bmNXb3JrJDEiLCJnZXRMaXN0ZW5lciIsInBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdGFydFRleHQiLCJmYWxsYmFja1RleHQiLCJnZXREYXRhIiwic3RhcnQiLCJlbmQiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsImdldEV2ZW50Q2hhckNvZGUiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSIsImZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSIsImNyZWF0ZVN5bnRoZXRpY0V2ZW50IiwiSW50ZXJmYWNlIiwiU3ludGhldGljQmFzZUV2ZW50IiwicmVhY3ROYW1lIiwicmVhY3RFdmVudFR5cGUiLCJuYXRpdmVFdmVudFRhcmdldCIsInByb3BOYW1lIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwibGFzdE1vdmVtZW50WCIsImxhc3RNb3ZlbWVudFkiLCJsYXN0TW91c2VFdmVudCIsIkV2ZW50SW50ZXJmYWNlIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsImlzVHJ1c3RlZCIsIlN5bnRoZXRpY0V2ZW50IiwiVUlFdmVudEludGVyZmFjZSIsInZpZXciLCJkZXRhaWwiLCJTeW50aGV0aWNVSUV2ZW50IiwiTW91c2VFdmVudEludGVyZmFjZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJnZXRFdmVudE1vZGlmaWVyU3RhdGUiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiU3ludGhldGljTW91c2VFdmVudCIsIlN5bnRoZXRpY0RyYWdFdmVudCIsImRhdGFUcmFuc2ZlciIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJTeW50aGV0aWNBbmltYXRpb25FdmVudCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsImNsaXBib2FyZERhdGEiLCJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50Iiwibm9ybWFsaXplS2V5IiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRyYW5zbGF0ZVRvS2V5IiwibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwibW9kaWZpZXJTdGF0ZUdldHRlciIsImtleUFyZyIsIlN5bnRoZXRpY0tleWJvYXJkRXZlbnQiLCJrZXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiU3ludGhldGljUG9pbnRlckV2ZW50IiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiU3ludGhldGljVG91Y2hFdmVudCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJwcm9wZXJ0eU5hbWUiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJTeW50aGV0aWNUb2dnbGVFdmVudCIsIm5ld1N0YXRlIiwib2xkU3RhdGUiLCJFTkRfS0VZQ09ERVMiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiZG9jdW1lbnRNb2RlIiwiY2FuVXNlVGV4dElucHV0RXZlbnQiLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsIlNQQUNFQkFSX0NIQVIiLCJoYXNTcGFjZUtleXByZXNzIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kIiwiZG9tRXZlbnROYW1lIiwiZ2V0RGF0YUZyb21DdXN0b21FdmVudCIsImlzQ29tcG9zaW5nIiwic3VwcG9ydGVkSW5wdXRUeXBlcyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0aW1lIiwid2VlayIsImlzVGV4dElucHV0RWxlbWVudCIsImNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudCIsImRpc3BhdGNoUXVldWUiLCJhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJhY3RpdmVFbGVtZW50JDEiLCJhY3RpdmVFbGVtZW50SW5zdCQxIiwicnVuRXZlbnRJbkJhdGNoIiwicHJvY2Vzc0Rpc3BhdGNoUXVldWUiLCJnZXRJbnN0SWZWYWx1ZUNoYW5nZWQiLCJnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MyIsImlzU3VwcG9ydGVkJGpzY29tcCRpbmxpbmVfNDE4IiwiZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOSIsIm9uaW5wdXQiLCJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsImRldGFjaEV2ZW50IiwiaGFuZGxlUHJvcGVydHlDaGFuZ2UiLCJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJhdHRhY2hFdmVudCIsImdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCIsImdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQiLCJvYmplY3RJcyIsImlzIiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzIiwia2V5c0IiLCJjdXJyZW50S2V5IiwiZ2V0TGVhZk5vZGUiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Iiwib2Zmc2V0Iiwibm9kZUVuZCIsIm5leHRTaWJsaW5nIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImdldEFjdGl2ZUVsZW1lbnREZWVwIiwiY29udGFpbmVySW5mbyIsImRlZmF1bHRWaWV3IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImNvbnRlbnRFZGl0YWJsZSIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJmb2N1c2VkRWxlbSIsInByaW9yU2VsZWN0aW9uUmFuZ2UiLCJzZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwiZW5kTWFya2VyIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQiLCJhY3RpdmVFbGVtZW50SW5zdCIsImxhc3RTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJjb25zdHJ1Y3RTZWxlY3RFdmVudCIsIm1ha2VQcmVmaXhNYXAiLCJzdHlsZVByb3AiLCJldmVudE5hbWUiLCJwcmVmaXhlcyIsInZlbmRvclByZWZpeGVzIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9ucnVuIiwidHJhbnNpdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmNhbmNlbCIsInRyYW5zaXRpb25lbmQiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJBTklNQVRJT05fRU5EIiwiQU5JTUFUSU9OX0lURVJBVElPTiIsIkFOSU1BVElPTl9TVEFSVCIsIlRSQU5TSVRJT05fUlVOIiwiVFJBTlNJVElPTl9TVEFSVCIsIlRSQU5TSVRJT05fQ0FOQ0VMIiwiVFJBTlNJVElPTl9FTkQiLCJ0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcyIsInNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzIiwicmVnaXN0ZXJTaW1wbGVFdmVudCIsImNvbmN1cnJlbnRRdWV1ZXMiLCJjb25jdXJyZW50UXVldWVzSW5kZXgiLCJjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMiLCJmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzIiwiZW5kSW5kZXgiLCJxdWV1ZSIsInVwZGF0ZSIsIm5leHQiLCJtYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdCIsImVucXVldWVVcGRhdGUkMSIsImVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZSIsImdldFJvb3RGb3JVcGRhdGVkRmliZXIiLCJlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUiLCJzb3VyY2VGaWJlciIsImlzSGlkZGVuIiwicGFyZW50IiwiY2hpbGRMYW5lcyIsIl92aXNpYmlsaXR5IiwiaGlkZGVuVXBkYXRlcyIsIm5lc3RlZFVwZGF0ZUNvdW50Iiwicm9vdFdpdGhOZXN0ZWRVcGRhdGVzIiwiZW1wdHlDb250ZXh0T2JqZWN0IiwiQ2FwdHVyZWRTdGFja3MiLCJXZWFrTWFwIiwiY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIiLCJzb3VyY2UiLCJleGlzdGluZyIsImZvcmtTdGFjayIsImZvcmtTdGFja0luZGV4IiwidHJlZUZvcmtQcm92aWRlciIsInRyZWVGb3JrQ291bnQiLCJpZFN0YWNrIiwiaWRTdGFja0luZGV4IiwidHJlZUNvbnRleHRQcm92aWRlciIsInRyZWVDb250ZXh0SWQiLCJ0cmVlQ29udGV4dE92ZXJmbG93IiwicHVzaFRyZWVGb3JrIiwidG90YWxDaGlsZHJlbiIsInB1c2hUcmVlSWQiLCJiYXNlSWRXaXRoTGVhZGluZ0JpdCIsImJhc2VMZW5ndGgiLCJudW1iZXJPZk92ZXJmbG93Qml0cyIsInB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQiLCJwb3BUcmVlQ29udGV4dCIsImh5ZHJhdGlvblBhcmVudEZpYmVyIiwibmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsImh5ZHJhdGlvbkVycm9ycyIsInJvb3RPclNpbmdsZXRvbkNvbnRleHQiLCJIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiIsInRocm93T25IeWRyYXRpb25NaXNtYXRjaCIsInF1ZXVlSHlkcmF0aW9uRXJyb3IiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwiaW5zdGFuY2UiLCJtZW1vaXplZFByb3BzIiwibGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCIsIm1lZGlhRXZlbnRUeXBlcyIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsImNoZWNrRm9yVW5tYXRjaGVkVGV4dCIsInBvcG92ZXIiLCJvblNjcm9sbCIsIm9uU2Nyb2xsRW5kIiwib25DbGljayIsIm9uY2xpY2siLCJub29wJDEiLCJwb3BUb05leHRIb3N0UGFyZW50IiwicG9wSHlkcmF0aW9uU3RhdGUiLCJKU0NvbXBpbGVyX3RlbXAiLCJzaG91bGRDbGVhciIsInNob3VsZFNldFRleHRDb250ZW50IiwiZ2V0TmV4dEh5ZHJhdGFibGUiLCJyZXNldEh5ZHJhdGlvblN0YXRlIiwiZXJyb3IiLCJTdXNwZW5zZUV4Y2VwdGlvbiIsIlN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvbiIsIm5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSIsInRoZW4iLCJpc1RoZW5hYmxlUmVzb2x2ZWQiLCJ0aGVuYWJsZSIsInN0YXR1cyIsIm5vb3AkMyIsInRyYWNrVXNlZFRoZW5hYmxlIiwidGhlbmFibGVTdGF0ZSIsInJlYXNvbiIsIndvcmtJblByb2dyZXNzUm9vdCIsInNoZWxsU3VzcGVuZENvdW50ZXIiLCJmdWxmaWxsZWRWYWx1ZSIsImZ1bGZpbGxlZFRoZW5hYmxlIiwicmVqZWN0ZWRUaGVuYWJsZSIsInN1c3BlbmRlZFRoZW5hYmxlIiwiZ2V0U3VzcGVuZGVkVGhlbmFibGUiLCJ0aGVuYWJsZVN0YXRlJDEiLCJ0aGVuYWJsZUluZGV4Q291bnRlciQxIiwidW53cmFwVGhlbmFibGUiLCJjb2VyY2VSZWYiLCJyZWYiLCJ0aHJvd09uSW52YWxpZE9iamVjdFR5cGUiLCJyZXR1cm5GaWJlciIsIm5ld0NoaWxkIiwiam9pbiIsInJlc29sdmVMYXp5IiwibGF6eVR5cGUiLCJpbml0IiwiY3JlYXRlQ2hpbGRSZWNvbmNpbGVyIiwic2hvdWxkVHJhY2tTaWRlRWZmZWN0cyIsImRlbGV0ZUNoaWxkIiwiY2hpbGRUb0RlbGV0ZSIsImRlbGV0aW9ucyIsImRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuIiwiY3VycmVudEZpcnN0Q2hpbGQiLCJtYXBSZW1haW5pbmdDaGlsZHJlbiIsImV4aXN0aW5nQ2hpbGRyZW4iLCJ1c2VGaWJlciIsInBlbmRpbmdQcm9wcyIsImNyZWF0ZVdvcmtJblByb2dyZXNzIiwicGxhY2VDaGlsZCIsIm5ld0ZpYmVyIiwibGFzdFBsYWNlZEluZGV4IiwibmV3SW5kZXgiLCJwbGFjZVNpbmdsZUNoaWxkIiwidXBkYXRlVGV4dE5vZGUiLCJjcmVhdGVGaWJlckZyb21UZXh0IiwibW9kZSIsInVwZGF0ZUVsZW1lbnQiLCJlbGVtZW50VHlwZSIsInVwZGF0ZUZyYWdtZW50IiwiY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzIiwidXBkYXRlUG9ydGFsIiwicG9ydGFsIiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVGaWJlckZyb21Qb3J0YWwiLCJmcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50IiwiY3JlYXRlQ2hpbGQiLCJyZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uIiwidXBkYXRlU2xvdCIsIm9sZEZpYmVyIiwidXBkYXRlRnJvbU1hcCIsIm5ld0lkeCIsInJlY29uY2lsZUNoaWxkRmliZXJzSW1wbCIsIm5ld0NoaWxkcmVuIiwicmVzdWx0aW5nRmlyc3RDaGlsZCIsInByZXZpb3VzTmV3RmliZXIiLCJuZXh0T2xkRmliZXIiLCJkZWxldGUiLCJmb3JFYWNoIiwicmVjb25jaWxlQ2hpbGRyZW5BcnJheSIsInN0ZXAiLCJkb25lIiwicmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvciIsImZpcnN0Q2hpbGRGaWJlciIsImNyZWF0ZUZpYmVySW1wbENsYXNzIiwicmVjb25jaWxlQ2hpbGRGaWJlcnMiLCJtb3VudENoaWxkRmliZXJzIiwiY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciIsInByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciIsInB1c2hIaWRkZW5Db250ZXh0IiwiZW50YW5nbGVkUmVuZGVyTGFuZXMiLCJiYXNlTGFuZXMiLCJyZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrIiwicG9wSGlkZGVuQ29udGV4dCIsInN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yIiwic2hlbGxCb3VuZGFyeSIsInB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlciIsImhhbmRsZXIiLCJzdXNwZW5zZVN0YWNrQ3Vyc29yIiwicHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlciIsInJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayIsInBvcFN1c3BlbnNlSGFuZGxlciIsImZpbmRGaXJzdFN1c3BlbmRlZCIsInJvdyIsInN0YXRlIiwicmV2ZWFsT3JkZXIiLCJBYm9ydENvbnRyb2xsZXJMb2NhbCIsIkFib3J0Q29udHJvbGxlciIsInNpZ25hbCIsImFib3J0ZWQiLCJsaXN0ZW5lciIsImFib3J0Iiwic2NoZWR1bGVDYWxsYmFjayQyIiwiTm9ybWFsUHJpb3JpdHkiLCJDYWNoZUNvbnRleHQiLCJDb25zdW1lciIsIlByb3ZpZGVyIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJjcmVhdGVDYWNoZSIsImNvbnRyb2xsZXIiLCJyZWZDb3VudCIsInJlbGVhc2VDYWNoZSIsImNhY2hlIiwiY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyIsImN1cnJlbnRFbnRhbmdsZWRQZW5kaW5nQ291bnQiLCJjdXJyZW50RW50YW5nbGVkTGFuZSIsImN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSIsInBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUiLCJwcmV2T25TdGFydFRyYW5zaXRpb25GaW5pc2giLCJTIiwiZW50YW5nbGVkTGlzdGVuZXJzIiwicmVxdWVzdFRyYW5zaXRpb25MYW5lIiwicmVzb2x2ZSIsImVudGFuZ2xlQXN5bmNBY3Rpb24iLCJyZXN1bWVkQ2FjaGUiLCJwZWVrQ2FjaGVGcm9tUG9vbCIsImNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlciIsInBvb2xlZENhY2hlIiwicHVzaFRyYW5zaXRpb24iLCJvZmZzY3JlZW5Xb3JrSW5Qcm9ncmVzcyIsInByZXZDYWNoZVBvb2wiLCJwb29sIiwiZ2V0U3VzcGVuZGVkQ2FjaGUiLCJjYWNoZUZyb21Qb29sIiwiY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSIsImN1cnJlbnRIb29rIiwid29ya0luUHJvZ3Jlc3NIb29rIiwiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSIsImRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyIsInNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWIiwibG9jYWxJZENvdW50ZXIiLCJ0aGVuYWJsZUluZGV4Q291bnRlciIsImdsb2JhbENsaWVudElkQ291bnRlciIsInRocm93SW52YWxpZEhvb2tFcnJvciIsImFyZUhvb2tJbnB1dHNFcXVhbCIsIm5leHREZXBzIiwicHJldkRlcHMiLCJyZW5kZXJXaXRoSG9va3MiLCJDb21wb25lbnQiLCJzZWNvbmRBcmciLCJuZXh0UmVuZGVyTGFuZXMiLCJ1cGRhdGVRdWV1ZSIsIkgiLCJIb29rc0Rpc3BhdGNoZXJPbk1vdW50IiwiSG9va3NEaXNwYXRjaGVyT25VcGRhdGUiLCJyZW5kZXJXaXRoSG9va3NBZ2FpbiIsImZpbmlzaFJlbmRlcmluZ0hvb2tzIiwiQ29udGV4dE9ubHlEaXNwYXRjaGVyIiwiZGlkUmVuZGVyVG9vRmV3SG9va3MiLCJkaWRSZWNlaXZlVXBkYXRlIiwiY2hlY2tJZkNvbnRleHRDaGFuZ2VkIiwibnVtYmVyT2ZSZVJlbmRlcnMiLCJsYXN0RWZmZWN0IiwiZXZlbnRzIiwic3RvcmVzIiwibWVtb0NhY2hlIiwiSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlciIsIlRyYW5zaXRpb25Bd2FyZUhvc3RDb21wb25lbnQiLCJkaXNwYXRjaGVyIiwibWF5YmVUaGVuYWJsZSIsInVzZVN0YXRlIiwidXNlVGhlbmFibGUiLCJjaGVja0RpZFJlbmRlcklkSG9vayIsImRpZFJlbmRlcklkSG9vayIsImJhaWxvdXRIb29rcyIsInJlc2V0SG9va3NPblVud2luZCIsIm1vdW50V29ya0luUHJvZ3Jlc3NIb29rIiwiaG9vayIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInVwZGF0ZVdvcmtJblByb2dyZXNzSG9vayIsIm5leHRDdXJyZW50SG9vayIsIm5leHRXb3JrSW5Qcm9ncmVzc0hvb2siLCJ1c2UiLCJ1c2FibGUiLCJyZWFkQ29udGV4dCIsInVzZU1lbW9DYWNoZSIsInNpemUiLCJtYXAiLCJhcnJheSIsImJhc2ljU3RhdGVSZWR1Y2VyIiwidXBkYXRlUmVkdWNlciIsInJlZHVjZXIiLCJ1cGRhdGVSZWR1Y2VySW1wbCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJwZW5kaW5nUXVldWUiLCJiYXNlRmlyc3QiLCJuZXdCYXNlUXVldWVGaXJzdCIsIm5ld0Jhc2VRdWV1ZUxhc3QiLCJkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0Iiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMiLCJyZXZlcnRMYW5lIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwicmVyZW5kZXJSZWR1Y2VyIiwibGFzdFJlbmRlclBoYXNlVXBkYXRlIiwidXBkYXRlU3luY0V4dGVybmFsU3RvcmUiLCJzdWJzY3JpYmUiLCJnZXRTbmFwc2hvdCIsImdldFNlcnZlclNuYXBzaG90IiwiaXNIeWRyYXRpbmckanNjb21wJDAiLCJzbmFwc2hvdENoYW5nZWQiLCJ1cGRhdGVFZmZlY3QiLCJzdWJzY3JpYmVUb1N0b3JlIiwiYmluZCIsInB1c2hFZmZlY3QiLCJ1cGRhdGVTdG9yZUluc3RhbmNlIiwiZGVzdHJveSIsInB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2siLCJyZW5kZXJlZFNuYXBzaG90IiwibmV4dFNuYXBzaG90IiwiY2hlY2tJZlNuYXBzaG90Q2hhbmdlZCIsImZvcmNlU3RvcmVSZXJlbmRlciIsImxhdGVzdEdldFNuYXBzaG90IiwibmV4dFZhbHVlIiwic2NoZWR1bGVVcGRhdGVPbkZpYmVyIiwibW91bnRTdGF0ZUltcGwiLCJpbml0aWFsU3RhdGUiLCJpbml0aWFsU3RhdGVJbml0aWFsaXplciIsInVwZGF0ZU9wdGltaXN0aWNJbXBsIiwicGFzc3Rocm91Z2giLCJkaXNwYXRjaEFjdGlvblN0YXRlIiwiYWN0aW9uUXVldWUiLCJzZXRQZW5kaW5nU3RhdGUiLCJzZXRTdGF0ZSIsInBheWxvYWQiLCJpc1JlbmRlclBoYXNlVXBkYXRlIiwiYWN0aW9uTm9kZSIsImlzVHJhbnNpdGlvbiIsIlQiLCJydW5BY3Rpb25TdGF0ZUFjdGlvbiIsInByZXZTdGF0ZSIsInByZXZUcmFuc2l0aW9uIiwiY3VycmVudFRyYW5zaXRpb24iLCJvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCIsImhhbmRsZUFjdGlvblJldHVyblZhbHVlIiwib25BY3Rpb25FcnJvciIsImVycm9yJDYwIiwibmV4dFN0YXRlIiwib25BY3Rpb25TdWNjZXNzIiwibm90aWZ5QWN0aW9uTGlzdGVuZXJzIiwibGFzdCIsImFjdGlvblN0YXRlUmVkdWNlciIsIm1vdW50QWN0aW9uU3RhdGUiLCJpbml0aWFsU3RhdGVQcm9wIiwic3NyRm9ybVN0YXRlIiwiZm9ybVN0YXRlIiwiSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwIiwiaW5Sb290T3JTaW5nbGV0b24iLCJkaXNwYXRjaFNldFN0YXRlIiwiZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUiLCJ1cGRhdGVBY3Rpb25TdGF0ZSIsInVwZGF0ZUFjdGlvblN0YXRlSW1wbCIsInN0YXRlSG9vayIsImN1cnJlbnRTdGF0ZUhvb2siLCJhY3Rpb25RdWV1ZUhvb2siLCJhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdCIsInJlcmVuZGVyQWN0aW9uU3RhdGUiLCJjcmVhdGUiLCJkZXBzIiwidXBkYXRlUmVmIiwibW91bnRFZmZlY3RJbXBsIiwiZmliZXJGbGFncyIsImhvb2tGbGFncyIsInVwZGF0ZUVmZmVjdEltcGwiLCJtb3VudEVmZmVjdCIsInVwZGF0ZUluc2VydGlvbkVmZmVjdCIsInVwZGF0ZUxheW91dEVmZmVjdCIsImltcGVyYXRpdmVIYW5kbGVFZmZlY3QiLCJyZWZDbGVhbnVwIiwidXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSIsImNvbmNhdCIsIm1vdW50RGVidWdWYWx1ZSIsInVwZGF0ZUNhbGxiYWNrIiwiY2FsbGJhY2siLCJ1cGRhdGVNZW1vIiwibmV4dENyZWF0ZSIsIm1vdW50RGVmZXJyZWRWYWx1ZUltcGwiLCJpbml0aWFsVmFsdWUiLCJyZXF1ZXN0RGVmZXJyZWRMYW5lIiwidXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwiLCJwcmV2VmFsdWUiLCJzdGFydFRyYW5zaXRpb24iLCJwZW5kaW5nU3RhdGUiLCJmaW5pc2hlZFN0YXRlIiwicHJldmlvdXNQcmlvcml0eSIsInJlc3VsdCIsInRoZW5hYmxlV2l0aE92ZXJyaWRlIiwiZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsIiwicmVxdWVzdFVwZGF0ZUxhbmUiLCJub29wJDIiLCJzdGFydEhvc3RUcmFuc2l0aW9uIiwiZm9ybUZpYmVyIiwiZm9ybURhdGEiLCJlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bCIsInJlcXVlc3RGb3JtUmVzZXQkMSIsImV4aXN0aW5nU3RhdGVIb29rIiwiaW5pdGlhbFJlc2V0U3RhdGUiLCJ1c2VIb3N0VHJhbnNpdGlvblN0YXR1cyIsInVwZGF0ZUlkIiwidXBkYXRlUmVmcmVzaCIsInJlZnJlc2hDYWNoZSIsInByb3ZpZGVyIiwicm9vdCQ2MyIsImVucXVldWVVcGRhdGUiLCJjcmVhdGVVcGRhdGUiLCJlbnRhbmdsZVRyYW5zaXRpb25zIiwiZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uIiwiZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlIiwiZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlIiwiY3VycmVudFN0YXRlIiwidGhyb3dJZkR1cmluZ1JlbmRlciIsInF1ZXVlTGFuZXMiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidXNlQ2FjaGVSZWZyZXNoIiwidXNlRm9ybVN0YXRlIiwidXNlQWN0aW9uU3RhdGUiLCJ1c2VPcHRpbWlzdGljIiwiaW5pdGlhbEFyZyIsImlkZW50aWZpZXJQcmVmaXgiLCJib29sZWFuT3JUaGVuYWJsZSIsImFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY3RvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm5leHRQcm9wcyIsImNsYXNzQ29tcG9uZW50VXBkYXRlciIsImlzTW91bnRlZCIsImNvbXBvbmVudCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJuZXh0Q29udGV4dCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyIsImJhc2VQcm9wcyIsImRlZmF1bHRQcm9wcyIsInByb3BOYW1lJDY3IiwicmVwb3J0R2xvYmFsRXJyb3IiLCJyZXBvcnRFcnJvciIsIkVycm9yRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwicHJvY2VzcyIsImVtaXQiLCJjb25zb2xlIiwiZGVmYXVsdE9uVW5jYXVnaHRFcnJvciIsImRlZmF1bHRPbkNhdWdodEVycm9yIiwiZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvciIsImxvZ1VuY2F1Z2h0RXJyb3IiLCJlcnJvckluZm8iLCJvblVuY2F1Z2h0RXJyb3IiLCJjb21wb25lbnRTdGFjayIsImUkNjgiLCJzZXRUaW1lb3V0IiwibG9nQ2F1Z2h0RXJyb3IiLCJib3VuZGFyeSIsIm9uQ2F1Z2h0RXJyb3IiLCJlcnJvckJvdW5kYXJ5IiwiZSQ2OSIsImNyZWF0ZVJvb3RFcnJvclVwZGF0ZSIsImNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUiLCJpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwibGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQiLCJTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24iLCJyZWNvbmNpbGVDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsInVwZGF0ZUZvcndhcmRSZWYiLCJwcm9wc1dpdGhvdXRSZWYiLCJwcmVwYXJlVG9SZWFkQ29udGV4dCIsImJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsiLCJ1cGRhdGVNZW1vQ29tcG9uZW50Iiwic2hvdWxkQ29uc3RydWN0IiwiY29tcGFyZSIsInVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQiLCJjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dCIsInByZXZQcm9wcyIsInVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50IiwidXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50IiwibmV4dElzRGV0YWNoZWQiLCJfcGVuZGluZ1Zpc2liaWxpdHkiLCJtYXJrUmVmIiwiZGVmZXJIaWRkZW5PZmZzY3JlZW5Db21wb25lbnQiLCJjYWNoZVBvb2wiLCJuZXh0QmFzZUxhbmVzIiwicHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMiLCJyZXBsYXlGdW5jdGlvbkNvbXBvbmVudCIsInVwZGF0ZUNsYXNzQ29tcG9uZW50IiwiY29udGV4dFR5cGUiLCJ1cGRhdGVyIiwicmVmcyIsImluaXRpYWxpemVVcGRhdGVRdWV1ZSIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsInByb2Nlc3NVcGRhdGVRdWV1ZSIsInN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24iLCJjb21wb25lbnREaWRNb3VudCIsInVucmVzb2x2ZWRPbGRQcm9wcyIsIm9sZENvbnRleHQiLCJjb250ZXh0VHlwZSRqc2NvbXAkMCIsImhhc0ZvcmNlVXBkYXRlIiwiY2xvbmVVcGRhdGVRdWV1ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIm1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nIiwiU1VTUEVOREVEX01BUktFUiIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwibW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlIiwiZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUiLCJwcmltYXJ5VHJlZURpZERlZmVyIiwid29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUiLCJ1cGRhdGVTdXNwZW5zZUNvbXBvbmVudCIsInNob3dGYWxsYmFjayIsImRpZFN1c3BlbmQiLCJKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAiLCJuZXh0SW5zdGFuY2UiLCJjIiwiaWQiLCJvdmVyZmxvdyIsImZhbGxiYWNrIiwibW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyIiwibW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbiIsInJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nIiwiZGF0YXNldCIsImRpZ2VzdCIsImRnc3QiLCJyZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlIiwicmV0cnlEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeSIsIl9yZWFjdFJldHJ5Iiwic3VidHJlZUZsYWdzIiwicHJpbWFyeUNoaWxkcmVuIiwib2Zmc2NyZWVuUHJvcHMiLCJjcmVhdGVGaWJlckZyb21PZmZzY3JlZW4iLCJzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIiLCJwcm9wYWdhdGlvblJvb3QiLCJzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoIiwiaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlIiwiaXNCYWNrd2FyZHMiLCJ0YWlsIiwibGFzdENvbnRlbnRSb3ciLCJ0YWlsTW9kZSIsInJlbmRlclN0YXRlIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwidXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50IiwiYmVnaW5Xb3JrIiwicHVzaFByb3ZpZGVyIiwiZGlkU3VzcGVuZEJlZm9yZSIsImF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlIiwibGF6eUNvbXBvbmVudCIsInByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzIiwiaXNEZWh5ZHJhdGVkIiwiZ2V0UmVzb3VyY2UiLCJnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIiLCJzZXRJbml0aWFsUHJvcGVydGllcyIsInJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSIsImFueVByb3BzIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVsIiwiY3Jvc3NPcmlnaW4iLCJ0aXRsZSIsInNyYyIsImNhbkh5ZHJhdGVJbnN0YW5jZSIsImNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJwb29sZWRDYWNoZUxhbmVzIiwidmFsdWVDdXJzb3IiLCJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciIsImxhc3RDb250ZXh0RGVwZW5kZW5jeSIsInByb3ZpZGVyRmliZXIiLCJwb3BQcm92aWRlciIsImNvbnRleHRzIiwiZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlIiwibGlzdCIsIm5leHRGaWJlciIsImZpcnN0Q29udGV4dCIsImRlcGVuZGVuY3kiLCJpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dCIsImN1cnJlbnRQYXJlbnQiLCJjdXJyZW50RGVwZW5kZW5jaWVzIiwibWVtb2l6ZWRWYWx1ZSIsInJlYWRDb250ZXh0Rm9yQ29uc3VtZXIiLCJjb25zdW1lciIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwiaGlkZGVuQ2FsbGJhY2tzIiwiY2FsbGJhY2tzIiwiZXhlY3V0aW9uQ29udGV4dCIsImVucXVldWVDYXB0dXJlZFVwZGF0ZSIsImNhcHR1cmVkVXBkYXRlIiwibmV3Rmlyc3QiLCJuZXdMYXN0IiwiY2xvbmUiLCJkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uIiwid29ya0luUHJvZ3Jlc3MkanNjb21wJDAiLCJpbnN0YW5jZSRqc2NvbXAkMCIsImxhc3RQZW5kaW5nVXBkYXRlIiwiZmlyc3RQZW5kaW5nVXBkYXRlIiwiaXNIaWRkZW5VcGRhdGUiLCJjYWxsQ2FsbGJhY2siLCJjb21taXRDYWxsYmFja3MiLCJjb21taXRIb29rRWZmZWN0TGlzdE1vdW50IiwiZmluaXNoZWRXb3JrIiwiZmlyc3RFZmZlY3QiLCJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvciIsImNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCIsIm5lYXJlc3RNb3VudGVkQW5jZXN0b3IkanNjb21wJDAiLCJuZWFyZXN0TW91bnRlZEFuY2VzdG9yIiwiY29tbWl0Q2xhc3NDYWxsYmFja3MiLCJzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInNhZmVseUF0dGFjaFJlZiIsImluc3RhbmNlVG9Vc2UiLCJzYWZlbHlEZXRhY2hSZWYiLCJlcnJvciQxMTIiLCJjb21taXRIb3N0TW91bnQiLCJhdXRvRm9jdXMiLCJzcmNTZXQiLCJzcmNzZXQiLCJjb21taXRIb3N0VXBkYXRlIiwiZG9tRWxlbWVudCIsImxhc3RQcm9wcyIsInByb3BLZXkiLCJsYXN0UHJvcCIsInNldFByb3AiLCJwcm9wS2V5JDIwMyIsInByb3BLZXkkMjE5IiwicHJvcEtleSQyMjQiLCJwcm9wS2V5JDIyOSIsInNldFByb3BPbkN1c3RvbUVsZW1lbnQiLCJwcm9wS2V5JDIzNCIsInVwZGF0ZVByb3BlcnRpZXMiLCJpc0hvc3RQYXJlbnQiLCJnZXRIb3N0U2libGluZyIsImluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIiLCJiZWZvcmUiLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUiLCJvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4iLCJvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIiwibmVlZHNGb3JtUmVzZXQiLCJQb3NzaWJseVdlYWtTZXQiLCJXZWFrU2V0IiwibmV4dEVmZmVjdCIsInNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1ciIsImNvbW1pdExheW91dEVmZmVjdE9uRmliZXIiLCJmaW5pc2hlZFJvb3QiLCJyZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiZXJyb3IkMTExIiwiY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MiLCJwcmV2T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIiwicHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4iLCJyZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzIiwiZGV0YWNoRmliZXJBZnRlckVmZmVjdHMiLCJob3N0UGFyZW50IiwiaG9zdFBhcmVudElzQ29udGFpbmVyIiwicmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyIsImNvbW1pdERlbGV0aW9uRWZmZWN0c09uRmliZXIiLCJkZWxldGVkRmliZXIiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvdW50IiwicmVtb3ZlQ2hpbGQiLCJwcmV2SG9zdFBhcmVudCIsInByZXZIb3N0UGFyZW50SXNDb250YWluZXIiLCJhdHRyaWJ1dGVzIiwicmVtb3ZlQXR0cmlidXRlTm9kZSIsInByZXZIb3N0UGFyZW50SXNDb250YWluZXIkMTE5IiwiY2xlYXJTdXNwZW5zZUJvdW5kYXJ5IiwicmV0cnlJZkJsb2NrZWRPbiIsImF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMiLCJ3YWtlYWJsZXMiLCJyZXRyeUNhY2hlIiwiX3JldHJ5Q2FjaGUiLCJnZXRSZXRyeUNhY2hlIiwid2FrZWFibGUiLCJyZXRyeSIsInJlc29sdmVSZXRyeVdha2VhYmxlIiwicmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyIsInJvb3QkanNjb21wJDAiLCJwYXJlbnRGaWJlciIsImNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIiLCJjdXJyZW50SG9pc3RhYmxlUm9vdCIsImNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyIsImhvaXN0YWJsZVJvb3QiLCJjdXJyZW50UmVzb3VyY2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhlYWQiLCJxdWVyeVNlbGVjdG9yIiwibWF5YmVOb2RlcyIsImdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZSIsInNwbGljZSIsImNvbnRlbnQiLCJwcm9wZXJ0eSIsImh0dHBFcXVpdiIsImNoYXJTZXQiLCJtb3VudEhvaXN0YWJsZSIsImFjcXVpcmVSZXNvdXJjZSIsIm5leHROb2RlIiwidGFnQ2FjaGVzIiwiZ2V0SG9pc3RhYmxlUm9vdCIsInJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyIsImdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUiLCJfY3VycmVudCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzIiwiZGlzcGxheSIsInJldHJ5UXVldWUiLCJwYXJlbnQkanNjb21wJDAiLCJwYXJlbnQkMTEzIiwicGFyZW50JDExNSIsInJlc2V0IiwiZmluaXNoZWRSb290JGpzY29tcCQwIiwiaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyIsImNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMiLCJwcmV2aW91c0NhY2hlIiwiY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QiLCJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyIsImNvbW1pdHRlZExhbmVzIiwiY29tbWl0dGVkVHJhbnNpdGlvbnMiLCJjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyIiwiX2ZpbmlzaGVkV29yayRtZW1vaXplMiIsIm9uUG9zdENvbW1pdCIsInBhc3NpdmVFZmZlY3REdXJhdGlvbiIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyIsImNvbW1pdHRlZExhbmVzJGpzY29tcCQwIiwiY29tbWl0dGVkVHJhbnNpdGlvbnMkanNjb21wJDAiLCJzdXNwZW5zZXlDb21taXRGbGFnIiwicmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0IiwiYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIiLCJyZXNvdXJjZSIsInN1c3BlbmRlZFN0YXRlIiwibWVkaWEiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImxvYWRpbmciLCJnZXRTdHlsZUtleSIsImdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkiLCJfcCIsIm9uVW5zdXNwZW5kIiwic3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzIiwicHJlbG9hZFByb3BzTWFwIiwiYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0IiwibGlua0luc3RhbmNlIiwiUHJvbWlzZSIsInJlamVjdCIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzdHlsZXNoZWV0cyIsInByZWxvYWQiLCJzdXNwZW5kUmVzb3VyY2UiLCJwcmV2aW91c0hvaXN0YWJsZVJvb3QiLCJkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyIsInByZXZpb3VzRmliZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzIiwiY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbiIsImNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlciIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMiLCJkZWxldGVkU3VidHJlZVJvb3QiLCJGaWJlck5vZGUiLCJpc1JlYWN0Q29tcG9uZW50IiwicmVzZXRXb3JrSW5Qcm9ncmVzcyIsIm93bmVyIiwiZmliZXJUYWciLCJob3N0Q29udGV4dCIsIml0ZW1Qcm9wIiwicHJlY2VkZW5jZSIsIm9uTG9hZCIsIm9uRXJyb3IiLCJhc3luYyIsImlzSG9zdEhvaXN0YWJsZVR5cGUiLCJlbGVtZW50cyIsInByaW1hcnlDaGlsZEluc3RhbmNlIiwiX3BlbmRpbmdNYXJrZXJzIiwiX3RyYW5zaXRpb25zIiwiZGV0YWNoIiwiYXR0YWNoIiwicGVuZGluZ0NoaWxkcmVuIiwibWFya1VwZGF0ZSIsInByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCIsInByZWxvYWRSZXNvdXJjZSIsInNjaGVkdWxlUmV0cnlFZmZlY3QiLCJ3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMiLCJjdXRPZmZUYWlsSWZOZWVkZWQiLCJoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2siLCJsYXN0VGFpbE5vZGUiLCJsYXN0VGFpbE5vZGUkMTMxIiwiYnViYmxlUHJvcGVydGllcyIsImNvbXBsZXRlZFdvcmsiLCJkaWRCYWlsb3V0IiwibmV3Q2hpbGRMYW5lcyIsImNoaWxkJDEzMiIsImNvbXBsZXRlV29yayIsInBlbmRpbmdDb250ZXh0IiwicXVldWVSZWNvdmVyYWJsZUVycm9ycyIsImNyZWF0ZUVsZW1lbnROUyIsImlubmVySFRNTCIsImNyZWF0ZVRleHROb2RlIiwiY2FjaGUkMTQ0IiwibGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzIiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJpbnRlcnJ1cHRlZFdvcmsiLCJEZWZhdWx0QXN5bmNEaXNwYXRjaGVyIiwiZ2V0Q2FjaGVGb3JUeXBlIiwicmVzb3VyY2VUeXBlIiwiY2FjaGVGb3JUeXBlIiwiUG9zc2libHlXZWFrTWFwIiwid29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24iLCJ3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlIiwid29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzIiwid29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmciLCJ3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyIsIndvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzIiwid29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyIsIndvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzIiwid29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSIsIkluZmluaXR5Iiwid29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyIsInJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzIiwicm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMiLCJwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyIsInBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzIiwicGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyIsInN1c3BlbnNlSGFuZGxlciIsImNhbmNlbFBlbmRpbmdDb21taXQiLCJwcmVwYXJlRnJlc2hTdGFjayIsIm1hcmtSb290U3VzcGVuZGVkIiwiZW5zdXJlUm9vdElzU2NoZWR1bGVkIiwicGVyZm9ybVdvcmtPblJvb3QiLCJmb3JjZVN5bmMiLCJzaG91bGRUaW1lU2xpY2UiLCJleHBpcmVkTGFuZXMiLCJleGl0U3RhdHVzIiwicHJldkV4ZWN1dGlvbkNvbnRleHQiLCJwcmV2RGlzcGF0Y2hlciIsInB1c2hEaXNwYXRjaGVyIiwicHJldkFzeW5jRGlzcGF0Y2hlciIsInB1c2hBc3luY0Rpc3BhdGNoZXIiLCJ0aHJvd25WYWx1ZSIsInRocm93QW5kVW53aW5kV29ya0xvb3AiLCJyZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrIiwiaG9zdEZpYmVyIiwiY29tcGxldGVVbml0T2ZXb3JrIiwicmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrIiwid29ya0xvb3BDb25jdXJyZW50IiwidGhyb3duVmFsdWUkMTY2IiwiaGFuZGxlVGhyb3ciLCJBIiwicmVuZGVyUm9vdENvbmN1cnJlbnQiLCJyZW5kZXJSb290U3luYyIsInJlbmRlcldhc0NvbmN1cnJlbnQiLCJpc1JlbmRlckNvbnNpc3RlbnRXaXRoRXh0ZXJuYWxTdG9yZXMiLCJlcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyIsIndhc1Jvb3REZWh5ZHJhdGVkIiwidGltZW91dEhhbmRsZSIsInNjaGVkdWxlVGltZW91dCIsImNvbW1pdFJvb3RXaGVuUmVhZHkiLCJlcnJvcnMiLCJhcHBseSIsInJlY292ZXJhYmxlRXJyb3JzIiwidHJhbnNpdGlvbnMiLCJkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUiLCJ1cGRhdGVkTGFuZXMiLCJzdXNwZW5kZWRSZXRyeUxhbmVzIiwiZGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzIiwic3VzcGVuZGVkQ29tbWl0UmVhc29uIiwiY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lIiwiY29tcGxldGVkUmVuZGVyRW5kVGltZSIsInVuc3VzcGVuZCIsIm5vb3AiLCJpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyIsImNvbW1pdCIsInN0eWxlc2hlZXRUaW1lciIsImNsZWFyVGltZW91dCIsIndhaXRGb3JDb21taXRUb0JlUmVhZHkiLCJjb21taXRSb290IiwiY2hlY2siLCJkaWRBdHRlbXB0RW50aXJlVHJlZSIsImV4cGlyYXRpb25UaW1lcyIsImluZGV4JDYiLCJmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCIsImNhbmNlbFRpbWVvdXQiLCJhbGxFbnRhbmdsZWRMYW5lcyIsImluZGV4JDQiLCJzaG91bGRZaWVsZEZvclByZXJlbmRlcmluZyIsInVuaXRPZldvcmsiLCJ3b3JrTG9vcFN5bmMiLCJ0aHJvd25WYWx1ZSQxNjQiLCJwZXJmb3JtVW5pdE9mV29yayIsInN1c3BlbmRlZFJlYXNvbiIsInJvb3RSZW5kZXJMYW5lcyIsImF0dGFjaFBpbmdMaXN0ZW5lciIsIm1hcmtlckluc3RhbmNlcyIsImNhdXNlIiwid3JhcHBlckVycm9yIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRVbml0T2ZXb3JrIiwic2tpcFNpYmxpbmdzIiwicHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkiLCJyZW5kZXJQcmlvcml0eUxldmVsIiwiZmx1c2hQYXNzaXZlRWZmZWN0cyIsImNhbGxiYWNrTm9kZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJyZW1haW5pbmdMYW5lcyIsInByZXZpb3VzbHlQZW5kaW5nTGFuZXMiLCJpbmRleCQ3IiwiaGlkZGVuVXBkYXRlc0ZvckxhbmUiLCJtYXJrUm9vdEZpbmlzaGVkIiwiZXZlbnRzRW5hYmxlZCIsIl9lbmFibGVkIiwic2VsZWN0aW9uIiwiZSQyMCIsImluZGV4V2l0aGluQW5jaG9yIiwiaW5kZXhXaXRoaW5Gb2N1cyIsInNlbGVjdGlvbkluZm9ybWF0aW9uIiwicmVzb2x2ZWRQcmV2UHJvcHMiLCJjbGVhckNvbnRhaW5lclNwYXJpbmdseSIsImNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0cyIsInJlbGVhc2VSb290UG9vbGVkQ2FjaGUiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0Um9vdCIsIm9uUmVjb3ZlcmFibGVFcnJvciIsImNvbW1pdFJvb3RJbXBsIiwicm9vdCQxNzAiLCJyZW5kZXJQcmlvcml0eSIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsImNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290Iiwicm9vdEZpYmVyIiwicGluZ0NhY2hlIiwidGhyZWFkSURzIiwicGluZ1N1c3BlbmRlZFJvb3QiLCJyZXRyeVRpbWVkT3V0Qm91bmRhcnkiLCJib3VuZGFyeUZpYmVyIiwiZmlyc3RTY2hlZHVsZWRSb290IiwibGFzdFNjaGVkdWxlZFJvb3QiLCJkaWRTY2hlZHVsZU1pY3JvdGFzayIsIm1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayIsImlzRmx1c2hpbmdXb3JrIiwiY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUiLCJjYiIsInByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzayIsInNjaGVkdWxlTWljcm90YXNrIiwic3luY1RyYW5zaXRpb25MYW5lcyIsIm9ubHlMZWdhY3kiLCJkaWRQZXJmb3JtU29tZVdvcmsiLCJyb290JDE3MiIsInBlcmZvcm1TeW5jV29ya09uUm9vdCIsImN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCIsInByZXYiLCJzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrIiwiaW5kZXgkNSIsImV4cGlyYXRpb25UaW1lIiwicGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrIiwiZGlkVGltZW91dCIsIm9yaWdpbmFsQ2FsbGJhY2tOb2RlIiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAiLCJjb2VyY2VGb3JtQWN0aW9uUHJvcCIsImFjdGlvblByb3AiLCJjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIiLCJzdWJtaXR0ZXIiLCJ0ZW1wIiwiRm9ybURhdGEiLCJpJGpzY29tcCRpbmxpbmVfMTQzOSIsImV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAiLCJ0b1VwcGVyQ2FzZSIsIm5vbkRlbGVnYXRlZEV2ZW50cyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJfZGlzcGF0Y2hRdWV1ZSRpIiwicHJldmlvdXNJbnN0YW5jZSIsImkkanNjb21wJDAiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMkaSIsInRhcmdldEVsZW1lbnQiLCJsaXN0ZW5lclNldEtleSIsImFkZFRyYXBwZWRFdmVudExpc3RlbmVyIiwibGlzdGVuVG9OYXRpdmVFdmVudCIsImlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIiLCJsaXN0ZW5pbmdNYXJrZXIiLCJyb290Q29udGFpbmVyRWxlbWVudCIsInRhcmdldENvbnRhaW5lciIsImxpc3RlbmVyV3JhcHBlciIsImRpc3BhdGNoRGlzY3JldGVFdmVudCIsImRpc3BhdGNoQ29udGludW91c0V2ZW50IiwiY2FwdHVyZSIsInBhc3NpdmUiLCJkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0iLCJ0YXJnZXRJbnN0JGpzY29tcCQwIiwiYW5jZXN0b3JJbnN0Iiwibm9kZVRhZyIsImNvbnRhaW5lciIsImdyYW5kVGFnIiwiU3ludGhldGljRXZlbnRDdG9yIiwiaW5DYXB0dXJlUGhhc2UiLCJhY2N1bXVsYXRlVGFyZ2V0T25seSIsInJlYWN0RXZlbnROYW1lIiwibGFzdEhvc3RDb21wb25lbnQiLCJfaW5zdGFuY2UiLCJjcmVhdGVEaXNwYXRjaExpc3RlbmVyIiwicGFyZW50V2luZG93IiwiZ2V0UGFyZW50IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudCIsImdldFRhcmdldEluc3RGdW5jIiwiaGFuZGxlRXZlbnRGdW5jIiwiZmFsbGJhY2tEYXRhIiwiZXZlbnRUeXBlIiwiZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyIsImNoYXIiLCJnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMiLCJtYXliZVRhcmdldEluc3QiLCJmb3JtQWN0aW9uIiwiZXh0cmFjdEV2ZW50cyQxIiwidGFyZ2V0RmliZXIiLCJjYXB0dXJlTmFtZSIsIl9pbnN0YW5jZTIiLCJ1bnNoaWZ0IiwiY29tbW9uIiwiX2luc3RhbmNlMyIsIk5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCIsIk5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCIsIm5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZSIsIm1hcmt1cCIsInNlcnZlclRleHQiLCJjbGllbnRUZXh0IiwiZm9ybUVuY1R5cGUiLCJmb3JtTWV0aG9kIiwiZm9ybVRhcmdldCIsImVuY1R5cGUiLCJfX2h0bWwiLCJtdXRlZCIsImlzTmFOIiwiZW5kc1dpdGgiLCJoYXNTcmMiLCJoYXNTcmNTZXQiLCJwcm9wVmFsdWUkMTg2IiwicGFyZW50TmFtZXNwYWNlIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJsb2NhbFByb21pc2UiLCJxdWV1ZU1pY3JvdGFzayIsImhhbmRsZUVycm9ySW5OZXh0VGljayIsInBhcmVudEluc3RhbmNlIiwic3VzcGVuc2VJbnN0YW5jZSIsImRlcHRoIiwidGFyZ2V0SW5zdGFuY2UiLCJwcmV2aW91c1NpYmxpbmciLCJyb290Q29udGFpbmVySW5zdGFuY2UiLCJwcmVjb25uZWN0c1NldCIsImdldFJvb3ROb2RlIiwicHJldmlvdXNEaXNwYXRjaGVyIiwiZCIsImYiLCJwcmV2aW91c1dhc1JlbmRlcmluZyIsIndhc1JlbmRlcmluZyIsInIiLCJmb3JtSW5zdCIsIkQiLCJwcmVjb25uZWN0QXMiLCJDIiwiTCIsImFzIiwiZ2xvYmFsRG9jdW1lbnQiLCJwcmVsb2FkU2VsZWN0b3IiLCJpbWFnZVNyY1NldCIsImltYWdlU2l6ZXMiLCJnZXRTY3JpcHRLZXkiLCJnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkiLCJtIiwiWCIsInNjcmlwdHMiLCJhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdCIsImxpbmsiLCJpbnNlcnRTdHlsZXNoZWV0IiwiTSIsImxpbWl0ZWRFc2NhcGVkSHJlZiIsImN1cnJlbnRQcm9wcyIsInByZWxvYWRQcm9wcyIsInN0eWxlcyQyNDIiLCJyZXNvdXJjZSQyNDMiLCJpbnRlZ3JpdHkiLCJocmVmTGFuZyIsInJlZmVycmVyUG9saWN5IiwicmF3UHJvcHMiLCJzdHlsZVByb3BzIiwiaW5zdGFuY2UkMjQ4Iiwibm9kZXMiLCJwcmlvciIsInN0eWxlc2hlZXRQcm9wcyIsInNjcmlwdFByb3BzIiwia2V5QXR0cmlidXRlIiwiY2FjaGVzIiwibm9kZUtleSIsInByZWNlZGVuY2VzQnlSb290IiwiaW5zZXJ0U3R5bGVzaGVldEludG9Sb290IiwicHJlY2VkZW5jZXMiLCJGaWJlclJvb3ROb2RlIiwiaHlkcmF0ZSIsImluY29tcGxldGVUcmFuc2l0aW9ucyIsInVwZGF0ZUNvbnRhaW5lckltcGwiLCJwYXJlbnRDb21wb25lbnQiLCJnZXRDb250ZXh0Rm9yU3VidHJlZSIsIm1hcmtSZXRyeUxhbmVJbXBsIiwibWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQiLCJhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbiIsImJsb2NrZWRPbiIsImZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQiLCJyZXR1cm5fdGFyZ2V0SW5zdCIsImNsZWFySWZDb250aW51b3VzRXZlbnQiLCJxdWV1ZWRGb2N1cyIsImFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQiLCJxdWV1ZWREcmFnIiwicXVldWVkTW91c2UiLCJxdWV1ZWRQb2ludGVycyIsInF1ZXVlZFBvaW50ZXJDYXB0dXJlcyIsInF1ZXVlSWZDb250aW51b3VzRXZlbnQiLCJkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMiLCJmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCIsImhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQiLCJxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMiLCJleGlzdGluZ1F1ZXVlZEV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsImF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldCIsInF1ZXVlZFRhcmdldCIsInByaW9yaXR5IiwicnVuV2l0aFByaW9yaXR5IiwiYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudCIsInF1ZXVlZEV2ZW50IiwibmV4dEJsb2NrZWRPbiIsIm5hdGl2ZUV2ZW50Q2xvbmUiLCJzaGlmdCIsImF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCIsInJlcGxheVVuYmxvY2tlZEV2ZW50cyIsInNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZCIsInVuYmxvY2tlZCIsImxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSIsInNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZCIsImZvcm1SZXBsYXlpbmdRdWV1ZSIsInN1Ym1pdHRlck9yQWN0aW9uIiwidW5ibG9jayIsIiQkcmVhY3RGb3JtUmVwbGF5IiwiZm9ybVByb3BzIiwiUmVhY3RET01Sb290IiwiaW50ZXJuYWxSb290IiwiX2ludGVybmFsUm9vdCIsIlJlYWN0RE9NSHlkcmF0aW9uUm9vdCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsImlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTY4NiIsInZlcnNpb24iLCJmaW5kRE9NTm9kZSIsImNvbXBvbmVudE9yRWxlbWVudCIsInBhcmVudEEiLCJwYXJlbnRCIiwiZGlkRmluZENoaWxkIiwiY2hpbGQkMiIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoIiwiaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaG9vayRqc2NvbXAkaW5saW5lXzIxNjYiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImV4cG9ydHMiLCJjcmVhdGVSb290IiwiaXNTdHJpY3RNb2RlIiwidW5zdGFibGVfc3RyaWN0TW9kZSIsInVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MiLCJpbml0aWFsQ2hpbGRyZW4iLCJoeWRyYXRpb25DYWxsYmFja3MiLCJ0cmFuc2l0aW9uQ2FsbGJhY2tzIiwiY3JlYXRlRmliZXJSb290IiwiSW50ZXJuYWxzIiwiZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyIsImlucHV0IiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlUG9ydGFsJDEiLCJmbHVzaFN5bmMiLCJwcmV2aW91c1RyYW5zaXRpb24iLCJwcmV2aW91c1VwZGF0ZVByaW9yaXR5IiwicHJlY29ubmVjdCIsInByZWZldGNoRE5TIiwicHJlaW5pdCIsImZldGNoUHJpb3JpdHkiLCJub25jZSIsInByZWluaXRNb2R1bGUiLCJwcmVsb2FkTW9kdWxlIiwicmVxdWVzdEZvcm1SZXNldCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwicGVybWFsaW5rIiwidXNlRm9ybVN0YXR1cyIsImNoZWNrRENFIiwibW9kdWxlIiwianN4UHJvZCIsImNvbmZpZyIsIm1heWJlS2V5IiwianN4IiwianN4cyIsIlJlYWN0Tm9vcFVwZGF0ZVF1ZXVlIiwiZW1wdHlPYmplY3QiLCJDb21wb25lbnREdW1teSIsIlB1cmVDb21wb25lbnQiLCJwYXJ0aWFsU3RhdGUiLCJmb3JjZVVwZGF0ZSIsInB1cmVDb21wb25lbnRQcm90b3R5cGUiLCJSZWFjdEVsZW1lbnQiLCJzZWxmIiwiaXNWYWxpZEVsZW1lbnQiLCJvYmplY3QiLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCIsImdldEVsZW1lbnRLZXkiLCJlc2NhcGVyTG9va3VwIiwibWFwSW50b0FycmF5IiwiZXNjYXBlZFByZWZpeCIsIm5hbWVTb0ZhciIsIm9sZEVsZW1lbnQiLCJuZXdLZXkiLCJpbnZva2VDYWxsYmFjayIsIm5leHROYW1lUHJlZml4IiwicmVzb2x2ZVRoZW5hYmxlIiwibWFwQ2hpbGRyZW4iLCJmdW5jIiwibGF6eUluaXRpYWxpemVyIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtb2R1bGVPYmplY3QiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJmb3JFYWNoRnVuYyIsImZvckVhY2hDb250ZXh0IiwibiIsInRvQXJyYXkiLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImFjdCIsImNsb25lRWxlbWVudCIsImNoaWxkQXJyYXkiLCJjcmVhdGVDb250ZXh0IiwiY2hpbGRyZW5MZW5ndGgiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwibGF6eSIsIm1lbW8iLCJzY29wZSIsInVuc3RhYmxlX3VzZUNhY2hlUmVmcmVzaCIsIkNvbnRleHQiLCJoZWFwIiwicGFyZW50SW5kZXgiLCJwZWVrIiwiZmlyc3QiLCJoYWxmTGVuZ3RoIiwibGVmdEluZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0IiwiZGlmZiIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwibG9jYWxQZXJmb3JtYW5jZSIsImxvY2FsRGF0ZSIsImluaXRpYWxUaW1lIiwidGFza1F1ZXVlIiwidGltZXJRdWV1ZSIsInRhc2tJZENvdW50ZXIiLCJjdXJyZW50VGFzayIsImN1cnJlbnRQcmlvcml0eUxldmVsIiwiaXNQZXJmb3JtaW5nV29yayIsImlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIiwiaXNIb3N0VGltZW91dFNjaGVkdWxlZCIsImxvY2FsU2V0VGltZW91dCIsImxvY2FsQ2xlYXJUaW1lb3V0IiwibG9jYWxTZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJhZHZhbmNlVGltZXJzIiwidGltZXIiLCJzdGFydFRpbWUiLCJoYW5kbGVUaW1lb3V0IiwicmVxdWVzdEhvc3RDYWxsYmFjayIsImZpcnN0VGltZXIiLCJyZXF1ZXN0SG9zdFRpbWVvdXQiLCJzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImlzTWVzc2FnZUxvb3BSdW5uaW5nIiwidGFza1RpbWVvdXRJRCIsImZyYW1lSW50ZXJ2YWwiLCJzaG91bGRZaWVsZFRvSG9zdCIsInBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImhhc01vcmVXb3JrIiwicHJldmlvdXNQcmlvcml0eUxldmVsIiwicHJpb3JpdHlMZXZlbCIsImNvbnRpbnVhdGlvbkNhbGxiYWNrIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIm1zIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidGFzayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmcHMiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsImV2ZW50SGFuZGxlciIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ0aW1lb3V0IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwicGFyZW50UHJpb3JpdHlMZXZlbCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjcmVhdGVEZWZhdWx0U2VsZWN0U3RhdGUiLCJoYXNFcnJvciIsImVycm9yTWVzc2FnZSIsIkZvcm1Db250ZXh0IiwiRm9ybVByb3ZpZGVyIiwidDAiLCIkIiwidDEiLCJpc01hc2tlZCIsInN1cm5hbWUiLCJjaXR5IiwiZGlzdHJpY3QiLCJhZGRyZXNzIiwic2V0RGF0YSIsInQyIiwiZmllbGQiLCJwcmV2RGF0YSIsInVwZGF0ZUZpZWxkIiwidDMiLCJ0NCIsIklucHV0IiwiaGludCIsImlucHV0UHJvcHMiLCJsYWJlbCIsImh0bWxGb3IiLCJhdXRvQ29tcGxldGUiLCJ0NSIsInQ2IiwiY2xhc3NOYW1lIiwicmVuZGVyU3RhdHNEYXRhIiwicmVuZGVyU3RhdHNFbCIsImluY3JlYXNlUmVuZGVyQ291bnQiLCJuZXdFbCIsImNsYXNzTGlzdCIsIlNlbGVjdCIsIm9uQ2hhbmdlIiwicGxhY2Vob2xkZXIiLCJoYW5kbGVDaGFuZ2UiLCJ0NyIsInQ4IiwidDkiLCJfdGVtcCIsIm9wdGlvbiIsIkNJVFlfTElTVCIsIkRJU1RSSUNUX0xJU1QiLCJjaXR5SWQiLCJGb3JtIiwiZmlsdGVyIiwiZmlsdGVyZWREaXN0cmljdExpc3QiLCJ0MTAiLCJ0MTEiLCJldmVudF8wIiwiTnVtYmVyIiwidmFsdWVfMCIsImV2ZW50XzEiLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=